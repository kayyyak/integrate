
TrapezoidalTraj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009744  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  080098e0  080098e0  000198e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a138  0800a138  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a140  0800a140  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a144  0800a144  0001a144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800a148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b18  200002d8  0800a41c  000202d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000df0  0800a41c  00020df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d91  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb5  00000000  00000000  00035095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00037c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00038bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199b9  00000000  00000000  00039a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d84  00000000  00000000  000533d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d056  00000000  00000000  0006915d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001061b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000448c  00000000  00000000  00106204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002d8 	.word	0x200002d8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080098c4 	.word	0x080098c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002dc 	.word	0x200002dc
 80001d4:	080098c4 	.word	0x080098c4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b992 	b.w	80010e8 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f824 	bl	8000e18 <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__aeabi_d2ulz>:
 8000ddc:	b5d0      	push	{r4, r6, r7, lr}
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__aeabi_d2ulz+0x34>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	4606      	mov	r6, r0
 8000de4:	460f      	mov	r7, r1
 8000de6:	f7ff fbb3 	bl	8000550 <__aeabi_dmul>
 8000dea:	f7ff fe61 	bl	8000ab0 <__aeabi_d2uiz>
 8000dee:	4604      	mov	r4, r0
 8000df0:	f7ff fb34 	bl	800045c <__aeabi_ui2d>
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <__aeabi_d2ulz+0x38>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f7ff fbaa 	bl	8000550 <__aeabi_dmul>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4630      	mov	r0, r6
 8000e02:	4639      	mov	r1, r7
 8000e04:	f7ff f9ec 	bl	80001e0 <__aeabi_dsub>
 8000e08:	f7ff fe52 	bl	8000ab0 <__aeabi_d2uiz>
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000e10:	3df00000 	.word	0x3df00000
 8000e14:	41f00000 	.word	0x41f00000

08000e18 <__udivmoddi4>:
 8000e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	9d08      	ldr	r5, [sp, #32]
 8000e1e:	4604      	mov	r4, r0
 8000e20:	468e      	mov	lr, r1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d14d      	bne.n	8000ec2 <__udivmoddi4+0xaa>
 8000e26:	428a      	cmp	r2, r1
 8000e28:	4694      	mov	ip, r2
 8000e2a:	d969      	bls.n	8000f00 <__udivmoddi4+0xe8>
 8000e2c:	fab2 f282 	clz	r2, r2
 8000e30:	b152      	cbz	r2, 8000e48 <__udivmoddi4+0x30>
 8000e32:	fa01 f302 	lsl.w	r3, r1, r2
 8000e36:	f1c2 0120 	rsb	r1, r2, #32
 8000e3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000e3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e42:	ea41 0e03 	orr.w	lr, r1, r3
 8000e46:	4094      	lsls	r4, r2
 8000e48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e4c:	0c21      	lsrs	r1, r4, #16
 8000e4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e52:	fa1f f78c 	uxth.w	r7, ip
 8000e56:	fb08 e316 	mls	r3, r8, r6, lr
 8000e5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e5e:	fb06 f107 	mul.w	r1, r6, r7
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d90a      	bls.n	8000e7c <__udivmoddi4+0x64>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e6e:	f080 811f 	bcs.w	80010b0 <__udivmoddi4+0x298>
 8000e72:	4299      	cmp	r1, r3
 8000e74:	f240 811c 	bls.w	80010b0 <__udivmoddi4+0x298>
 8000e78:	3e02      	subs	r6, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1a5b      	subs	r3, r3, r1
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e84:	fb08 3310 	mls	r3, r8, r0, r3
 8000e88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e8c:	fb00 f707 	mul.w	r7, r0, r7
 8000e90:	42a7      	cmp	r7, r4
 8000e92:	d90a      	bls.n	8000eaa <__udivmoddi4+0x92>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9c:	f080 810a 	bcs.w	80010b4 <__udivmoddi4+0x29c>
 8000ea0:	42a7      	cmp	r7, r4
 8000ea2:	f240 8107 	bls.w	80010b4 <__udivmoddi4+0x29c>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eae:	1be4      	subs	r4, r4, r7
 8000eb0:	2600      	movs	r6, #0
 8000eb2:	b11d      	cbz	r5, 8000ebc <__udivmoddi4+0xa4>
 8000eb4:	40d4      	lsrs	r4, r2
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d909      	bls.n	8000eda <__udivmoddi4+0xc2>
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	f000 80ef 	beq.w	80010aa <__udivmoddi4+0x292>
 8000ecc:	2600      	movs	r6, #0
 8000ece:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	fab3 f683 	clz	r6, r3
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d14a      	bne.n	8000f78 <__udivmoddi4+0x160>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d302      	bcc.n	8000eec <__udivmoddi4+0xd4>
 8000ee6:	4282      	cmp	r2, r0
 8000ee8:	f200 80f9 	bhi.w	80010de <__udivmoddi4+0x2c6>
 8000eec:	1a84      	subs	r4, r0, r2
 8000eee:	eb61 0303 	sbc.w	r3, r1, r3
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	469e      	mov	lr, r3
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d0e0      	beq.n	8000ebc <__udivmoddi4+0xa4>
 8000efa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000efe:	e7dd      	b.n	8000ebc <__udivmoddi4+0xa4>
 8000f00:	b902      	cbnz	r2, 8000f04 <__udivmoddi4+0xec>
 8000f02:	deff      	udf	#255	; 0xff
 8000f04:	fab2 f282 	clz	r2, r2
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	f040 8092 	bne.w	8001032 <__udivmoddi4+0x21a>
 8000f0e:	eba1 010c 	sub.w	r1, r1, ip
 8000f12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f16:	fa1f fe8c 	uxth.w	lr, ip
 8000f1a:	2601      	movs	r6, #1
 8000f1c:	0c20      	lsrs	r0, r4, #16
 8000f1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f22:	fb07 1113 	mls	r1, r7, r3, r1
 8000f26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f2a:	fb0e f003 	mul.w	r0, lr, r3
 8000f2e:	4288      	cmp	r0, r1
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x12c>
 8000f32:	eb1c 0101 	adds.w	r1, ip, r1
 8000f36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f3a:	d202      	bcs.n	8000f42 <__udivmoddi4+0x12a>
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	f200 80cb 	bhi.w	80010d8 <__udivmoddi4+0x2c0>
 8000f42:	4643      	mov	r3, r8
 8000f44:	1a09      	subs	r1, r1, r0
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f54:	fb0e fe00 	mul.w	lr, lr, r0
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x156>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d202      	bcs.n	8000f6c <__udivmoddi4+0x154>
 8000f66:	45a6      	cmp	lr, r4
 8000f68:	f200 80bb 	bhi.w	80010e2 <__udivmoddi4+0x2ca>
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	eba4 040e 	sub.w	r4, r4, lr
 8000f72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f76:	e79c      	b.n	8000eb2 <__udivmoddi4+0x9a>
 8000f78:	f1c6 0720 	rsb	r7, r6, #32
 8000f7c:	40b3      	lsls	r3, r6
 8000f7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f86:	fa20 f407 	lsr.w	r4, r0, r7
 8000f8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	40f9      	lsrs	r1, r7
 8000f92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f96:	fa00 f306 	lsl.w	r3, r0, r6
 8000f9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f9e:	0c20      	lsrs	r0, r4, #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fb09 1118 	mls	r1, r9, r8, r1
 8000fa8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fac:	fb08 f00e 	mul.w	r0, r8, lr
 8000fb0:	4288      	cmp	r0, r1
 8000fb2:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb6:	d90b      	bls.n	8000fd0 <__udivmoddi4+0x1b8>
 8000fb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fc0:	f080 8088 	bcs.w	80010d4 <__udivmoddi4+0x2bc>
 8000fc4:	4288      	cmp	r0, r1
 8000fc6:	f240 8085 	bls.w	80010d4 <__udivmoddi4+0x2bc>
 8000fca:	f1a8 0802 	sub.w	r8, r8, #2
 8000fce:	4461      	add	r1, ip
 8000fd0:	1a09      	subs	r1, r1, r0
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000fdc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fe0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe4:	458e      	cmp	lr, r1
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x1e2>
 8000fe8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ff0:	d26c      	bcs.n	80010cc <__udivmoddi4+0x2b4>
 8000ff2:	458e      	cmp	lr, r1
 8000ff4:	d96a      	bls.n	80010cc <__udivmoddi4+0x2b4>
 8000ff6:	3802      	subs	r0, #2
 8000ff8:	4461      	add	r1, ip
 8000ffa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffe:	fba0 9402 	umull	r9, r4, r0, r2
 8001002:	eba1 010e 	sub.w	r1, r1, lr
 8001006:	42a1      	cmp	r1, r4
 8001008:	46c8      	mov	r8, r9
 800100a:	46a6      	mov	lr, r4
 800100c:	d356      	bcc.n	80010bc <__udivmoddi4+0x2a4>
 800100e:	d053      	beq.n	80010b8 <__udivmoddi4+0x2a0>
 8001010:	b15d      	cbz	r5, 800102a <__udivmoddi4+0x212>
 8001012:	ebb3 0208 	subs.w	r2, r3, r8
 8001016:	eb61 010e 	sbc.w	r1, r1, lr
 800101a:	fa01 f707 	lsl.w	r7, r1, r7
 800101e:	fa22 f306 	lsr.w	r3, r2, r6
 8001022:	40f1      	lsrs	r1, r6
 8001024:	431f      	orrs	r7, r3
 8001026:	e9c5 7100 	strd	r7, r1, [r5]
 800102a:	2600      	movs	r6, #0
 800102c:	4631      	mov	r1, r6
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	f1c2 0320 	rsb	r3, r2, #32
 8001036:	40d8      	lsrs	r0, r3
 8001038:	fa0c fc02 	lsl.w	ip, ip, r2
 800103c:	fa21 f303 	lsr.w	r3, r1, r3
 8001040:	4091      	lsls	r1, r2
 8001042:	4301      	orrs	r1, r0
 8001044:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001048:	fa1f fe8c 	uxth.w	lr, ip
 800104c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001050:	fb07 3610 	mls	r6, r7, r0, r3
 8001054:	0c0b      	lsrs	r3, r1, #16
 8001056:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800105a:	fb00 f60e 	mul.w	r6, r0, lr
 800105e:	429e      	cmp	r6, r3
 8001060:	fa04 f402 	lsl.w	r4, r4, r2
 8001064:	d908      	bls.n	8001078 <__udivmoddi4+0x260>
 8001066:	eb1c 0303 	adds.w	r3, ip, r3
 800106a:	f100 38ff 	add.w	r8, r0, #4294967295
 800106e:	d22f      	bcs.n	80010d0 <__udivmoddi4+0x2b8>
 8001070:	429e      	cmp	r6, r3
 8001072:	d92d      	bls.n	80010d0 <__udivmoddi4+0x2b8>
 8001074:	3802      	subs	r0, #2
 8001076:	4463      	add	r3, ip
 8001078:	1b9b      	subs	r3, r3, r6
 800107a:	b289      	uxth	r1, r1
 800107c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001080:	fb07 3316 	mls	r3, r7, r6, r3
 8001084:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001088:	fb06 f30e 	mul.w	r3, r6, lr
 800108c:	428b      	cmp	r3, r1
 800108e:	d908      	bls.n	80010a2 <__udivmoddi4+0x28a>
 8001090:	eb1c 0101 	adds.w	r1, ip, r1
 8001094:	f106 38ff 	add.w	r8, r6, #4294967295
 8001098:	d216      	bcs.n	80010c8 <__udivmoddi4+0x2b0>
 800109a:	428b      	cmp	r3, r1
 800109c:	d914      	bls.n	80010c8 <__udivmoddi4+0x2b0>
 800109e:	3e02      	subs	r6, #2
 80010a0:	4461      	add	r1, ip
 80010a2:	1ac9      	subs	r1, r1, r3
 80010a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010a8:	e738      	b.n	8000f1c <__udivmoddi4+0x104>
 80010aa:	462e      	mov	r6, r5
 80010ac:	4628      	mov	r0, r5
 80010ae:	e705      	b.n	8000ebc <__udivmoddi4+0xa4>
 80010b0:	4606      	mov	r6, r0
 80010b2:	e6e3      	b.n	8000e7c <__udivmoddi4+0x64>
 80010b4:	4618      	mov	r0, r3
 80010b6:	e6f8      	b.n	8000eaa <__udivmoddi4+0x92>
 80010b8:	454b      	cmp	r3, r9
 80010ba:	d2a9      	bcs.n	8001010 <__udivmoddi4+0x1f8>
 80010bc:	ebb9 0802 	subs.w	r8, r9, r2
 80010c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c4:	3801      	subs	r0, #1
 80010c6:	e7a3      	b.n	8001010 <__udivmoddi4+0x1f8>
 80010c8:	4646      	mov	r6, r8
 80010ca:	e7ea      	b.n	80010a2 <__udivmoddi4+0x28a>
 80010cc:	4620      	mov	r0, r4
 80010ce:	e794      	b.n	8000ffa <__udivmoddi4+0x1e2>
 80010d0:	4640      	mov	r0, r8
 80010d2:	e7d1      	b.n	8001078 <__udivmoddi4+0x260>
 80010d4:	46d0      	mov	r8, sl
 80010d6:	e77b      	b.n	8000fd0 <__udivmoddi4+0x1b8>
 80010d8:	3b02      	subs	r3, #2
 80010da:	4461      	add	r1, ip
 80010dc:	e732      	b.n	8000f44 <__udivmoddi4+0x12c>
 80010de:	4630      	mov	r0, r6
 80010e0:	e709      	b.n	8000ef6 <__udivmoddi4+0xde>
 80010e2:	4464      	add	r4, ip
 80010e4:	3802      	subs	r0, #2
 80010e6:	e742      	b.n	8000f6e <__udivmoddi4+0x156>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <PositionControlVelocityForm>:
float first_error = 0;
float second_error = 0;
float third_error = 0;

void PositionControlVelocityForm(PID* controller)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	first_error = q_des - QEIData.position;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <PositionControlVelocityForm+0xac>)
 80010f6:	ed93 7a00 	vldr	s14, [r3]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <PositionControlVelocityForm+0xb0>)
 80010fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <PositionControlVelocityForm+0xb4>)
 8001106:	edc3 7a00 	vstr	s15, [r3]

	float kp_position = controller->Kp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	617b      	str	r3, [r7, #20]
	float ki_position = controller->Ki;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
	float kd_position = controller->Kd;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	60fb      	str	r3, [r7, #12]

	PulseWidthModulation += ((kp_position + ki_position + kd_position) * first_error) - ((kp_position + (2 * kd_position)) * second_error) + (kd_position * third_error);
 800111c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001120:	edd7 7a04 	vldr	s15, [r7, #16]
 8001124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001128:	edd7 7a03 	vldr	s15, [r7, #12]
 800112c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <PositionControlVelocityForm+0xb4>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113a:	edd7 7a03 	vldr	s15, [r7, #12]
 800113e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001142:	edd7 7a05 	vldr	s15, [r7, #20]
 8001146:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <PositionControlVelocityForm+0xb8>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <PositionControlVelocityForm+0xbc>)
 800115a:	edd3 6a00 	vldr	s13, [r3]
 800115e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <PositionControlVelocityForm+0xc0>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <PositionControlVelocityForm+0xc0>)
 8001176:	edc3 7a00 	vstr	s15, [r3]

	third_error = second_error;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <PositionControlVelocityForm+0xb8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <PositionControlVelocityForm+0xbc>)
 8001180:	6013      	str	r3, [r2, #0]
	second_error = first_error;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <PositionControlVelocityForm+0xb4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <PositionControlVelocityForm+0xb8>)
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200007b8 	.word	0x200007b8
 800119c:	200007e0 	.word	0x200007e0
 80011a0:	200002f4 	.word	0x200002f4
 80011a4:	200002f8 	.word	0x200002f8
 80011a8:	200002fc 	.word	0x200002fc
 80011ac:	200007f4 	.word	0x200007f4

080011b0 <micros>:

uint16_t res = 8192;      	  // Resolution [pulse/revolution]
float pulley_dia = 30.558;	  // mm

uint64_t micros(TIM_HandleTypeDef* Timer_tim)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	return __HAL_TIM_GET_COUNTER(Timer_tim)*0.01 + _micros;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f94c 	bl	800045c <__aeabi_ui2d>
 80011c4:	a313      	add	r3, pc, #76	; (adr r3, 8001214 <micros+0x64>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff f9c1 	bl	8000550 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	461d      	mov	r5, r3
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <micros+0x60>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff f980 	bl	80004e4 <__aeabi_ul2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7fe fffa 	bl	80001e4 <__adddf3>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fdf0 	bl	8000ddc <__aeabi_d2ulz>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
}
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bdb0      	pop	{r4, r5, r7, pc}
 800120a:	bf00      	nop
 800120c:	f3af 8000 	nop.w
 8001210:	200007d8 	.word	0x200007d8
 8001214:	47ae147b 	.word	0x47ae147b
 8001218:	3f847ae1 	.word	0x3f847ae1
 800121c:	00000000 	.word	0x00000000

08001220 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* Timer_tim)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	QEIData.timestamp[0] = micros(Timer_tim);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff ffc0 	bl	80011b0 <micros>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4b50      	ldr	r3, [pc, #320]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001236:	605a      	str	r2, [r3, #4]
	uint32_t lastposition = __HAL_TIM_GET_COUNTER(Encoder_tim);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	613b      	str	r3, [r7, #16]
	QEIData.data[0] = lastposition;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001246:	801a      	strh	r2, [r3, #0]
//	{
//		QEIData.data[0] = lastposition - QEI_PERIOD;
//	}

	// position calculation
	QEIData.position = QEIData.data[0] * PI *  pulley_dia/res;
 8001248:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001256:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800137c <QEIEncoderPositionVelocity_Update+0x15c>
 800125a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001268:	4b46      	ldr	r3, [pc, #280]	; (8001384 <QEIEncoderPositionVelocity_Update+0x164>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001278:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 800127a:	edc3 7a03 	vstr	s15, [r3, #12]

	int32_t diffPosition = QEIData.data[0] - QEIData.data[1];
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001284:	461a      	mov	r2, r3
 8001286:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001288:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	617b      	str	r3, [r7, #20]
	float diffTime = QEIData.timestamp[0] - QEIData.timestamp[1];
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a2:	edc7 7a03 	vstr	s15, [r7, #12]

	// unwrap
	if (diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012ac:	dd03      	ble.n	80012b6 <QEIEncoderPositionVelocity_Update+0x96>
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80012b4:	617b      	str	r3, [r7, #20]
	if (diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80012bc:	da03      	bge.n	80012c6 <QEIEncoderPositionVelocity_Update+0xa6>
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012c4:	617b      	str	r3, [r7, #20]

	// velocity calculation
	QEIData.velocity = (diffPosition * 1000000.0 * PI * pulley_dia)/(res * diffTime);
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff f8d8 	bl	800047c <__aeabi_i2d>
 80012cc:	a326      	add	r3, pc, #152	; (adr r3, 8001368 <QEIEncoderPositionVelocity_Update+0x148>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff f93d 	bl	8000550 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	a324      	add	r3, pc, #144	; (adr r3, 8001370 <QEIEncoderPositionVelocity_Update+0x150>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f934 	bl	8000550 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4614      	mov	r4, r2
 80012ee:	461d      	mov	r5, r3
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <QEIEncoderPositionVelocity_Update+0x160>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f8d3 	bl	80004a0 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7ff f925 	bl	8000550 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4614      	mov	r4, r2
 800130c:	461d      	mov	r5, r3
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <QEIEncoderPositionVelocity_Update+0x164>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	edd7 7a03 	vldr	s15, [r7, #12]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff f8bb 	bl	80004a0 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7ff fa37 	bl	80007a4 <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbd7 	bl	8000af0 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001346:	6113      	str	r3, [r2, #16]

	QEIData.data[1] = QEIData.data[0];
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 800134a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001350:	805a      	strh	r2, [r3, #2]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <QEIEncoderPositionVelocity_Update+0x158>)
 8001358:	6093      	str	r3, [r2, #8]
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	412e8480 	.word	0x412e8480
 8001370:	60000000 	.word	0x60000000
 8001374:	400921fb 	.word	0x400921fb
 8001378:	200007e0 	.word	0x200007e0
 800137c:	40490fdb 	.word	0x40490fdb
 8001380:	20000004 	.word	0x20000004
 8001384:	20000000 	.word	0x20000000

08001388 <MotorDrive>:
float Pcenter = 0;
float Ncenter = 0;
float Temp_pos = 0;

void MotorDrive(TIM_HandleTypeDef* PWM_tim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	if(emer_pushed == 1){
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <MotorDrive+0xf0>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d16a      	bne.n	800146e <MotorDrive+0xe6>
		if (PulseWidthModulation >= 0)
 8001398:	4b38      	ldr	r3, [pc, #224]	; (800147c <MotorDrive+0xf4>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	db29      	blt.n	80013fc <MotorDrive+0x74>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ae:	4834      	ldr	r0, [pc, #208]	; (8001480 <MotorDrive+0xf8>)
 80013b0:	f003 feac 	bl	800510c <HAL_GPIO_WritePin>
			N_disallow = 0;
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <MotorDrive+0xfc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation > 8000)
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <MotorDrive+0xf4>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001488 <MotorDrive+0x100>
 80013c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	dd02      	ble.n	80013d4 <MotorDrive+0x4c>
			{
				PulseWidthModulation = 8000;
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <MotorDrive+0xf4>)
 80013d0:	4a2e      	ldr	r2, [pc, #184]	; (800148c <MotorDrive+0x104>)
 80013d2:	601a      	str	r2, [r3, #0]
			}

			if ((pe2_st && (SetHomeFlag == 0)) || P_disallow)
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <MotorDrive+0x108>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <MotorDrive+0x5c>
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <MotorDrive+0x10c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <MotorDrive+0x64>
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <MotorDrive+0x110>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d030      	beq.n	800144e <MotorDrive+0xc6>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2200      	movs	r2, #0
 80013f2:	635a      	str	r2, [r3, #52]	; 0x34
				P_disallow = 1;
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <MotorDrive+0x110>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e028      	b.n	800144e <MotorDrive+0xc6>
			}
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001402:	481f      	ldr	r0, [pc, #124]	; (8001480 <MotorDrive+0xf8>)
 8001404:	f003 fe82 	bl	800510c <HAL_GPIO_WritePin>
			P_disallow = 0;
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <MotorDrive+0x110>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
			if (PulseWidthModulation < -8000)
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MotorDrive+0xf4>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800149c <MotorDrive+0x114>
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	d502      	bpl.n	8001428 <MotorDrive+0xa0>
			{
				PulseWidthModulation = -8000;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <MotorDrive+0xf4>)
 8001424:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <MotorDrive+0x118>)
 8001426:	601a      	str	r2, [r3, #0]
			}

			if ((pe3_st && (SetHomeFlag == 0)) || N_disallow)
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MotorDrive+0x11c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <MotorDrive+0xb0>
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MotorDrive+0x10c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <MotorDrive+0xb8>
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MotorDrive+0xfc>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <MotorDrive+0xc6>
			{
				__HAL_TIM_SET_COMPARE(PWM_tim,TIM_CHANNEL_1,0);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	635a      	str	r2, [r3, #52]	; 0x34
				N_disallow = 1;
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MotorDrive+0xfc>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
			}
		}

		__HAL_TIM_SET_COMPARE(PWM_tim, TIM_CHANNEL_1, fabs(PulseWidthModulation*5));
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MotorDrive+0xf4>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145c:	eef0 7ae7 	vabs.f32	s15, s15
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001468:	ee17 2a90 	vmov	r2, s15
 800146c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000259 	.word	0x20000259
 800147c:	200007f4 	.word	0x200007f4
 8001480:	40020000 	.word	0x40020000
 8001484:	20000809 	.word	0x20000809
 8001488:	45fa0000 	.word	0x45fa0000
 800148c:	45fa0000 	.word	0x45fa0000
 8001490:	2000080b 	.word	0x2000080b
 8001494:	20000258 	.word	0x20000258
 8001498:	20000808 	.word	0x20000808
 800149c:	c5fa0000 	.word	0xc5fa0000
 80014a0:	c5fa0000 	.word	0xc5fa0000
 80014a4:	2000080c 	.word	0x2000080c

080014a8 <SetHome>:

void SetHome(TIM_HandleTypeDef* Encoder_tim, TIM_HandleTypeDef* PWM_tim)
{
 80014a8:	b5b0      	push	{r4, r5, r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	static enum {Jog, Overcenter, PCenter, UnderCenter, NCenter, Center,  Recenter, Setcenter} SetHomeState = Jog;

	if (SetHomeFlag)
 80014b2:	4b87      	ldr	r3, [pc, #540]	; (80016d0 <SetHome+0x228>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8102 	beq.w	80016c0 <SetHome+0x218>
	{
		switch (SetHomeState)
 80014bc:	4b85      	ldr	r3, [pc, #532]	; (80016d4 <SetHome+0x22c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	f200 80fa 	bhi.w	80016ba <SetHome+0x212>
 80014c6:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <SetHome+0x24>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	080014ed 	.word	0x080014ed
 80014d0:	0800153d 	.word	0x0800153d
 80014d4:	08001561 	.word	0x08001561
 80014d8:	08001595 	.word	0x08001595
 80014dc:	080015bb 	.word	0x080015bb
 80014e0:	080015d9 	.word	0x080015d9
 80014e4:	0800168d 	.word	0x0800168d
 80014e8:	08001677 	.word	0x08001677
		{
		case Jog:
			Pcenter = 0;
 80014ec:	4b7a      	ldr	r3, [pc, #488]	; (80016d8 <SetHome+0x230>)
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
			Ncenter = 0;
 80014f4:	4b79      	ldr	r3, [pc, #484]	; (80016dc <SetHome+0x234>)
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
			Temp_pos = 0;
 80014fc:	4b78      	ldr	r3, [pc, #480]	; (80016e0 <SetHome+0x238>)
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
			PulseWidthModulation = 3000;
 8001504:	4b77      	ldr	r3, [pc, #476]	; (80016e4 <SetHome+0x23c>)
 8001506:	4a78      	ldr	r2, [pc, #480]	; (80016e8 <SetHome+0x240>)
 8001508:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 800150a:	4b78      	ldr	r3, [pc, #480]	; (80016ec <SetHome+0x244>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <SetHome+0x7a>
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Overcenter;
 800151a:	4b6e      	ldr	r3, [pc, #440]	; (80016d4 <SetHome+0x22c>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
			else if (pe2_st)
			{
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
				SetHomeState = Recenter;
			}
			break;
 8001520:	e0c6      	b.n	80016b0 <SetHome+0x208>
			else if (pe2_st)
 8001522:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <SetHome+0x248>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80c2 	beq.w	80016b0 <SetHome+0x208>
				__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
				SetHomeState = Recenter;
 8001534:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <SetHome+0x22c>)
 8001536:	2206      	movs	r2, #6
 8001538:	701a      	strb	r2, [r3, #0]
			break;
 800153a:	e0b9      	b.n	80016b0 <SetHome+0x208>
		case Overcenter:
			PulseWidthModulation = 3000;
 800153c:	4b69      	ldr	r3, [pc, #420]	; (80016e4 <SetHome+0x23c>)
 800153e:	4a6a      	ldr	r2, [pc, #424]	; (80016e8 <SetHome+0x240>)
 8001540:	601a      	str	r2, [r3, #0]

			if (QEIData.position >= 30)
 8001542:	4b6c      	ldr	r3, [pc, #432]	; (80016f4 <SetHome+0x24c>)
 8001544:	edd3 7a03 	vldr	s15, [r3, #12]
 8001548:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	da00      	bge.n	8001558 <SetHome+0xb0>
			{
				SetHomeState = PCenter;
			}
			break;
 8001556:	e0b0      	b.n	80016ba <SetHome+0x212>
				SetHomeState = PCenter;
 8001558:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <SetHome+0x22c>)
 800155a:	2202      	movs	r2, #2
 800155c:	701a      	strb	r2, [r3, #0]
			break;
 800155e:	e0ac      	b.n	80016ba <SetHome+0x212>
		case PCenter:
			PulseWidthModulation = -2500;
 8001560:	4b60      	ldr	r3, [pc, #384]	; (80016e4 <SetHome+0x23c>)
 8001562:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <SetHome+0x250>)
 8001564:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 8001566:	4b61      	ldr	r3, [pc, #388]	; (80016ec <SetHome+0x244>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 80a2 	beq.w	80016b4 <SetHome+0x20c>
			{
				Pcenter = QEIData.position;
 8001570:	4b60      	ldr	r3, [pc, #384]	; (80016f4 <SetHome+0x24c>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <SetHome+0x230>)
 8001576:	6013      	str	r3, [r2, #0]
				Temp_pos = Pcenter - 30;
 8001578:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <SetHome+0x230>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001586:	4b56      	ldr	r3, [pc, #344]	; (80016e0 <SetHome+0x238>)
 8001588:	edc3 7a00 	vstr	s15, [r3]
				SetHomeState = UnderCenter;
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <SetHome+0x22c>)
 800158e:	2203      	movs	r2, #3
 8001590:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001592:	e08f      	b.n	80016b4 <SetHome+0x20c>
		case UnderCenter:
			PulseWidthModulation = -3000;
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <SetHome+0x23c>)
 8001596:	4a59      	ldr	r2, [pc, #356]	; (80016fc <SetHome+0x254>)
 8001598:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= Temp_pos)
 800159a:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <SetHome+0x24c>)
 800159c:	ed93 7a03 	vldr	s14, [r3, #12]
 80015a0:	4b4f      	ldr	r3, [pc, #316]	; (80016e0 <SetHome+0x238>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ae:	d900      	bls.n	80015b2 <SetHome+0x10a>
			{
				SetHomeState = NCenter;
			}
			break;
 80015b0:	e083      	b.n	80016ba <SetHome+0x212>
				SetHomeState = NCenter;
 80015b2:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <SetHome+0x22c>)
 80015b4:	2204      	movs	r2, #4
 80015b6:	701a      	strb	r2, [r3, #0]
			break;
 80015b8:	e07f      	b.n	80016ba <SetHome+0x212>
		case NCenter:
			PulseWidthModulation = 2500;
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <SetHome+0x23c>)
 80015bc:	4a50      	ldr	r2, [pc, #320]	; (8001700 <SetHome+0x258>)
 80015be:	601a      	str	r2, [r3, #0]

			if (pe1_st)
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <SetHome+0x244>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d077      	beq.n	80016b8 <SetHome+0x210>
			{
				Ncenter = QEIData.position;
 80015c8:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <SetHome+0x24c>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a43      	ldr	r2, [pc, #268]	; (80016dc <SetHome+0x234>)
 80015ce:	6013      	str	r3, [r2, #0]
				SetHomeState = Center;
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <SetHome+0x22c>)
 80015d2:	2205      	movs	r2, #5
 80015d4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80015d6:	e06f      	b.n	80016b8 <SetHome+0x210>
		case Center:
			q_des = ((Pcenter - Ncenter)/2.0) + Ncenter;
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <SetHome+0x230>)
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <SetHome+0x234>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e8:	ee17 0a90 	vmov	r0, s15
 80015ec:	f7fe ff58 	bl	80004a0 <__aeabi_f2d>
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f8:	f7ff f8d4 	bl	80007a4 <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4614      	mov	r4, r2
 8001602:	461d      	mov	r5, r3
 8001604:	4b35      	ldr	r3, [pc, #212]	; (80016dc <SetHome+0x234>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff49 	bl	80004a0 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4620      	mov	r0, r4
 8001614:	4629      	mov	r1, r5
 8001616:	f7fe fde5 	bl	80001e4 <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fa65 	bl	8000af0 <__aeabi_d2f>
 8001626:	4603      	mov	r3, r0
 8001628:	4a36      	ldr	r2, [pc, #216]	; (8001704 <SetHome+0x25c>)
 800162a:	6013      	str	r3, [r2, #0]
			PositionControlVelocityForm(&Controller);
 800162c:	4836      	ldr	r0, [pc, #216]	; (8001708 <SetHome+0x260>)
 800162e:	f7ff fd5d 	bl	80010ec <PositionControlVelocityForm>

			if (0.03 > fabs(q_des - QEIData.position))
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <SetHome+0x25c>)
 8001634:	ed93 7a00 	vldr	s14, [r3]
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <SetHome+0x24c>)
 800163a:	edd3 7a03 	vldr	s15, [r3, #12]
 800163e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001642:	eef0 7ae7 	vabs.f32	s15, s15
 8001646:	ee17 0a90 	vmov	r0, s15
 800164a:	f7fe ff29 	bl	80004a0 <__aeabi_f2d>
 800164e:	a31e      	add	r3, pc, #120	; (adr r3, 80016c8 <SetHome+0x220>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7ff f9ee 	bl	8000a34 <__aeabi_dcmplt>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d100      	bne.n	8001660 <SetHome+0x1b8>
			{
				PulseWidthModulation = 0;
				MotorDrive(PWM_tim);
				SetHomeState = Setcenter;
			}
			break;
 800165e:	e02c      	b.n	80016ba <SetHome+0x212>
				PulseWidthModulation = 0;
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <SetHome+0x23c>)
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
				MotorDrive(PWM_tim);
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f7ff fe8d 	bl	8001388 <MotorDrive>
				SetHomeState = Setcenter;
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <SetHome+0x22c>)
 8001670:	2207      	movs	r2, #7
 8001672:	701a      	strb	r2, [r3, #0]
			break;
 8001674:	e021      	b.n	80016ba <SetHome+0x212>
		case Setcenter:
			__HAL_TIM_SET_COUNTER(Encoder_tim, 0);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
			SetHomeFlag = 0;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <SetHome+0x228>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
			SetHomeState = Jog;
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <SetHome+0x22c>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]

			break;
 800168a:	e016      	b.n	80016ba <SetHome+0x212>
		case Recenter:
			PulseWidthModulation = -3000;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <SetHome+0x23c>)
 800168e:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <SetHome+0x254>)
 8001690:	601a      	str	r2, [r3, #0]

			if (QEIData.position <= -320)
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <SetHome+0x24c>)
 8001694:	edd3 7a03 	vldr	s15, [r3, #12]
 8001698:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800170c <SetHome+0x264>
 800169c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	d900      	bls.n	80016a8 <SetHome+0x200>
			{
				SetHomeState = PCenter;
			}
			break;
 80016a6:	e008      	b.n	80016ba <SetHome+0x212>
				SetHomeState = PCenter;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <SetHome+0x22c>)
 80016aa:	2202      	movs	r2, #2
 80016ac:	701a      	strb	r2, [r3, #0]
			break;
 80016ae:	e004      	b.n	80016ba <SetHome+0x212>
			break;
 80016b0:	bf00      	nop
 80016b2:	e002      	b.n	80016ba <SetHome+0x212>
			break;
 80016b4:	bf00      	nop
 80016b6:	e000      	b.n	80016ba <SetHome+0x212>
			break;
 80016b8:	bf00      	nop
		}
		MotorDrive(PWM_tim);
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f7ff fe64 	bl	8001388 <MotorDrive>
	}


}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bdb0      	pop	{r4, r5, r7, pc}
 80016c8:	eb851eb8 	.word	0xeb851eb8
 80016cc:	3f9eb851 	.word	0x3f9eb851
 80016d0:	20000258 	.word	0x20000258
 80016d4:	2000030c 	.word	0x2000030c
 80016d8:	20000300 	.word	0x20000300
 80016dc:	20000304 	.word	0x20000304
 80016e0:	20000308 	.word	0x20000308
 80016e4:	200007f4 	.word	0x200007f4
 80016e8:	453b8000 	.word	0x453b8000
 80016ec:	2000080a 	.word	0x2000080a
 80016f0:	2000080b 	.word	0x2000080b
 80016f4:	200007e0 	.word	0x200007e0
 80016f8:	c51c4000 	.word	0xc51c4000
 80016fc:	c53b8000 	.word	0xc53b8000
 8001700:	451c4000 	.word	0x451c4000
 8001704:	200007b8 	.word	0x200007b8
 8001708:	200007fc 	.word	0x200007fc
 800170c:	c3a00000 	.word	0xc3a00000

08001710 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <modbus_1t5_Timeout+0x1c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	751a      	strb	r2, [r3, #20]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	20000310 	.word	0x20000310

08001730 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <modbus_3t5_Timeout+0x1c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	755a      	strb	r2, [r3, #21]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	20000310 	.word	0x20000310

08001750 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <modbus_UART_Recived+0x60>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <modbus_UART_Recived+0x60>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 800176a:	1c59      	adds	r1, r3, #1
 800176c:	b289      	uxth	r1, r1
 800176e:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8001772:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001776:	d210      	bcs.n	800179a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <modbus_UART_Recived+0x60>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68d8      	ldr	r0, [r3, #12]
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <modbus_UART_Recived+0x60>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <modbus_UART_Recived+0x60>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800178a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800178e:	4413      	add	r3, r2
 8001790:	3302      	adds	r3, #2
 8001792:	2201      	movs	r2, #1
 8001794:	4619      	mov	r1, r3
 8001796:	f005 ff75 	bl	8007684 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <modbus_UART_Recived+0x60>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000310 	.word	0x20000310

080017b4 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <Modbus_init+0x9c>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <Modbus_init+0x9c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <Modbus_init+0x9c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	4a20      	ldr	r2, [pc, #128]	; (8001854 <Modbus_init+0xa0>)
 80017d4:	2114      	movs	r1, #20
 80017d6:	4618      	mov	r0, r3
 80017d8:	f005 f906 	bl	80069e8 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <Modbus_init+0x9c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <Modbus_init+0xa4>)
 80017e4:	210e      	movs	r1, #14
 80017e6:	4618      	mov	r0, r3
 80017e8:	f005 f8fe 	bl	80069e8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <Modbus_init+0x9c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4a1a      	ldr	r2, [pc, #104]	; (800185c <Modbus_init+0xa8>)
 80017f4:	2103      	movs	r1, #3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 fe9c 	bl	8007534 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <Modbus_init+0x9c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68d8      	ldr	r0, [r3, #12]
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <Modbus_init+0x9c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <Modbus_init+0x9c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800180e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001812:	4413      	add	r3, r2
 8001814:	3302      	adds	r3, #2
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	f005 ff33 	bl	8007684 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <Modbus_init+0x9c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d10c      	bne.n	8001848 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <Modbus_init+0x9c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	4618      	mov	r0, r3
 8001836:	f004 f9e9 	bl	8005c0c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <Modbus_init+0x9c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f004 fbc0 	bl	8005fc8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000310 	.word	0x20000310
 8001854:	08001711 	.word	0x08001711
 8001858:	08001731 	.word	0x08001731
 800185c:	08001751 	.word	0x08001751

08001860 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800186c:	23ff      	movs	r3, #255	; 0xff
 800186e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001870:	23ff      	movs	r3, #255	; 0xff
 8001872:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001874:	e013      	b.n	800189e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	4053      	eors	r3, r2
 8001882:	b2db      	uxtb	r3, r3
 8001884:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <CRC16+0x64>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4413      	add	r3, r2
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	4053      	eors	r3, r2
 8001892:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001894:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <CRC16+0x68>)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4413      	add	r3, r2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800189e:	883b      	ldrh	r3, [r7, #0]
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	803a      	strh	r2, [r7, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1e6      	bne.n	8001876 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	7bbb      	ldrb	r3, [r7, #14]
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	b29b      	uxth	r3, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	20000108 	.word	0x20000108
 80018c8:	20000008 	.word	0x20000008

080018cc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80018d2:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	7e1b      	ldrb	r3, [r3, #24]
 80018d8:	3b01      	subs	r3, #1
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d80a      	bhi.n	80018f4 <Modbus_Protocal_Worker+0x28>
 80018de:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <Modbus_Protocal_Worker+0x18>)
 80018e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e4:	080018ff 	.word	0x080018ff
 80018e8:	08001a9f 	.word	0x08001a9f
 80018ec:	0800198b 	.word	0x0800198b
 80018f0:	080019b1 	.word	0x080019b1
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80018f4:	4b78      	ldr	r3, [pc, #480]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	761a      	strb	r2, [r3, #24]
		break;
 80018fc:	e0e8      	b.n	8001ad0 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80018fe:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800190a:	f000 f9d7 	bl	8001cbc <Modbus_Emission>
 800190e:	e01c      	b.n	800194a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001910:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	7d9b      	ldrb	r3, [r3, #22]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d017      	beq.n	800194a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800191a:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2200      	movs	r2, #0
 8001920:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001922:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2200      	movs	r2, #0
 8001928:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800192a:	4b6b      	ldr	r3, [pc, #428]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001942:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2203      	movs	r2, #3
 8001948:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b20      	cmp	r3, #32
 8001958:	f040 80b3 	bne.w	8001ac2 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800195c:	4b5e      	ldr	r3, [pc, #376]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001966:	4b5c      	ldr	r3, [pc, #368]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68d8      	ldr	r0, [r3, #12]
 800196c:	4b5a      	ldr	r3, [pc, #360]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001978:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800197c:	4413      	add	r3, r2
 800197e:	3302      	adds	r3, #2
 8001980:	2201      	movs	r2, #1
 8001982:	4619      	mov	r1, r3
 8001984:	f005 fe7e 	bl	8007684 <HAL_UART_Receive_IT>
		}
		break;
 8001988:	e09b      	b.n	8001ac2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800198a:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	7d1b      	ldrb	r3, [r3, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8098 	beq.w	8001ac6 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001996:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800199e:	4b4e      	ldr	r3, [pc, #312]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	22fe      	movs	r2, #254	; 0xfe
 80019a4:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80019a6:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2204      	movs	r2, #4
 80019ac:	761a      	strb	r2, [r3, #24]
		}
		break;
 80019ae:	e08a      	b.n	8001ac6 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80019b0:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	7d9b      	ldrb	r3, [r3, #22]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	22ff      	movs	r2, #255	; 0xff
 80019cc:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80019ce:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80019d6:	f113 0f02 	cmn.w	r3, #2
 80019da:	d150      	bne.n	8001a7e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80019dc:	4b3e      	ldr	r3, [pc, #248]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2200      	movs	r2, #0
 80019e2:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80019e4:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f203 2272 	addw	r2, r3, #626	; 0x272
 80019ec:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80019f4:	3b02      	subs	r3, #2
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f7ff ff31 	bl	8001860 <CRC16>
 80019fe:	4603      	mov	r3, r0
 8001a00:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001a02:	793a      	ldrb	r2, [r7, #4]
 8001a04:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a06:	6819      	ldr	r1, [r3, #0]
 8001a08:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001a10:	3b02      	subs	r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d10c      	bne.n	8001a36 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001a1c:	797a      	ldrb	r2, [r7, #5]
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a20:	6819      	ldr	r1, [r3, #0]
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	440b      	add	r3, r1
 8001a2e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d004      	beq.n	8001a40 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	22ff      	movs	r2, #255	; 0xff
 8001a3c:	75da      	strb	r2, [r3, #23]
				break;
 8001a3e:	e047      	b.n	8001ad0 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d113      	bne.n	8001a7a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001a62:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001a6c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f006 ffca 	bl	8008a08 <memcpy>

			//execute command
			Modbus_frame_response();
 8001a74:	f000 f90a 	bl	8001c8c <Modbus_frame_response>
 8001a78:	e001      	b.n	8001a7e <Modbus_Protocal_Worker+0x1b2>
				break;
 8001a7a:	bf00      	nop
					}
		break;


	}
}
 8001a7c:	e028      	b.n	8001ad0 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	7d5b      	ldrb	r3, [r3, #21]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f005 fea2 	bl	80077e0 <HAL_UART_AbortReceive>
		break;
 8001a9c:	e015      	b.n	8001aca <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d10f      	bne.n	8001ace <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <Modbus_Protocal_Worker+0x20c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	761a      	strb	r2, [r3, #24]
		break;
 8001ac0:	e005      	b.n	8001ace <Modbus_Protocal_Worker+0x202>
		break;
 8001ac2:	bf00      	nop
 8001ac4:	e004      	b.n	8001ad0 <Modbus_Protocal_Worker+0x204>
		break;
 8001ac6:	bf00      	nop
 8001ac8:	e002      	b.n	8001ad0 <Modbus_Protocal_Worker+0x204>
		break;
 8001aca:	bf00      	nop
 8001acc:	e000      	b.n	8001ad0 <Modbus_Protocal_Worker+0x204>
		break;
 8001ace:	bf00      	nop
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000310 	.word	0x20000310

08001adc <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <modbusWrite1Register+0x80>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	7e9b      	ldrb	r3, [r3, #26]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <modbusWrite1Register+0x80>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	7edb      	ldrb	r3, [r3, #27]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001afa:	88fa      	ldrh	r2, [r7, #6]
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <modbusWrite1Register+0x80>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d903      	bls.n	8001b0e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001b06:	2002      	movs	r0, #2
 8001b08:	f000 f8a4 	bl	8001c54 <ModbusErrorReply>
			 return;
 8001b0c:	e023      	b.n	8001b56 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <modbusWrite1Register+0x80>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <modbusWrite1Register+0x80>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	440b      	add	r3, r1
 8001b1e:	7f12      	ldrb	r2, [r2, #28]
 8001b20:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <modbusWrite1Register+0x80>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <modbusWrite1Register+0x80>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	440b      	add	r3, r1
 8001b32:	7f52      	ldrb	r2, [r2, #29]
 8001b34:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <modbusWrite1Register+0x80>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <modbusWrite1Register+0x80>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001b44:	2208      	movs	r2, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	f006 ff5e 	bl	8008a08 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <modbusWrite1Register+0x80>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2205      	movs	r2, #5
 8001b52:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000310 	.word	0x20000310

08001b60 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <modbusRead1Register+0xf0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	7f1b      	ldrb	r3, [r3, #28]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <modbusRead1Register+0xf0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	7f5b      	ldrb	r3, [r3, #29]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001b7e:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <modbusRead1Register+0xf0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	7e9b      	ldrb	r3, [r3, #26]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <modbusRead1Register+0xf0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	7edb      	ldrb	r3, [r3, #27]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <modbusRead1Register+0x42>
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	2b7d      	cmp	r3, #125	; 0x7d
 8001ba0:	d903      	bls.n	8001baa <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001ba2:	2003      	movs	r0, #3
 8001ba4:	f000 f856 	bl	8001c54 <ModbusErrorReply>
		 return;
 8001ba8:	e04e      	b.n	8001c48 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001baa:	88ba      	ldrh	r2, [r7, #4]
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <modbusRead1Register+0xf0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d808      	bhi.n	8001bc8 <modbusRead1Register+0x68>
 8001bb6:	88ba      	ldrh	r2, [r7, #4]
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	4413      	add	r3, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <modbusRead1Register+0xf0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d903      	bls.n	8001bd0 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f000 f843 	bl	8001c54 <ModbusErrorReply>
		 return;
 8001bce:	e03b      	b.n	8001c48 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <modbusRead1Register+0xf0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <modbusRead1Register+0xf0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0052      	lsls	r2, r2, #1
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001bea:	2400      	movs	r4, #0
 8001bec:	e020      	b.n	8001c30 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <modbusRead1Register+0xf0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	4423      	add	r3, r4
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	18d1      	adds	r1, r2, r3
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <modbusRead1Register+0xf0>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	1c63      	adds	r3, r4, #1
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	7849      	ldrb	r1, [r1, #1]
 8001c06:	4413      	add	r3, r2
 8001c08:	460a      	mov	r2, r1
 8001c0a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <modbusRead1Register+0xf0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	88bb      	ldrh	r3, [r7, #4]
 8001c16:	4423      	add	r3, r4
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	18d1      	adds	r1, r2, r3
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <modbusRead1Register+0xf0>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	0063      	lsls	r3, r4, #1
 8001c22:	3303      	adds	r3, #3
 8001c24:	7809      	ldrb	r1, [r1, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	460a      	mov	r2, r1
 8001c2a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001c2e:	3401      	adds	r4, #1
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	429c      	cmp	r4, r3
 8001c34:	dbdb      	blt.n	8001bee <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <modbusRead1Register+0xf0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0052      	lsls	r2, r2, #1
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd90      	pop	{r4, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000310 	.word	0x20000310

08001c54 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <ModbusErrorReply+0x34>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2283      	movs	r2, #131	; 0x83
 8001c64:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <ModbusErrorReply+0x34>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	79fa      	ldrb	r2, [r7, #7]
 8001c6e:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <ModbusErrorReply+0x34>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	20000310 	.word	0x20000310

08001c8c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <Modbus_frame_response+0x2c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	7e5b      	ldrb	r3, [r3, #25]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d004      	beq.n	8001ca4 <Modbus_frame_response+0x18>
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d105      	bne.n	8001caa <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001c9e:	f7ff ff1d 	bl	8001adc <modbusWrite1Register>
		break;
 8001ca2:	e006      	b.n	8001cb2 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001ca4:	f7ff ff5c 	bl	8001b60 <modbusRead1Register>
		break;
 8001ca8:	e003      	b.n	8001cb2 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff ffd2 	bl	8001c54 <ModbusErrorReply>
		break;
 8001cb0:	bf00      	nop

	}
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000310 	.word	0x20000310

08001cbc <Modbus_Emission>:

void Modbus_Emission()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <Modbus_Emission+0xfc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d15e      	bne.n	8001d90 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001cd2:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <Modbus_Emission+0xfc>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <Modbus_Emission+0xfc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	7812      	ldrb	r2, [r2, #0]
 8001cdc:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <Modbus_Emission+0xfc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001ce8:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001cea:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <Modbus_Emission+0xfc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <Modbus_Emission+0xfc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f006 fe84 	bl	8008a08 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3203      	adds	r2, #3
 8001d10:	b292      	uxth	r2, r2
 8001d12:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001d26:	3b02      	subs	r3, #2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f7ff fd98 	bl	8001860 <CRC16>
 8001d30:	4603      	mov	r3, r0
 8001d32:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001d40:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001d42:	7939      	ldrb	r1, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	460a      	mov	r2, r1
 8001d48:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001d58:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001d5a:	7979      	ldrb	r1, [r7, #5]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	460a      	mov	r2, r1
 8001d60:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d10d      	bne.n	8001d90 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001d86:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f005 fcaa 	bl	80076e4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2200      	movs	r2, #0
 8001d96:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <Modbus_Emission+0xfc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <Modbus_Emission+0xfc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <Modbus_Emission+0xfc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2202      	movs	r2, #2
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000310 	.word	0x20000310
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <TrapezoidalTraj_PreCal>:

float v_max = 1000.0;	  	  // mm/s
float a = 2000.0;		  	  // mm/s^

void TrapezoidalTraj_PreCal(int16_t start_pos, int16_t final_pos, Traj* trajectory)
{
 8001dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	603a      	str	r2, [r7, #0]
 8001dcc:	80fb      	strh	r3, [r7, #6]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	80bb      	strh	r3, [r7, #4]
	if (start_pos != final_pos)
 8001dd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d05e      	beq.n	8001e9c <TrapezoidalTraj_PreCal+0xdc>
	{
		float s = final_pos - start_pos;
 8001dde:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df0:	edc7 7a03 	vstr	s15, [r7, #12]

		trajectory->t_acc = v_max/a;
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <TrapezoidalTraj_PreCal+0xf0>)
 8001df6:	edd3 6a00 	vldr	s13, [r3]
 8001dfa:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <TrapezoidalTraj_PreCal+0xf4>)
 8001dfc:	ed93 7a00 	vldr	s14, [r3]
 8001e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	edc3 7a01 	vstr	s15, [r3, #4]
		trajectory->t_total = (pow(v_max,2)+a*fabs(s))/(a*v_max);
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <TrapezoidalTraj_PreCal+0xf0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb46 	bl	80004a0 <__aeabi_f2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001ea8 <TrapezoidalTraj_PreCal+0xe8>
 8001e1c:	ec43 2b10 	vmov	d0, r2, r3
 8001e20:	f006 fe08 	bl	8008a34 <pow>
 8001e24:	ec59 8b10 	vmov	r8, r9, d0
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <TrapezoidalTraj_PreCal+0xf4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb37 	bl	80004a0 <__aeabi_f2d>
 8001e32:	4604      	mov	r4, r0
 8001e34:	460d      	mov	r5, r1
 8001e36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3a:	eef0 7ae7 	vabs.f32	s15, s15
 8001e3e:	ee17 0a90 	vmov	r0, s15
 8001e42:	f7fe fb2d 	bl	80004a0 <__aeabi_f2d>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f7fe fb7f 	bl	8000550 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4640      	mov	r0, r8
 8001e58:	4649      	mov	r1, r9
 8001e5a:	f7fe f9c3 	bl	80001e4 <__adddf3>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4614      	mov	r4, r2
 8001e64:	461d      	mov	r5, r3
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <TrapezoidalTraj_PreCal+0xf4>)
 8001e68:	ed93 7a00 	vldr	s14, [r3]
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <TrapezoidalTraj_PreCal+0xf0>)
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e76:	ee17 0a90 	vmov	r0, s15
 8001e7a:	f7fe fb11 	bl	80004a0 <__aeabi_f2d>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4620      	mov	r0, r4
 8001e84:	4629      	mov	r1, r5
 8001e86:	f7fe fc8d 	bl	80007a4 <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7fe fe2d 	bl	8000af0 <__aeabi_d2f>
 8001e96:	4602      	mov	r2, r0
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	601a      	str	r2, [r3, #0]
	}
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ea6:	bf00      	nop
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40000000 	.word	0x40000000
 8001eb0:	20000208 	.word	0x20000208
 8001eb4:	2000020c 	.word	0x2000020c

08001eb8 <TrapezoidalTraj_GetState>:

void TrapezoidalTraj_GetState(int16_t start_pos, int16_t final_pos, Traj* trajectory, uint32_t t_us)
{
 8001eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ebc:	ed2d 8b02 	vpush	{d8}
 8001ec0:	b08c      	sub	sp, #48	; 0x30
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	613a      	str	r2, [r7, #16]
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	4603      	mov	r3, r0
 8001eca:	82fb      	strh	r3, [r7, #22]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	82bb      	strh	r3, [r7, #20]
	if (start_pos != final_pos)
 8001ed0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ed4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f000 8391 	beq.w	8002600 <TrapezoidalTraj_GetState+0x748>
	{
		float t = t_us/1000000.0;
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f7fe fabc 	bl	800045c <__aeabi_ui2d>
 8001ee4:	a3ab      	add	r3, pc, #684	; (adr r3, 8002194 <TrapezoidalTraj_GetState+0x2dc>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fc5b 	bl	80007a4 <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fdfb 	bl	8000af0 <__aeabi_d2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28

		float t_acc = trajectory->t_acc;
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
		float t_total = trajectory->t_total;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	623b      	str	r3, [r7, #32]

		float s = final_pos - start_pos;
 8001f0a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1c:	edc7 7a07 	vstr	s15, [r7, #28]
		int8_t dir = 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (s < 0)
 8001f26:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	d502      	bpl.n	8001f3a <TrapezoidalTraj_GetState+0x82>
		{
			dir = -1;
 8001f34:	23ff      	movs	r3, #255	; 0xff
 8001f36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (2*t_acc < t_total) // General Case
 8001f3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f42:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	f340 81e8 	ble.w	8002322 <TrapezoidalTraj_GetState+0x46a>
		{
			if (t <= t_acc)
 8001f52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	d862      	bhi.n	800202a <TrapezoidalTraj_GetState+0x172>
			{
				qddot_des = dir*a;
 8001f64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f70:	4b83      	ldr	r3, [pc, #524]	; (8002180 <TrapezoidalTraj_GetState+0x2c8>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7a:	4b82      	ldr	r3, [pc, #520]	; (8002184 <TrapezoidalTraj_GetState+0x2cc>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*t;
 8001f80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8c:	4b7c      	ldr	r3, [pc, #496]	; (8002180 <TrapezoidalTraj_GetState+0x2c8>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9e:	4b7a      	ldr	r3, [pc, #488]	; (8002188 <TrapezoidalTraj_GetState+0x2d0>)
 8001fa0:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t,2));
 8001fa4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fa67 	bl	800047c <__aeabi_i2d>
 8001fae:	4604      	mov	r4, r0
 8001fb0:	460d      	mov	r5, r1
 8001fb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fa60 	bl	800047c <__aeabi_i2d>
 8001fbc:	4680      	mov	r8, r0
 8001fbe:	4689      	mov	r9, r1
 8001fc0:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <TrapezoidalTraj_GetState+0x2c8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fa6b 	bl	80004a0 <__aeabi_f2d>
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	4b6f      	ldr	r3, [pc, #444]	; (800218c <TrapezoidalTraj_GetState+0x2d4>)
 8001fd0:	f7fe fabe 	bl	8000550 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4692      	mov	sl, r2
 8001fda:	469b      	mov	fp, r3
 8001fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fde:	f7fe fa5f 	bl	80004a0 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8002178 <TrapezoidalTraj_GetState+0x2c0>
 8001fea:	ec43 2b10 	vmov	d0, r2, r3
 8001fee:	f006 fd21 	bl	8008a34 <pow>
 8001ff2:	ec53 2b10 	vmov	r2, r3, d0
 8001ff6:	4650      	mov	r0, sl
 8001ff8:	4659      	mov	r1, fp
 8001ffa:	f7fe faa9 	bl	8000550 <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4640      	mov	r0, r8
 8002004:	4649      	mov	r1, r9
 8002006:	f7fe faa3 	bl	8000550 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7fe f8e7 	bl	80001e4 <__adddf3>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fd67 	bl	8000af0 <__aeabi_d2f>
 8002022:	4603      	mov	r3, r0
 8002024:	4a5a      	ldr	r2, [pc, #360]	; (8002190 <TrapezoidalTraj_GetState+0x2d8>)
 8002026:	6013      	str	r3, [r2, #0]
				qdot_des = dir*a*(2*t_acc - t);
				q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
			}
		}
	}
}
 8002028:	e2ea      	b.n	8002600 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < (t_total - t_acc))
 800202a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800202e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	f140 8083 	bpl.w	8002144 <TrapezoidalTraj_GetState+0x28c>
 800203e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002042:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800204e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	d575      	bpl.n	8002144 <TrapezoidalTraj_GetState+0x28c>
				qddot_des = 0;
 8002058:	4b4a      	ldr	r3, [pc, #296]	; (8002184 <TrapezoidalTraj_GetState+0x2cc>)
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
				qdot_des = dir*a*t_acc;
 8002060:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206c:	4b44      	ldr	r3, [pc, #272]	; (8002180 <TrapezoidalTraj_GetState+0x2c8>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002076:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	4b42      	ldr	r3, [pc, #264]	; (8002188 <TrapezoidalTraj_GetState+0x2d0>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t_acc,2) + a*t_acc*(t - t_acc));
 8002084:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe f9f7 	bl	800047c <__aeabi_i2d>
 800208e:	4604      	mov	r4, r0
 8002090:	460d      	mov	r5, r1
 8002092:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe f9f0 	bl	800047c <__aeabi_i2d>
 800209c:	4680      	mov	r8, r0
 800209e:	4689      	mov	r9, r1
 80020a0:	4b37      	ldr	r3, [pc, #220]	; (8002180 <TrapezoidalTraj_GetState+0x2c8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe f9fb 	bl	80004a0 <__aeabi_f2d>
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	4b37      	ldr	r3, [pc, #220]	; (800218c <TrapezoidalTraj_GetState+0x2d4>)
 80020b0:	f7fe fa4e 	bl	8000550 <__aeabi_dmul>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4692      	mov	sl, r2
 80020ba:	469b      	mov	fp, r3
 80020bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020be:	f7fe f9ef 	bl	80004a0 <__aeabi_f2d>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8002178 <TrapezoidalTraj_GetState+0x2c0>
 80020ca:	ec43 2b10 	vmov	d0, r2, r3
 80020ce:	f006 fcb1 	bl	8008a34 <pow>
 80020d2:	ec53 2b10 	vmov	r2, r3, d0
 80020d6:	4650      	mov	r0, sl
 80020d8:	4659      	mov	r1, fp
 80020da:	f7fe fa39 	bl	8000550 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4692      	mov	sl, r2
 80020e4:	469b      	mov	fp, r3
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <TrapezoidalTraj_GetState+0x2c8>)
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80020f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	ee17 0a90 	vmov	r0, s15
 8002108:	f7fe f9ca 	bl	80004a0 <__aeabi_f2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4650      	mov	r0, sl
 8002112:	4659      	mov	r1, fp
 8002114:	f7fe f866 	bl	80001e4 <__adddf3>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4640      	mov	r0, r8
 800211e:	4649      	mov	r1, r9
 8002120:	f7fe fa16 	bl	8000550 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4620      	mov	r0, r4
 800212a:	4629      	mov	r1, r5
 800212c:	f7fe f85a 	bl	80001e4 <__adddf3>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fcda 	bl	8000af0 <__aeabi_d2f>
 800213c:	4603      	mov	r3, r0
 800213e:	4a14      	ldr	r2, [pc, #80]	; (8002190 <TrapezoidalTraj_GetState+0x2d8>)
 8002140:	6013      	str	r3, [r2, #0]
}
 8002142:	e25d      	b.n	8002600 <TrapezoidalTraj_GetState+0x748>
			else if ((t_total - t_acc) <= t && t <= t_total)
 8002144:	ed97 7a08 	vldr	s14, [r7, #32]
 8002148:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800214c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002150:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	da00      	bge.n	8002160 <TrapezoidalTraj_GetState+0x2a8>
}
 800215e:	e24f      	b.n	8002600 <TrapezoidalTraj_GetState+0x748>
			else if ((t_total - t_acc) <= t && t <= t_total)
 8002160:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002164:	edd7 7a08 	vldr	s15, [r7, #32]
 8002168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	d914      	bls.n	800219c <TrapezoidalTraj_GetState+0x2e4>
}
 8002172:	e245      	b.n	8002600 <TrapezoidalTraj_GetState+0x748>
 8002174:	f3af 8000 	nop.w
 8002178:	00000000 	.word	0x00000000
 800217c:	40000000 	.word	0x40000000
 8002180:	2000020c 	.word	0x2000020c
 8002184:	200007c0 	.word	0x200007c0
 8002188:	200007bc 	.word	0x200007bc
 800218c:	3fe00000 	.word	0x3fe00000
 8002190:	200007b8 	.word	0x200007b8
 8002194:	00000000 	.word	0x00000000
 8002198:	412e8480 	.word	0x412e8480
				qddot_des = -dir*a;
 800219c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021a0:	425b      	negs	r3, r3
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021aa:	4bbd      	ldr	r3, [pc, #756]	; (80024a0 <TrapezoidalTraj_GetState+0x5e8>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b4:	4bbb      	ldr	r3, [pc, #748]	; (80024a4 <TrapezoidalTraj_GetState+0x5ec>)
 80021b6:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*(t_total - t);
 80021ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c6:	4bb6      	ldr	r3, [pc, #728]	; (80024a0 <TrapezoidalTraj_GetState+0x5e8>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d0:	edd7 6a08 	vldr	s13, [r7, #32]
 80021d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	4bb1      	ldr	r3, [pc, #708]	; (80024a8 <TrapezoidalTraj_GetState+0x5f0>)
 80021e2:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(a*t_total*t+a*t_acc*t_total-a*pow(t_acc,2)-0.5*a*(pow(t,2)+pow(t_total,2)));
 80021e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f946 	bl	800047c <__aeabi_i2d>
 80021f0:	4682      	mov	sl, r0
 80021f2:	468b      	mov	fp, r1
 80021f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f93f 	bl	800047c <__aeabi_i2d>
 80021fe:	e9c7 0100 	strd	r0, r1, [r7]
 8002202:	4ba7      	ldr	r3, [pc, #668]	; (80024a0 <TrapezoidalTraj_GetState+0x5e8>)
 8002204:	ed93 7a00 	vldr	s14, [r3]
 8002208:	edd7 7a08 	vldr	s15, [r7, #32]
 800220c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002210:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002218:	4ba1      	ldr	r3, [pc, #644]	; (80024a0 <TrapezoidalTraj_GetState+0x5e8>)
 800221a:	edd3 6a00 	vldr	s13, [r3]
 800221e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002222:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002226:	edd7 7a08 	vldr	s15, [r7, #32]
 800222a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002232:	ee17 0a90 	vmov	r0, s15
 8002236:	f7fe f933 	bl	80004a0 <__aeabi_f2d>
 800223a:	4604      	mov	r4, r0
 800223c:	460d      	mov	r5, r1
 800223e:	4b98      	ldr	r3, [pc, #608]	; (80024a0 <TrapezoidalTraj_GetState+0x5e8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe f92c 	bl	80004a0 <__aeabi_f2d>
 8002248:	4680      	mov	r8, r0
 800224a:	4689      	mov	r9, r1
 800224c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800224e:	f7fe f927 	bl	80004a0 <__aeabi_f2d>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8002498 <TrapezoidalTraj_GetState+0x5e0>
 800225a:	ec43 2b10 	vmov	d0, r2, r3
 800225e:	f006 fbe9 	bl	8008a34 <pow>
 8002262:	ec53 2b10 	vmov	r2, r3, d0
 8002266:	4640      	mov	r0, r8
 8002268:	4649      	mov	r1, r9
 800226a:	f7fe f971 	bl	8000550 <__aeabi_dmul>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4620      	mov	r0, r4
 8002274:	4629      	mov	r1, r5
 8002276:	f7fd ffb3 	bl	80001e0 <__aeabi_dsub>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4614      	mov	r4, r2
 8002280:	461d      	mov	r5, r3
 8002282:	4b87      	ldr	r3, [pc, #540]	; (80024a0 <TrapezoidalTraj_GetState+0x5e8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f90a 	bl	80004a0 <__aeabi_f2d>
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	4b86      	ldr	r3, [pc, #536]	; (80024ac <TrapezoidalTraj_GetState+0x5f4>)
 8002292:	f7fe f95d 	bl	8000550 <__aeabi_dmul>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4690      	mov	r8, r2
 800229c:	4699      	mov	r9, r3
 800229e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022a0:	f7fe f8fe 	bl	80004a0 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8002498 <TrapezoidalTraj_GetState+0x5e0>
 80022ac:	ec43 2b10 	vmov	d0, r2, r3
 80022b0:	f006 fbc0 	bl	8008a34 <pow>
 80022b4:	eeb0 8a40 	vmov.f32	s16, s0
 80022b8:	eef0 8a60 	vmov.f32	s17, s1
 80022bc:	6a38      	ldr	r0, [r7, #32]
 80022be:	f7fe f8ef 	bl	80004a0 <__aeabi_f2d>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002498 <TrapezoidalTraj_GetState+0x5e0>
 80022ca:	ec43 2b10 	vmov	d0, r2, r3
 80022ce:	f006 fbb1 	bl	8008a34 <pow>
 80022d2:	ec53 2b10 	vmov	r2, r3, d0
 80022d6:	ec51 0b18 	vmov	r0, r1, d8
 80022da:	f7fd ff83 	bl	80001e4 <__adddf3>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4640      	mov	r0, r8
 80022e4:	4649      	mov	r1, r9
 80022e6:	f7fe f933 	bl	8000550 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4620      	mov	r0, r4
 80022f0:	4629      	mov	r1, r5
 80022f2:	f7fd ff75 	bl	80001e0 <__aeabi_dsub>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022fe:	f7fe f927 	bl	8000550 <__aeabi_dmul>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4650      	mov	r0, sl
 8002308:	4659      	mov	r1, fp
 800230a:	f7fd ff6b 	bl	80001e4 <__adddf3>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f7fe fbeb 	bl	8000af0 <__aeabi_d2f>
 800231a:	4603      	mov	r3, r0
 800231c:	4a64      	ldr	r2, [pc, #400]	; (80024b0 <TrapezoidalTraj_GetState+0x5f8>)
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	e16e      	b.n	8002600 <TrapezoidalTraj_GetState+0x748>
			t_acc = 0.5*sqrt(4*fabs(s)/a);
 8002322:	edd7 7a07 	vldr	s15, [r7, #28]
 8002326:	eef0 7ae7 	vabs.f32	s15, s15
 800232a:	ee17 0a90 	vmov	r0, s15
 800232e:	f7fe f8b7 	bl	80004a0 <__aeabi_f2d>
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <TrapezoidalTraj_GetState+0x5fc>)
 8002338:	f7fe f90a 	bl	8000550 <__aeabi_dmul>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4614      	mov	r4, r2
 8002342:	461d      	mov	r5, r3
 8002344:	4b56      	ldr	r3, [pc, #344]	; (80024a0 <TrapezoidalTraj_GetState+0x5e8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f8a9 	bl	80004a0 <__aeabi_f2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4620      	mov	r0, r4
 8002354:	4629      	mov	r1, r5
 8002356:	f7fe fa25 	bl	80007a4 <__aeabi_ddiv>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	ec43 2b17 	vmov	d7, r2, r3
 8002362:	eeb0 0a47 	vmov.f32	s0, s14
 8002366:	eef0 0a67 	vmov.f32	s1, s15
 800236a:	f006 fbd3 	bl	8008b14 <sqrt>
 800236e:	ec51 0b10 	vmov	r0, r1, d0
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	4b4d      	ldr	r3, [pc, #308]	; (80024ac <TrapezoidalTraj_GetState+0x5f4>)
 8002378:	f7fe f8ea 	bl	8000550 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4610      	mov	r0, r2
 8002382:	4619      	mov	r1, r3
 8002384:	f7fe fbb4 	bl	8000af0 <__aeabi_d2f>
 8002388:	4603      	mov	r3, r0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
			t_total = 2*t_acc;
 800238c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002390:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002394:	edc7 7a08 	vstr	s15, [r7, #32]
			if (t <= t_acc)
 8002398:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800239c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80023a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	d862      	bhi.n	8002470 <TrapezoidalTraj_GetState+0x5b8>
				qddot_des = dir*a;
 80023aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <TrapezoidalTraj_GetState+0x5e8>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c0:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <TrapezoidalTraj_GetState+0x5ec>)
 80023c2:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*t;
 80023c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d2:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <TrapezoidalTraj_GetState+0x5e8>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <TrapezoidalTraj_GetState+0x5f0>)
 80023e6:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(0.5*a*pow(t,2));
 80023ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f844 	bl	800047c <__aeabi_i2d>
 80023f4:	4604      	mov	r4, r0
 80023f6:	460d      	mov	r5, r1
 80023f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f83d 	bl	800047c <__aeabi_i2d>
 8002402:	4680      	mov	r8, r0
 8002404:	4689      	mov	r9, r1
 8002406:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <TrapezoidalTraj_GetState+0x5e8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f848 	bl	80004a0 <__aeabi_f2d>
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <TrapezoidalTraj_GetState+0x5f4>)
 8002416:	f7fe f89b 	bl	8000550 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4692      	mov	sl, r2
 8002420:	469b      	mov	fp, r3
 8002422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002424:	f7fe f83c 	bl	80004a0 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8002498 <TrapezoidalTraj_GetState+0x5e0>
 8002430:	ec43 2b10 	vmov	d0, r2, r3
 8002434:	f006 fafe 	bl	8008a34 <pow>
 8002438:	ec53 2b10 	vmov	r2, r3, d0
 800243c:	4650      	mov	r0, sl
 800243e:	4659      	mov	r1, fp
 8002440:	f7fe f886 	bl	8000550 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4640      	mov	r0, r8
 800244a:	4649      	mov	r1, r9
 800244c:	f7fe f880 	bl	8000550 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4620      	mov	r0, r4
 8002456:	4629      	mov	r1, r5
 8002458:	f7fd fec4 	bl	80001e4 <__adddf3>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fb44 	bl	8000af0 <__aeabi_d2f>
 8002468:	4603      	mov	r3, r0
 800246a:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <TrapezoidalTraj_GetState+0x5f8>)
 800246c:	6013      	str	r3, [r2, #0]
}
 800246e:	e0c7      	b.n	8002600 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < t_total)
 8002470:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002474:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	d400      	bmi.n	8002484 <TrapezoidalTraj_GetState+0x5cc>
}
 8002482:	e0bd      	b.n	8002600 <TrapezoidalTraj_GetState+0x748>
			else if (t_acc < t && t < t_total)
 8002484:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002488:	edd7 7a08 	vldr	s15, [r7, #32]
 800248c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002494:	d410      	bmi.n	80024b8 <TrapezoidalTraj_GetState+0x600>
}
 8002496:	e0b3      	b.n	8002600 <TrapezoidalTraj_GetState+0x748>
 8002498:	00000000 	.word	0x00000000
 800249c:	40000000 	.word	0x40000000
 80024a0:	2000020c 	.word	0x2000020c
 80024a4:	200007c0 	.word	0x200007c0
 80024a8:	200007bc 	.word	0x200007bc
 80024ac:	3fe00000 	.word	0x3fe00000
 80024b0:	200007b8 	.word	0x200007b8
 80024b4:	40100000 	.word	0x40100000
				qddot_des = -dir*a;
 80024b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024bc:	425b      	negs	r3, r3
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c6:	4b54      	ldr	r3, [pc, #336]	; (8002618 <TrapezoidalTraj_GetState+0x760>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d0:	4b52      	ldr	r3, [pc, #328]	; (800261c <TrapezoidalTraj_GetState+0x764>)
 80024d2:	edc3 7a00 	vstr	s15, [r3]
				qdot_des = dir*a*(2*t_acc - t);
 80024d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e2:	4b4d      	ldr	r3, [pc, #308]	; (8002618 <TrapezoidalTraj_GetState+0x760>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80024f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002500:	4b47      	ldr	r3, [pc, #284]	; (8002620 <TrapezoidalTraj_GetState+0x768>)
 8002502:	edc3 7a00 	vstr	s15, [r3]
				q_des = start_pos + dir*(2*a*t_acc*t-0.5*a*pow(t,2)-a*pow(t_acc,2));
 8002506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fd ffb6 	bl	800047c <__aeabi_i2d>
 8002510:	4604      	mov	r4, r0
 8002512:	460d      	mov	r5, r1
 8002514:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd ffaf 	bl	800047c <__aeabi_i2d>
 800251e:	4680      	mov	r8, r0
 8002520:	4689      	mov	r9, r1
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <TrapezoidalTraj_GetState+0x760>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800252c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002534:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	ee17 0a90 	vmov	r0, s15
 8002540:	f7fd ffae 	bl	80004a0 <__aeabi_f2d>
 8002544:	4682      	mov	sl, r0
 8002546:	468b      	mov	fp, r1
 8002548:	4b33      	ldr	r3, [pc, #204]	; (8002618 <TrapezoidalTraj_GetState+0x760>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fd ffa7 	bl	80004a0 <__aeabi_f2d>
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <TrapezoidalTraj_GetState+0x76c>)
 8002558:	f7fd fffa 	bl	8000550 <__aeabi_dmul>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	e9c7 2300 	strd	r2, r3, [r7]
 8002564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002566:	f7fd ff9b 	bl	80004a0 <__aeabi_f2d>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8002610 <TrapezoidalTraj_GetState+0x758>
 8002572:	ec43 2b10 	vmov	d0, r2, r3
 8002576:	f006 fa5d 	bl	8008a34 <pow>
 800257a:	ec53 2b10 	vmov	r2, r3, d0
 800257e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002582:	f7fd ffe5 	bl	8000550 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4650      	mov	r0, sl
 800258c:	4659      	mov	r1, fp
 800258e:	f7fd fe27 	bl	80001e0 <__aeabi_dsub>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	e9c7 2300 	strd	r2, r3, [r7]
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <TrapezoidalTraj_GetState+0x760>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ff7e 	bl	80004a0 <__aeabi_f2d>
 80025a4:	4682      	mov	sl, r0
 80025a6:	468b      	mov	fp, r1
 80025a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025aa:	f7fd ff79 	bl	80004a0 <__aeabi_f2d>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8002610 <TrapezoidalTraj_GetState+0x758>
 80025b6:	ec43 2b10 	vmov	d0, r2, r3
 80025ba:	f006 fa3b 	bl	8008a34 <pow>
 80025be:	ec53 2b10 	vmov	r2, r3, d0
 80025c2:	4650      	mov	r0, sl
 80025c4:	4659      	mov	r1, fp
 80025c6:	f7fd ffc3 	bl	8000550 <__aeabi_dmul>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025d2:	f7fd fe05 	bl	80001e0 <__aeabi_dsub>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4640      	mov	r0, r8
 80025dc:	4649      	mov	r1, r9
 80025de:	f7fd ffb7 	bl	8000550 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4620      	mov	r0, r4
 80025e8:	4629      	mov	r1, r5
 80025ea:	f7fd fdfb 	bl	80001e4 <__adddf3>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe fa7b 	bl	8000af0 <__aeabi_d2f>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <TrapezoidalTraj_GetState+0x770>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	ecbd 8b02 	vpop	{d8}
 800260a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800260e:	bf00      	nop
 8002610:	00000000 	.word	0x00000000
 8002614:	40000000 	.word	0x40000000
 8002618:	2000020c 	.word	0x2000020c
 800261c:	200007c0 	.word	0x200007c0
 8002620:	200007bc 	.word	0x200007bc
 8002624:	3fe00000 	.word	0x3fe00000
 8002628:	200007b8 	.word	0x200007b8

0800262c <HolePositionsCartesian>:
		PlacerotationAngleDegree = Degrees;
	}
}

void HolePositionsCartesian(float32_t* bottomleft, float32_t rotationAngleRadian, float32_t* holePositionsCartesian)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	ed87 0a02 	vstr	s0, [r7, #8]
 8002638:	6079      	str	r1, [r7, #4]
	if (GoalReadyFlag == 0)
 800263a:	4b56      	ldr	r3, [pc, #344]	; (8002794 <HolePositionsCartesian+0x168>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 80a4 	bne.w	800278c <HolePositionsCartesian+0x160>
	{
		float32_t rotationMatrix[4] =
		{
			arm_cos_f32(rotationAngleRadian),  //0
 8002644:	ed97 0a02 	vldr	s0, [r7, #8]
 8002648:	f001 f928 	bl	800389c <arm_cos_f32>
 800264c:	eef0 7a40 	vmov.f32	s15, s0
		float32_t rotationMatrix[4] =
 8002650:	edc7 7a04 	vstr	s15, [r7, #16]
			arm_sin_f32(rotationAngleRadian),  //1
 8002654:	ed97 0a02 	vldr	s0, [r7, #8]
 8002658:	f001 f9a6 	bl	80039a8 <arm_sin_f32>
 800265c:	eef0 7a40 	vmov.f32	s15, s0
		float32_t rotationMatrix[4] =
 8002660:	edc7 7a05 	vstr	s15, [r7, #20]
			-arm_sin_f32(rotationAngleRadian), //2
 8002664:	ed97 0a02 	vldr	s0, [r7, #8]
 8002668:	f001 f99e 	bl	80039a8 <arm_sin_f32>
 800266c:	eef0 7a40 	vmov.f32	s15, s0
 8002670:	eef1 7a67 	vneg.f32	s15, s15
		float32_t rotationMatrix[4] =
 8002674:	edc7 7a06 	vstr	s15, [r7, #24]
			arm_cos_f32(rotationAngleRadian)   //3
 8002678:	ed97 0a02 	vldr	s0, [r7, #8]
 800267c:	f001 f90e 	bl	800389c <arm_cos_f32>
 8002680:	eef0 7a40 	vmov.f32	s15, s0
		float32_t rotationMatrix[4] =
 8002684:	edc7 7a07 	vstr	s15, [r7, #28]
		};

		static uint8_t i = 0;
		//rotation
		holePositionsCartesianrotation[i*2] = (holePositionsRelativetoBottomLeft[i*2] * rotationMatrix[0]) + (holePositionsRelativetoBottomLeft[i*2+1] * rotationMatrix[2]);
 8002688:	4b43      	ldr	r3, [pc, #268]	; (8002798 <HolePositionsCartesian+0x16c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4a43      	ldr	r2, [pc, #268]	; (800279c <HolePositionsCartesian+0x170>)
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	ed93 7a00 	vldr	s14, [r3]
 8002698:	edd7 7a04 	vldr	s15, [r7, #16]
 800269c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a0:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HolePositionsCartesian+0x16c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	3301      	adds	r3, #1
 80026a8:	4a3c      	ldr	r2, [pc, #240]	; (800279c <HolePositionsCartesian+0x170>)
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	edd3 6a00 	vldr	s13, [r3]
 80026b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80026b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ba:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HolePositionsCartesian+0x16c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c4:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <HolePositionsCartesian+0x174>)
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	edc3 7a00 	vstr	s15, [r3]
		holePositionsCartesianrotation[i*2+1] = (holePositionsRelativetoBottomLeft[i*2] * rotationMatrix[1]) + (holePositionsRelativetoBottomLeft[i*2+1] * rotationMatrix[3]);
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HolePositionsCartesian+0x16c>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4a31      	ldr	r2, [pc, #196]	; (800279c <HolePositionsCartesian+0x170>)
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	ed93 7a00 	vldr	s14, [r3]
 80026de:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <HolePositionsCartesian+0x16c>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	3301      	adds	r3, #1
 80026ee:	4a2b      	ldr	r2, [pc, #172]	; (800279c <HolePositionsCartesian+0x170>)
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	edd3 6a00 	vldr	s13, [r3]
 80026f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HolePositionsCartesian+0x16c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	3301      	adds	r3, #1
 8002708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800270c:	4a24      	ldr	r2, [pc, #144]	; (80027a0 <HolePositionsCartesian+0x174>)
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	edc3 7a00 	vstr	s15, [r3]

		//translation
		*(holePositionsCartesian + (i*2)) = holePositionsCartesianrotation[i*2] + bottomleft[0];
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HolePositionsCartesian+0x16c>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <HolePositionsCartesian+0x174>)
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	ed93 7a00 	vldr	s14, [r3]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HolePositionsCartesian+0x16c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273a:	edc3 7a00 	vstr	s15, [r3]
		*(holePositionsCartesian + (i*2 + 1)) = holePositionsCartesianrotation[i*2+1] + bottomleft[1];
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <HolePositionsCartesian+0x16c>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	3301      	adds	r3, #1
 8002746:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <HolePositionsCartesian+0x174>)
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	ed93 7a00 	vldr	s14, [r3]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3304      	adds	r3, #4
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HolePositionsCartesian+0x16c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	3304      	adds	r3, #4
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002768:	edc3 7a00 	vstr	s15, [r3]

		i++;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HolePositionsCartesian+0x16c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HolePositionsCartesian+0x16c>)
 8002776:	701a      	strb	r2, [r3, #0]
		if (i == 9)
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HolePositionsCartesian+0x16c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b09      	cmp	r3, #9
 800277e:	d105      	bne.n	800278c <HolePositionsCartesian+0x160>
		{
			GoalReadyFlag = 1;
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <HolePositionsCartesian+0x168>)
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
			i = 0;
 8002786:	4b04      	ldr	r3, [pc, #16]	; (8002798 <HolePositionsCartesian+0x16c>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800278c:	bf00      	nop
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000880 	.word	0x20000880
 8002798:	2000035c 	.word	0x2000035c
 800279c:	20000210 	.word	0x20000210
 80027a0:	20000314 	.word	0x20000314

080027a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027a8:	f001 f980 	bl	8003aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ac:	f000 f856 	bl	800285c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027b0:	f000 fb0c 	bl	8002dcc <MX_GPIO_Init>
  MX_DMA_Init();
 80027b4:	f000 fad4 	bl	8002d60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80027b8:	f000 faa6 	bl	8002d08 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80027bc:	f000 fa0a 	bl	8002bd4 <MX_TIM5_Init>
  MX_TIM1_Init();
 80027c0:	f000 f914 	bl	80029ec <MX_TIM1_Init>
  MX_TIM3_Init();
 80027c4:	f000 f9b2 	bl	8002b2c <MX_TIM3_Init>
  MX_TIM11_Init();
 80027c8:	f000 fa52 	bl	8002c70 <MX_TIM11_Init>
  MX_ADC1_Init();
 80027cc:	f000 f8ae 	bl	800292c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 80027d0:	4816      	ldr	r0, [pc, #88]	; (800282c <main+0x88>)
 80027d2:	f003 fa1b 	bl	8005c0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 80027d6:	4816      	ldr	r0, [pc, #88]	; (8002830 <main+0x8c>)
 80027d8:	f003 f9be 	bl	8005b58 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80027dc:	213c      	movs	r1, #60	; 0x3c
 80027de:	4815      	ldr	r0, [pc, #84]	; (8002834 <main+0x90>)
 80027e0:	f003 fd0c 	bl	80061fc <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80027e4:	2100      	movs	r1, #0
 80027e6:	4812      	ldr	r0, [pc, #72]	; (8002830 <main+0x8c>)
 80027e8:	f003 fb3e 	bl	8005e68 <HAL_TIM_PWM_Start>

  Controller.Kp = 150;
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <main+0x94>)
 80027ee:	4a13      	ldr	r2, [pc, #76]	; (800283c <main+0x98>)
 80027f0:	601a      	str	r2, [r3, #0]
  Controller.Ki = 1.71;
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <main+0x94>)
 80027f4:	4a12      	ldr	r2, [pc, #72]	; (8002840 <main+0x9c>)
 80027f6:	605a      	str	r2, [r3, #4]
  Controller.Kd = 0;
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <main+0x94>)
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]

  hmodbus.huart = &huart2;
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <main+0xa0>)
 8002802:	4a11      	ldr	r2, [pc, #68]	; (8002848 <main+0xa4>)
 8002804:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <main+0xa0>)
 8002808:	4a10      	ldr	r2, [pc, #64]	; (800284c <main+0xa8>)
 800280a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <main+0xa0>)
 800280e:	2215      	movs	r2, #21
 8002810:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =70;
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <main+0xa0>)
 8002814:	2246      	movs	r2, #70	; 0x46
 8002816:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8002818:	490d      	ldr	r1, [pc, #52]	; (8002850 <main+0xac>)
 800281a:	480a      	ldr	r0, [pc, #40]	; (8002844 <main+0xa0>)
 800281c:	f7fe ffca 	bl	80017b4 <Modbus_init>

  //joy stick--------------------------
  HAL_ADC_Start_DMA(&hadc1, adcRawData, 20);
 8002820:	2214      	movs	r2, #20
 8002822:	490c      	ldr	r1, [pc, #48]	; (8002854 <main+0xb0>)
 8002824:	480c      	ldr	r0, [pc, #48]	; (8002858 <main+0xb4>)
 8002826:	f001 f9f7 	bl	8003c18 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800282a:	e7fe      	b.n	800282a <main+0x86>
 800282c:	20000570 	.word	0x20000570
 8002830:	20000408 	.word	0x20000408
 8002834:	200004bc 	.word	0x200004bc
 8002838:	200007fc 	.word	0x200007fc
 800283c:	43160000 	.word	0x43160000
 8002840:	3fdae148 	.word	0x3fdae148
 8002844:	20000884 	.word	0x20000884
 8002848:	200006d8 	.word	0x200006d8
 800284c:	20000624 	.word	0x20000624
 8002850:	20000d5c 	.word	0x20000d5c
 8002854:	20000810 	.word	0x20000810
 8002858:	20000360 	.word	0x20000360

0800285c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b094      	sub	sp, #80	; 0x50
 8002860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002862:	f107 0320 	add.w	r3, r7, #32
 8002866:	2230      	movs	r2, #48	; 0x30
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f006 f8da 	bl	8008a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <SystemClock_Config+0xc8>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	4a26      	ldr	r2, [pc, #152]	; (8002924 <SystemClock_Config+0xc8>)
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288e:	6413      	str	r3, [r2, #64]	; 0x40
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <SystemClock_Config+0xc8>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800289c:	2300      	movs	r3, #0
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <SystemClock_Config+0xcc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a20      	ldr	r2, [pc, #128]	; (8002928 <SystemClock_Config+0xcc>)
 80028a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <SystemClock_Config+0xcc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028b8:	2302      	movs	r3, #2
 80028ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028bc:	2301      	movs	r3, #1
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028c0:	2310      	movs	r3, #16
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c4:	2302      	movs	r3, #2
 80028c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028c8:	2300      	movs	r3, #0
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028cc:	2308      	movs	r3, #8
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80028d0:	2364      	movs	r3, #100	; 0x64
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028d4:	2302      	movs	r3, #2
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028d8:	2304      	movs	r3, #4
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028dc:	f107 0320 	add.w	r3, r7, #32
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fc45 	bl	8005170 <HAL_RCC_OscConfig>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028ec:	f000 fcf8 	bl	80032e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028f0:	230f      	movs	r3, #15
 80028f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f4:	2302      	movs	r3, #2
 80028f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f002 fea7 	bl	8005660 <HAL_RCC_ClockConfig>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002918:	f000 fce2 	bl	80032e0 <Error_Handler>
  }
}
 800291c:	bf00      	nop
 800291e:	3750      	adds	r7, #80	; 0x50
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000

0800292c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002932:	463b      	mov	r3, r7
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800293e:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <MX_ADC1_Init+0xb4>)
 8002940:	4a28      	ldr	r2, [pc, #160]	; (80029e4 <MX_ADC1_Init+0xb8>)
 8002942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002944:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <MX_ADC1_Init+0xb4>)
 8002946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800294a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800294c:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <MX_ADC1_Init+0xb4>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002952:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <MX_ADC1_Init+0xb4>)
 8002954:	2201      	movs	r2, #1
 8002956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <MX_ADC1_Init+0xb4>)
 800295a:	2201      	movs	r2, #1
 800295c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <MX_ADC1_Init+0xb4>)
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <MX_ADC1_Init+0xb4>)
 8002968:	2200      	movs	r2, #0
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MX_ADC1_Init+0xb4>)
 800296e:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <MX_ADC1_Init+0xbc>)
 8002970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <MX_ADC1_Init+0xb4>)
 8002974:	2200      	movs	r2, #0
 8002976:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <MX_ADC1_Init+0xb4>)
 800297a:	2202      	movs	r2, #2
 800297c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <MX_ADC1_Init+0xb4>)
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <MX_ADC1_Init+0xb4>)
 8002988:	2201      	movs	r2, #1
 800298a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800298c:	4814      	ldr	r0, [pc, #80]	; (80029e0 <MX_ADC1_Init+0xb4>)
 800298e:	f001 f8ff 	bl	8003b90 <HAL_ADC_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002998:	f000 fca2 	bl	80032e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800299c:	2300      	movs	r3, #0
 800299e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80029a4:	2303      	movs	r3, #3
 80029a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029a8:	463b      	mov	r3, r7
 80029aa:	4619      	mov	r1, r3
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <MX_ADC1_Init+0xb4>)
 80029ae:	f001 fa41 	bl	8003e34 <HAL_ADC_ConfigChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029b8:	f000 fc92 	bl	80032e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80029bc:	2301      	movs	r3, #1
 80029be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80029c0:	2302      	movs	r3, #2
 80029c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c4:	463b      	mov	r3, r7
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_ADC1_Init+0xb4>)
 80029ca:	f001 fa33 	bl	8003e34 <HAL_ADC_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80029d4:	f000 fc84 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000360 	.word	0x20000360
 80029e4:	40012000 	.word	0x40012000
 80029e8:	0f000001 	.word	0x0f000001

080029ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b096      	sub	sp, #88	; 0x58
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	611a      	str	r2, [r3, #16]
 8002a1a:	615a      	str	r2, [r3, #20]
 8002a1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	2220      	movs	r2, #32
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f005 fffd 	bl	8008a24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002a2c:	4a3e      	ldr	r2, [pc, #248]	; (8002b28 <MX_TIM1_Init+0x13c>)
 8002a2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a30:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a36:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8002a3c:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002a3e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002a42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a56:	4833      	ldr	r0, [pc, #204]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002a58:	f003 f822 	bl	8005aa0 <HAL_TIM_Base_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002a62:	f000 fc3d 	bl	80032e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a70:	4619      	mov	r1, r3
 8002a72:	482c      	ldr	r0, [pc, #176]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002a74:	f003 fe96 	bl	80067a4 <HAL_TIM_ConfigClockSource>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a7e:	f000 fc2f 	bl	80032e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a82:	4828      	ldr	r0, [pc, #160]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002a84:	f003 f98a 	bl	8005d9c <HAL_TIM_PWM_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a8e:	f000 fc27 	bl	80032e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4820      	ldr	r0, [pc, #128]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002aa2:	f004 fc0f 	bl	80072c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002aac:	f000 fc18 	bl	80032e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ab0:	2360      	movs	r3, #96	; 0x60
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002abc:	2300      	movs	r3, #0
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4813      	ldr	r0, [pc, #76]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002ad6:	f003 fda3 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002ae0:	f000 fbfe 	bl	80032e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002afc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4807      	ldr	r0, [pc, #28]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002b08:	f004 fc4a 	bl	80073a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002b12:	f000 fbe5 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b16:	4803      	ldr	r0, [pc, #12]	; (8002b24 <MX_TIM1_Init+0x138>)
 8002b18:	f000 fd3c 	bl	8003594 <HAL_TIM_MspPostInit>

}
 8002b1c:	bf00      	nop
 8002b1e:	3758      	adds	r7, #88	; 0x58
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000408 	.word	0x20000408
 8002b28:	40010000 	.word	0x40010000

08002b2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08c      	sub	sp, #48	; 0x30
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	2224      	movs	r2, #36	; 0x24
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f005 ff72 	bl	8008a24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b48:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <MX_TIM3_Init+0xa0>)
 8002b4a:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <MX_TIM3_Init+0xa4>)
 8002b4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <MX_TIM3_Init+0xa0>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <MX_TIM3_Init+0xa0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD - 1;
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <MX_TIM3_Init+0xa0>)
 8002b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <MX_TIM3_Init+0xa0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <MX_TIM3_Init+0xa0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b76:	2301      	movs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b86:	2301      	movs	r3, #1
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	4619      	mov	r1, r3
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <MX_TIM3_Init+0xa0>)
 8002b9a:	f003 fa7b 	bl	8006094 <HAL_TIM_Encoder_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002ba4:	f000 fb9c 	bl	80032e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_TIM3_Init+0xa0>)
 8002bb6:	f004 fb85 	bl	80072c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002bc0:	f000 fb8e 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	3730      	adds	r7, #48	; 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200004bc 	.word	0x200004bc
 8002bd0:	40000400 	.word	0x40000400

08002bd4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be8:	463b      	mov	r3, r7
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bf0:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <MX_TIM5_Init+0x90>)
 8002bf2:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <MX_TIM5_Init+0x94>)
 8002bf4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <MX_TIM5_Init+0x90>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <MX_TIM5_Init+0x90>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8002c02:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <MX_TIM5_Init+0x90>)
 8002c04:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <MX_TIM5_Init+0x98>)
 8002c06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <MX_TIM5_Init+0x90>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <MX_TIM5_Init+0x90>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c14:	4813      	ldr	r0, [pc, #76]	; (8002c64 <MX_TIM5_Init+0x90>)
 8002c16:	f002 ff43 	bl	8005aa0 <HAL_TIM_Base_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002c20:	f000 fb5e 	bl	80032e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c2a:	f107 0308 	add.w	r3, r7, #8
 8002c2e:	4619      	mov	r1, r3
 8002c30:	480c      	ldr	r0, [pc, #48]	; (8002c64 <MX_TIM5_Init+0x90>)
 8002c32:	f003 fdb7 	bl	80067a4 <HAL_TIM_ConfigClockSource>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8002c3c:	f000 fb50 	bl	80032e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c48:	463b      	mov	r3, r7
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4805      	ldr	r0, [pc, #20]	; (8002c64 <MX_TIM5_Init+0x90>)
 8002c4e:	f004 fb39 	bl	80072c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8002c58:	f000 fb42 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000570 	.word	0x20000570
 8002c68:	40000c00 	.word	0x40000c00
 8002c6c:	0001869f 	.word	0x0001869f

08002c70 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
 8002c84:	615a      	str	r2, [r3, #20]
 8002c86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <MX_TIM11_Init+0x90>)
 8002c8a:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <MX_TIM11_Init+0x94>)
 8002c8c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <MX_TIM11_Init+0x90>)
 8002c90:	2263      	movs	r2, #99	; 0x63
 8002c92:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <MX_TIM11_Init+0x90>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002c9a:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <MX_TIM11_Init+0x90>)
 8002c9c:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002ca0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca2:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <MX_TIM11_Init+0x90>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <MX_TIM11_Init+0x90>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002cae:	4814      	ldr	r0, [pc, #80]	; (8002d00 <MX_TIM11_Init+0x90>)
 8002cb0:	f002 fef6 	bl	8005aa0 <HAL_TIM_Base_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002cba:	f000 fb11 	bl	80032e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002cbe:	4810      	ldr	r0, [pc, #64]	; (8002d00 <MX_TIM11_Init+0x90>)
 8002cc0:	f003 f806 	bl	8005cd0 <HAL_TIM_OC_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002cca:	f000 fb09 	bl	80032e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002cce:	2310      	movs	r3, #16
 8002cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002cd2:	f240 5399 	movw	r3, #1433	; 0x599
 8002cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4806      	ldr	r0, [pc, #24]	; (8002d00 <MX_TIM11_Init+0x90>)
 8002ce8:	f003 fc3e 	bl	8006568 <HAL_TIM_OC_ConfigChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8002cf2:	f000 faf5 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000624 	.word	0x20000624
 8002d04:	40014800 	.word	0x40014800

08002d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <MX_USART2_UART_Init+0x50>)
 8002d0e:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <MX_USART2_UART_Init+0x54>)
 8002d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_USART2_UART_Init+0x50>)
 8002d14:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <MX_USART2_UART_Init+0x50>)
 8002d1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d20:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <MX_USART2_UART_Init+0x50>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <MX_USART2_UART_Init+0x50>)
 8002d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_USART2_UART_Init+0x50>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <MX_USART2_UART_Init+0x50>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_USART2_UART_Init+0x50>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d42:	4805      	ldr	r0, [pc, #20]	; (8002d58 <MX_USART2_UART_Init+0x50>)
 8002d44:	f004 fb9c 	bl	8007480 <HAL_UART_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002d4e:	f000 fac7 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200006d8 	.word	0x200006d8
 8002d5c:	40004400 	.word	0x40004400

08002d60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <MX_DMA_Init+0x68>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <MX_DMA_Init+0x68>)
 8002d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <MX_DMA_Init+0x68>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <MX_DMA_Init+0x68>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <MX_DMA_Init+0x68>)
 8002d8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <MX_DMA_Init+0x68>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	2011      	movs	r0, #17
 8002da4:	f001 fbd1 	bl	800454a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002da8:	2011      	movs	r0, #17
 8002daa:	f001 fbea 	bl	8004582 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	2038      	movs	r0, #56	; 0x38
 8002db4:	f001 fbc9 	bl	800454a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002db8:	2038      	movs	r0, #56	; 0x38
 8002dba:	f001 fbe2 	bl	8004582 <HAL_NVIC_EnableIRQ>

}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b56      	ldr	r3, [pc, #344]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b52      	ldr	r3, [pc, #328]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a51      	ldr	r2, [pc, #324]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b4f      	ldr	r3, [pc, #316]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4b4b      	ldr	r3, [pc, #300]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a4a      	ldr	r2, [pc, #296]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b48      	ldr	r3, [pc, #288]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	4b44      	ldr	r3, [pc, #272]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a43      	ldr	r2, [pc, #268]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <MX_GPIO_Init+0x180>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 8002e52:	2200      	movs	r2, #0
 8002e54:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8002e58:	483d      	ldr	r0, [pc, #244]	; (8002f50 <MX_GPIO_Init+0x184>)
 8002e5a:	f002 f957 	bl	800510c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	4619      	mov	r1, r3
 8002e74:	4837      	ldr	r0, [pc, #220]	; (8002f54 <MX_GPIO_Init+0x188>)
 8002e76:	f001 ffad 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4830      	ldr	r0, [pc, #192]	; (8002f50 <MX_GPIO_Init+0x184>)
 8002e8e:	f001 ffa1 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 8002e92:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8002e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4829      	ldr	r0, [pc, #164]	; (8002f50 <MX_GPIO_Init+0x184>)
 8002eac:	f001 ff92 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002eb0:	2306      	movs	r3, #6
 8002eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4824      	ldr	r0, [pc, #144]	; (8002f58 <MX_GPIO_Init+0x18c>)
 8002ec6:	f001 ff85 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002ed0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	481d      	ldr	r0, [pc, #116]	; (8002f58 <MX_GPIO_Init+0x18c>)
 8002ee2:	f001 ff77 	bl	8004dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	4619      	mov	r1, r3
 8002efc:	4814      	ldr	r0, [pc, #80]	; (8002f50 <MX_GPIO_Init+0x184>)
 8002efe:	f001 ff69 	bl	8004dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	2007      	movs	r0, #7
 8002f08:	f001 fb1f 	bl	800454a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002f0c:	2007      	movs	r0, #7
 8002f0e:	f001 fb38 	bl	8004582 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	2008      	movs	r0, #8
 8002f18:	f001 fb17 	bl	800454a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002f1c:	2008      	movs	r0, #8
 8002f1e:	f001 fb30 	bl	8004582 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	2017      	movs	r0, #23
 8002f28:	f001 fb0f 	bl	800454a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f2c:	2017      	movs	r0, #23
 8002f2e:	f001 fb28 	bl	8004582 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f32:	2200      	movs	r2, #0
 8002f34:	2100      	movs	r1, #0
 8002f36:	2028      	movs	r0, #40	; 0x28
 8002f38:	f001 fb07 	bl	800454a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f3c:	2028      	movs	r0, #40	; 0x28
 8002f3e:	f001 fb20 	bl	8004582 <HAL_NVIC_EnableIRQ>

}
 8002f42:	bf00      	nop
 8002f44:	3728      	adds	r7, #40	; 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	40020800 	.word	0x40020800
 8002f58:	40020400 	.word	0x40020400

08002f5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a29      	ldr	r2, [pc, #164]	; (800300c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d14b      	bne.n	8003004 <HAL_TIM_PeriodElapsedCallback+0xa8>
	{
		_micros += 1000;
 8002f6c:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8002f76:	f143 0500 	adc.w	r5, r3, #0
 8002f7a:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002f7c:	e9c3 4500 	strd	r4, r5, [r3]

		Modbus_Protocal_Worker();
 8002f80:	f7fe fca4 	bl	80018cc <Modbus_Protocal_Worker>
		QEIEncoderPositionVelocity_Update(&htim3, &htim5);
 8002f84:	4921      	ldr	r1, [pc, #132]	; (800300c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f86:	4823      	ldr	r0, [pc, #140]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f88:	f7fe f94a 	bl	8001220 <QEIEncoderPositionVelocity_Update>

		check_pe();
 8002f8c:	f000 f97a 	bl	8003284 <check_pe>
		SetHome(&htim3, &htim1);
 8002f90:	4921      	ldr	r1, [pc, #132]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f92:	4820      	ldr	r0, [pc, #128]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f94:	f7fe fa88 	bl	80014a8 <SetHome>

		HolePositionsCartesian(ref, 0.7854, PickTray9holes);
 8002f98:	4920      	ldr	r1, [pc, #128]	; (800301c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f9a:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003020 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8002f9e:	4821      	ldr	r0, [pc, #132]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002fa0:	f7ff fb44 	bl	800262c <HolePositionsCartesian>

		static uint8_t j = 0;
		if (GoalReadyFlag && ControllerFinishedFollowFlag && (j <= 8))
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d016      	beq.n	8002fda <HAL_TIM_PeriodElapsedCallback+0x7e>
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d012      	beq.n	8002fda <HAL_TIM_PeriodElapsedCallback+0x7e>
 8002fb4:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d80e      	bhi.n	8002fda <HAL_TIM_PeriodElapsedCallback+0x7e>
		{
			Pf = PickTray9holes[2*j];
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4a16      	ldr	r2, [pc, #88]	; (800301c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002fcc:	6013      	str	r3, [r2, #0]
			j++;
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002fd8:	701a      	strb	r2, [r3, #0]
		}
		ControllerState();
 8002fda:	f000 f831 	bl	8003040 <ControllerState>
//		GetJoystickXYaxisValue();
//		JoyStickControlCartesian();

		static uint8_t i = 0;
		if (i == 0)
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			registerFrame[0].U16 = 0b0101100101100001; //Ya 22881
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002fe8:	f645 1261 	movw	r2, #22881	; 0x5961
 8002fec:	801a      	strh	r2, [r3, #0]
		}
		i = (i + 1) % 2;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	bfb8      	it	lt
 8002ffc:	425b      	neglt	r3, r3
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003002:	701a      	strb	r2, [r3, #0]
	}
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bdb0      	pop	{r4, r5, r7, pc}
 800300c:	20000570 	.word	0x20000570
 8003010:	200007d8 	.word	0x200007d8
 8003014:	200004bc 	.word	0x200004bc
 8003018:	20000408 	.word	0x20000408
 800301c:	20000838 	.word	0x20000838
 8003020:	3f490ff9 	.word	0x3f490ff9
 8003024:	2000025c 	.word	0x2000025c
 8003028:	20000880 	.word	0x20000880
 800302c:	200007f8 	.word	0x200007f8
 8003030:	20000de8 	.word	0x20000de8
 8003034:	200007d0 	.word	0x200007d0
 8003038:	20000de9 	.word	0x20000de9
 800303c:	20000d5c 	.word	0x20000d5c

08003040 <ControllerState>:

void ControllerState()
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
	static enum {Idle, Follow} state = Idle;

	if (SetHomeFlag == 0)
 8003044:	4b66      	ldr	r3, [pc, #408]	; (80031e0 <ControllerState+0x1a0>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 80c2 	bne.w	80031d2 <ControllerState+0x192>
	{
		switch(state)
 800304e:	4b65      	ldr	r3, [pc, #404]	; (80031e4 <ControllerState+0x1a4>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <ControllerState+0x1c>
 8003056:	2b01      	cmp	r3, #1
 8003058:	d03c      	beq.n	80030d4 <ControllerState+0x94>
 800305a:	e0b6      	b.n	80031ca <ControllerState+0x18a>
		{
		case Idle:
			ControllerFinishedFollowFlag = 1;
 800305c:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <ControllerState+0x1a8>)
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
			PulseWidthModulation = 0;
 8003062:	4b62      	ldr	r3, [pc, #392]	; (80031ec <ControllerState+0x1ac>)
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
			MotorDrive(&htim1);
 800306a:	4861      	ldr	r0, [pc, #388]	; (80031f0 <ControllerState+0x1b0>)
 800306c:	f7fe f98c 	bl	8001388 <MotorDrive>
			Pi = QEIData.position;
 8003070:	4b60      	ldr	r3, [pc, #384]	; (80031f4 <ControllerState+0x1b4>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a60      	ldr	r2, [pc, #384]	; (80031f8 <ControllerState+0x1b8>)
 8003076:	6013      	str	r3, [r2, #0]

			if(Pf != Pf_last)
 8003078:	4b60      	ldr	r3, [pc, #384]	; (80031fc <ControllerState+0x1bc>)
 800307a:	ed93 7a00 	vldr	s14, [r3]
 800307e:	4b60      	ldr	r3, [pc, #384]	; (8003200 <ControllerState+0x1c0>)
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	eeb4 7a67 	vcmp.f32	s14, s15
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	f000 809a 	beq.w	80031c4 <ControllerState+0x184>
			{
				t_traj = 0;
 8003090:	495c      	ldr	r1, [pc, #368]	; (8003204 <ControllerState+0x1c4>)
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9c1 2300 	strd	r2, r3, [r1]
				TrapezoidalTraj_PreCal(Pi, Pf, &traj);
 800309e:	4b56      	ldr	r3, [pc, #344]	; (80031f8 <ControllerState+0x1b8>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030a8:	ee17 3a90 	vmov	r3, s15
 80030ac:	b21b      	sxth	r3, r3
 80030ae:	4a53      	ldr	r2, [pc, #332]	; (80031fc <ControllerState+0x1bc>)
 80030b0:	edd2 7a00 	vldr	s15, [r2]
 80030b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030b8:	ee17 2a90 	vmov	r2, s15
 80030bc:	b211      	sxth	r1, r2
 80030be:	4a52      	ldr	r2, [pc, #328]	; (8003208 <ControllerState+0x1c8>)
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fe7d 	bl	8001dc0 <TrapezoidalTraj_PreCal>
				ControllerFinishedFollowFlag = 0;
 80030c6:	4b48      	ldr	r3, [pc, #288]	; (80031e8 <ControllerState+0x1a8>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
				state = Follow;
 80030cc:	4b45      	ldr	r3, [pc, #276]	; (80031e4 <ControllerState+0x1a4>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
			}
		break;
 80030d2:	e077      	b.n	80031c4 <ControllerState+0x184>

		case Follow:
			t_traj = t_traj + 1000;
 80030d4:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <ControllerState+0x1c4>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f512 707a 	adds.w	r0, r2, #1000	; 0x3e8
 80030de:	f143 0100 	adc.w	r1, r3, #0
 80030e2:	4b48      	ldr	r3, [pc, #288]	; (8003204 <ControllerState+0x1c4>)
 80030e4:	e9c3 0100 	strd	r0, r1, [r3]
			if (t_traj <= traj.t_total * 1000000)
 80030e8:	4b46      	ldr	r3, [pc, #280]	; (8003204 <ControllerState+0x1c4>)
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f7fd fe15 	bl	8000d20 <__aeabi_ul2f>
 80030f6:	ee06 0a90 	vmov	s13, r0
 80030fa:	4b43      	ldr	r3, [pc, #268]	; (8003208 <ControllerState+0x1c8>)
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800320c <ControllerState+0x1cc>
 8003104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003108:	eef4 6ae7 	vcmpe.f32	s13, s15
 800310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003110:	d817      	bhi.n	8003142 <ControllerState+0x102>
			{
				TrapezoidalTraj_GetState(Pi, Pf, &traj, t_traj);
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <ControllerState+0x1b8>)
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800311c:	ee17 3a90 	vmov	r3, s15
 8003120:	b218      	sxth	r0, r3
 8003122:	4b36      	ldr	r3, [pc, #216]	; (80031fc <ControllerState+0x1bc>)
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800312c:	ee17 3a90 	vmov	r3, s15
 8003130:	b219      	sxth	r1, r3
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <ControllerState+0x1c4>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	4613      	mov	r3, r2
 800313a:	4a33      	ldr	r2, [pc, #204]	; (8003208 <ControllerState+0x1c8>)
 800313c:	f7fe febc 	bl	8001eb8 <TrapezoidalTraj_GetState>
 8003140:	e003      	b.n	800314a <ControllerState+0x10a>
			}
			else
			{
				q_des = Pf;
 8003142:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <ControllerState+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a32      	ldr	r2, [pc, #200]	; (8003210 <ControllerState+0x1d0>)
 8003148:	6013      	str	r3, [r2, #0]
			}

			PositionControlVelocityForm(&Controller);
 800314a:	4832      	ldr	r0, [pc, #200]	; (8003214 <ControllerState+0x1d4>)
 800314c:	f7fd ffce 	bl	80010ec <PositionControlVelocityForm>
			MotorDrive(&htim1);
 8003150:	4827      	ldr	r0, [pc, #156]	; (80031f0 <ControllerState+0x1b0>)
 8003152:	f7fe f919 	bl	8001388 <MotorDrive>

			if (((t_traj > traj.t_total * 1000000) && (0.15 > fabs(q_des - QEIData.position))) || P_disallow || N_disallow)
 8003156:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <ControllerState+0x1c4>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	f7fd fdde 	bl	8000d20 <__aeabi_ul2f>
 8003164:	ee06 0a90 	vmov	s13, r0
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <ControllerState+0x1c8>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800320c <ControllerState+0x1cc>
 8003172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003176:	eef4 6ae7 	vcmpe.f32	s13, s15
 800317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317e:	dd15      	ble.n	80031ac <ControllerState+0x16c>
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <ControllerState+0x1d0>)
 8003182:	ed93 7a00 	vldr	s14, [r3]
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <ControllerState+0x1b4>)
 8003188:	edd3 7a03 	vldr	s15, [r3, #12]
 800318c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003190:	eef0 7ae7 	vabs.f32	s15, s15
 8003194:	ee17 0a90 	vmov	r0, s15
 8003198:	f7fd f982 	bl	80004a0 <__aeabi_f2d>
 800319c:	a30e      	add	r3, pc, #56	; (adr r3, 80031d8 <ControllerState+0x198>)
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f7fd fc47 	bl	8000a34 <__aeabi_dcmplt>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <ControllerState+0x17c>
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <ControllerState+0x1d8>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d103      	bne.n	80031bc <ControllerState+0x17c>
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <ControllerState+0x1dc>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <ControllerState+0x188>
			{
				state = Idle;
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <ControllerState+0x1a4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
			}
		break;
 80031c2:	e001      	b.n	80031c8 <ControllerState+0x188>
		break;
 80031c4:	bf00      	nop
 80031c6:	e000      	b.n	80031ca <ControllerState+0x18a>
		break;
 80031c8:	bf00      	nop
		}
		Pf_last = Pf;
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <ControllerState+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <ControllerState+0x1c0>)
 80031d0:	6013      	str	r3, [r2, #0]
	}
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	33333333 	.word	0x33333333
 80031dc:	3fc33333 	.word	0x3fc33333
 80031e0:	20000258 	.word	0x20000258
 80031e4:	20000dea 	.word	0x20000dea
 80031e8:	200007f8 	.word	0x200007f8
 80031ec:	200007f4 	.word	0x200007f4
 80031f0:	20000408 	.word	0x20000408
 80031f4:	200007e0 	.word	0x200007e0
 80031f8:	200007cc 	.word	0x200007cc
 80031fc:	200007d0 	.word	0x200007d0
 8003200:	200007d4 	.word	0x200007d4
 8003204:	200007b0 	.word	0x200007b0
 8003208:	200007c4 	.word	0x200007c4
 800320c:	49742400 	.word	0x49742400
 8003210:	200007b8 	.word	0x200007b8
 8003214:	200007fc 	.word	0x200007fc
 8003218:	20000808 	.word	0x20000808
 800321c:	20000809 	.word	0x20000809

08003220 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0)
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003230:	d10e      	bne.n	8003250 <HAL_GPIO_EXTI_Callback+0x30>
 8003232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003236:	4810      	ldr	r0, [pc, #64]	; (8003278 <HAL_GPIO_EXTI_Callback+0x58>)
 8003238:	f001 ff50 	bl	80050dc <HAL_GPIO_ReadPin>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_GPIO_EXTI_Callback+0x30>
    {
        emer_pushed = 0;
 8003242:	4b0e      	ldr	r3, [pc, #56]	; (800327c <HAL_GPIO_EXTI_Callback+0x5c>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8003248:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <HAL_GPIO_EXTI_Callback+0x60>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2200      	movs	r2, #0
 800324e:	635a      	str	r2, [r3, #52]	; 0x34
    }
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1)
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	d10a      	bne.n	800326e <HAL_GPIO_EXTI_Callback+0x4e>
 8003258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800325c:	4806      	ldr	r0, [pc, #24]	; (8003278 <HAL_GPIO_EXTI_Callback+0x58>)
 800325e:	f001 ff3d 	bl	80050dc <HAL_GPIO_ReadPin>
 8003262:	4603      	mov	r3, r0
 8003264:	2b01      	cmp	r3, #1
 8003266:	d102      	bne.n	800326e <HAL_GPIO_EXTI_Callback+0x4e>
    {
        emer_pushed = 1;
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_GPIO_EXTI_Callback+0x5c>)
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
    }
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40020400 	.word	0x40020400
 800327c:	20000259 	.word	0x20000259
 8003280:	20000408 	.word	0x20000408

08003284 <check_pe>:

void check_pe()
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
	// Photoelectric Sensor
	if(emer_pushed == 1){
 8003288:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <check_pe+0x44>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d118      	bne.n	80032c2 <check_pe+0x3e>
		pe1_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8003290:	2102      	movs	r1, #2
 8003292:	480e      	ldr	r0, [pc, #56]	; (80032cc <check_pe+0x48>)
 8003294:	f001 ff22 	bl	80050dc <HAL_GPIO_ReadPin>
 8003298:	4603      	mov	r3, r0
 800329a:	461a      	mov	r2, r3
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <check_pe+0x4c>)
 800329e:	701a      	strb	r2, [r3, #0]
		pe2_st = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 80032a0:	2104      	movs	r1, #4
 80032a2:	480a      	ldr	r0, [pc, #40]	; (80032cc <check_pe+0x48>)
 80032a4:	f001 ff1a 	bl	80050dc <HAL_GPIO_ReadPin>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <check_pe+0x50>)
 80032ae:	701a      	strb	r2, [r3, #0]
		pe3_st = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80032b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032b4:	4808      	ldr	r0, [pc, #32]	; (80032d8 <check_pe+0x54>)
 80032b6:	f001 ff11 	bl	80050dc <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <check_pe+0x58>)
 80032c0:	701a      	strb	r2, [r3, #0]
	}
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000259 	.word	0x20000259
 80032cc:	40020400 	.word	0x40020400
 80032d0:	2000080a 	.word	0x2000080a
 80032d4:	2000080b 	.word	0x2000080b
 80032d8:	40020000 	.word	0x40020000
 80032dc:	2000080c 	.word	0x2000080c

080032e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032e4:	b672      	cpsid	i
}
 80032e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <Error_Handler+0x8>
	...

080032ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	4b10      	ldr	r3, [pc, #64]	; (8003338 <HAL_MspInit+0x4c>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	4a0f      	ldr	r2, [pc, #60]	; (8003338 <HAL_MspInit+0x4c>)
 80032fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003300:	6453      	str	r3, [r2, #68]	; 0x44
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_MspInit+0x4c>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_MspInit+0x4c>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a08      	ldr	r2, [pc, #32]	; (8003338 <HAL_MspInit+0x4c>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_MspInit+0x4c>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800332a:	2007      	movs	r0, #7
 800332c:	f001 f902 	bl	8004534 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800

0800333c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	; 0x28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2f      	ldr	r2, [pc, #188]	; (8003418 <HAL_ADC_MspInit+0xdc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d157      	bne.n	800340e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_ADC_MspInit+0xe0>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	4a2d      	ldr	r2, [pc, #180]	; (800341c <HAL_ADC_MspInit+0xe0>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6453      	str	r3, [r2, #68]	; 0x44
 800336e:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_ADC_MspInit+0xe0>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_ADC_MspInit+0xe0>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a26      	ldr	r2, [pc, #152]	; (800341c <HAL_ADC_MspInit+0xe0>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_ADC_MspInit+0xe0>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003396:	2303      	movs	r3, #3
 8003398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800339a:	2303      	movs	r3, #3
 800339c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a2:	f107 0314 	add.w	r3, r7, #20
 80033a6:	4619      	mov	r1, r3
 80033a8:	481d      	ldr	r0, [pc, #116]	; (8003420 <HAL_ADC_MspInit+0xe4>)
 80033aa:	f001 fd13 	bl	8004dd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80033ae:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033b0:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <HAL_ADC_MspInit+0xec>)
 80033b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033ba:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033c0:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033c6:	4b17      	ldr	r3, [pc, #92]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033e6:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033ec:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033f2:	480c      	ldr	r0, [pc, #48]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 80033f4:	f001 f8e0 	bl	80045b8 <HAL_DMA_Init>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80033fe:	f7ff ff6f 	bl	80032e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a07      	ldr	r2, [pc, #28]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
 8003408:	4a06      	ldr	r2, [pc, #24]	; (8003424 <HAL_ADC_MspInit+0xe8>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800340e:	bf00      	nop
 8003410:	3728      	adds	r7, #40	; 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40012000 	.word	0x40012000
 800341c:	40023800 	.word	0x40023800
 8003420:	40020000 	.word	0x40020000
 8003424:	200003a8 	.word	0x200003a8
 8003428:	40026410 	.word	0x40026410

0800342c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2a      	ldr	r2, [pc, #168]	; (80034e4 <HAL_TIM_Base_MspInit+0xb8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d116      	bne.n	800346c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <HAL_TIM_Base_MspInit+0xbc>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <HAL_TIM_Base_MspInit+0xbc>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6453      	str	r3, [r2, #68]	; 0x44
 800344e:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <HAL_TIM_Base_MspInit+0xbc>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2100      	movs	r1, #0
 800345e:	201a      	movs	r0, #26
 8003460:	f001 f873 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003464:	201a      	movs	r0, #26
 8003466:	f001 f88c 	bl	8004582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800346a:	e036      	b.n	80034da <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1e      	ldr	r2, [pc, #120]	; (80034ec <HAL_TIM_Base_MspInit+0xc0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d116      	bne.n	80034a4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_TIM_Base_MspInit+0xbc>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <HAL_TIM_Base_MspInit+0xbc>)
 8003480:	f043 0308 	orr.w	r3, r3, #8
 8003484:	6413      	str	r3, [r2, #64]	; 0x40
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_TIM_Base_MspInit+0xbc>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	2100      	movs	r1, #0
 8003496:	2032      	movs	r0, #50	; 0x32
 8003498:	f001 f857 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800349c:	2032      	movs	r0, #50	; 0x32
 800349e:	f001 f870 	bl	8004582 <HAL_NVIC_EnableIRQ>
}
 80034a2:	e01a      	b.n	80034da <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <HAL_TIM_Base_MspInit+0xc4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d115      	bne.n	80034da <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_TIM_Base_MspInit+0xbc>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	4a0c      	ldr	r2, [pc, #48]	; (80034e8 <HAL_TIM_Base_MspInit+0xbc>)
 80034b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034bc:	6453      	str	r3, [r2, #68]	; 0x44
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_TIM_Base_MspInit+0xbc>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	201a      	movs	r0, #26
 80034d0:	f001 f83b 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80034d4:	201a      	movs	r0, #26
 80034d6:	f001 f854 	bl	8004582 <HAL_NVIC_EnableIRQ>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40000c00 	.word	0x40000c00
 80034f0:	40014800 	.word	0x40014800

080034f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <HAL_TIM_Encoder_MspInit+0x94>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d133      	bne.n	800357e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	4b1c      	ldr	r3, [pc, #112]	; (800358c <HAL_TIM_Encoder_MspInit+0x98>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_TIM_Encoder_MspInit+0x98>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_TIM_Encoder_MspInit+0x98>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <HAL_TIM_Encoder_MspInit+0x98>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a14      	ldr	r2, [pc, #80]	; (800358c <HAL_TIM_Encoder_MspInit+0x98>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_TIM_Encoder_MspInit+0x98>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800354e:	23c0      	movs	r3, #192	; 0xc0
 8003550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	2302      	movs	r3, #2
 8003554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800355e:	2302      	movs	r3, #2
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	4619      	mov	r1, r3
 8003568:	4809      	ldr	r0, [pc, #36]	; (8003590 <HAL_TIM_Encoder_MspInit+0x9c>)
 800356a:	f001 fc33 	bl	8004dd4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	201d      	movs	r0, #29
 8003574:	f000 ffe9 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003578:	201d      	movs	r0, #29
 800357a:	f001 f802 	bl	8004582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800357e:	bf00      	nop
 8003580:	3728      	adds	r7, #40	; 0x28
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40000400 	.word	0x40000400
 800358c:	40023800 	.word	0x40023800
 8003590:	40020000 	.word	0x40020000

08003594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a12      	ldr	r2, [pc, #72]	; (80035fc <HAL_TIM_MspPostInit+0x68>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d11e      	bne.n	80035f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_TIM_MspPostInit+0x6c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a10      	ldr	r2, [pc, #64]	; (8003600 <HAL_TIM_MspPostInit+0x6c>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_TIM_MspPostInit+0x6c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	4619      	mov	r1, r3
 80035ee:	4805      	ldr	r0, [pc, #20]	; (8003604 <HAL_TIM_MspPostInit+0x70>)
 80035f0:	f001 fbf0 	bl	8004dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80035f4:	bf00      	nop
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40010000 	.word	0x40010000
 8003600:	40023800 	.word	0x40023800
 8003604:	40020000 	.word	0x40020000

08003608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003610:	f107 0314 	add.w	r3, r7, #20
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a34      	ldr	r2, [pc, #208]	; (80036f8 <HAL_UART_MspInit+0xf0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d161      	bne.n	80036ee <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	4b33      	ldr	r3, [pc, #204]	; (80036fc <HAL_UART_MspInit+0xf4>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a32      	ldr	r2, [pc, #200]	; (80036fc <HAL_UART_MspInit+0xf4>)
 8003634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
 800363a:	4b30      	ldr	r3, [pc, #192]	; (80036fc <HAL_UART_MspInit+0xf4>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <HAL_UART_MspInit+0xf4>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a2b      	ldr	r2, [pc, #172]	; (80036fc <HAL_UART_MspInit+0xf4>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_UART_MspInit+0xf4>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003662:	230c      	movs	r3, #12
 8003664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366e:	2303      	movs	r3, #3
 8003670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003672:	2307      	movs	r3, #7
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003676:	f107 0314 	add.w	r3, r7, #20
 800367a:	4619      	mov	r1, r3
 800367c:	4820      	ldr	r0, [pc, #128]	; (8003700 <HAL_UART_MspInit+0xf8>)
 800367e:	f001 fba9 	bl	8004dd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_UART_MspInit+0xfc>)
 8003684:	4a20      	ldr	r2, [pc, #128]	; (8003708 <HAL_UART_MspInit+0x100>)
 8003686:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_UART_MspInit+0xfc>)
 800368a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800368e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003690:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_UART_MspInit+0xfc>)
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_UART_MspInit+0xfc>)
 8003698:	2200      	movs	r2, #0
 800369a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_UART_MspInit+0xfc>)
 800369e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_UART_MspInit+0xfc>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_UART_MspInit+0xfc>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <HAL_UART_MspInit+0xfc>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <HAL_UART_MspInit+0xfc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_UART_MspInit+0xfc>)
 80036be:	2200      	movs	r2, #0
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036c2:	4810      	ldr	r0, [pc, #64]	; (8003704 <HAL_UART_MspInit+0xfc>)
 80036c4:	f000 ff78 	bl	80045b8 <HAL_DMA_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80036ce:	f7ff fe07 	bl	80032e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a0b      	ldr	r2, [pc, #44]	; (8003704 <HAL_UART_MspInit+0xfc>)
 80036d6:	635a      	str	r2, [r3, #52]	; 0x34
 80036d8:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <HAL_UART_MspInit+0xfc>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036de:	2200      	movs	r2, #0
 80036e0:	2100      	movs	r1, #0
 80036e2:	2026      	movs	r0, #38	; 0x26
 80036e4:	f000 ff31 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036e8:	2026      	movs	r0, #38	; 0x26
 80036ea:	f000 ff4a 	bl	8004582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036ee:	bf00      	nop
 80036f0:	3728      	adds	r7, #40	; 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40004400 	.word	0x40004400
 80036fc:	40023800 	.word	0x40023800
 8003700:	40020000 	.word	0x40020000
 8003704:	2000074c 	.word	0x2000074c
 8003708:	400260a0 	.word	0x400260a0

0800370c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003710:	e7fe      	b.n	8003710 <NMI_Handler+0x4>

08003712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003716:	e7fe      	b.n	8003716 <HardFault_Handler+0x4>

08003718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800371c:	e7fe      	b.n	800371c <MemManage_Handler+0x4>

0800371e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003722:	e7fe      	b.n	8003722 <BusFault_Handler+0x4>

08003724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003728:	e7fe      	b.n	8003728 <UsageFault_Handler+0x4>

0800372a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003758:	f000 f9fa 	bl	8003b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800375c:	bf00      	nop
 800375e:	bd80      	pop	{r7, pc}

08003760 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003764:	2002      	movs	r0, #2
 8003766:	f001 fceb 	bl	8005140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}

0800376e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003772:	2004      	movs	r0, #4
 8003774:	f001 fce4 	bl	8005140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}

0800377c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003780:	4802      	ldr	r0, [pc, #8]	; (800378c <DMA1_Stream6_IRQHandler+0x10>)
 8003782:	f001 f8b1 	bl	80048e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	2000074c 	.word	0x2000074c

08003790 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003794:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003798:	f001 fcd2 	bl	8005140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}

080037a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037a4:	4803      	ldr	r0, [pc, #12]	; (80037b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80037a6:	f002 fdb7 	bl	8006318 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80037aa:	4803      	ldr	r0, [pc, #12]	; (80037b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80037ac:	f002 fdb4 	bl	8006318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000408 	.word	0x20000408
 80037b8:	20000624 	.word	0x20000624

080037bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <TIM3_IRQHandler+0x10>)
 80037c2:	f002 fda9 	bl	8006318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200004bc 	.word	0x200004bc

080037d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <USART2_IRQHandler+0x10>)
 80037d6:	f004 f8a7 	bl	8007928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200006d8 	.word	0x200006d8

080037e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80037e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80037ec:	f001 fca8 	bl	8005140 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80037f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037f4:	f001 fca4 	bl	8005140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}

080037fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <TIM5_IRQHandler+0x10>)
 8003802:	f002 fd89 	bl	8006318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000570 	.word	0x20000570

08003810 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <DMA2_Stream0_IRQHandler+0x10>)
 8003816:	f001 f867 	bl	80048e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200003a8 	.word	0x200003a8

08003824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <SystemInit+0x20>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <SystemInit+0x20>)
 8003830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003880 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800384c:	480d      	ldr	r0, [pc, #52]	; (8003884 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800384e:	490e      	ldr	r1, [pc, #56]	; (8003888 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003850:	4a0e      	ldr	r2, [pc, #56]	; (800388c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003854:	e002      	b.n	800385c <LoopCopyDataInit>

08003856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800385a:	3304      	adds	r3, #4

0800385c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800385c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800385e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003860:	d3f9      	bcc.n	8003856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003862:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003864:	4c0b      	ldr	r4, [pc, #44]	; (8003894 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003868:	e001      	b.n	800386e <LoopFillZerobss>

0800386a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800386a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800386c:	3204      	adds	r2, #4

0800386e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800386e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003870:	d3fb      	bcc.n	800386a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003872:	f7ff ffd7 	bl	8003824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003876:	f005 f8a3 	bl	80089c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800387a:	f7fe ff93 	bl	80027a4 <main>
  bx  lr    
 800387e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003888:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 800388c:	0800a148 	.word	0x0800a148
  ldr r2, =_sbss
 8003890:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8003894:	20000df0 	.word	0x20000df0

08003898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003898:	e7fe      	b.n	8003898 <ADC_IRQHandler>
	...

0800389c <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 800389c:	b480      	push	{r7}
 800389e:	b08b      	sub	sp, #44	; 0x2c
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80038a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80038aa:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800399c <arm_cos_f32+0x100>
 80038ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038b2:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80038b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038ba:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80038be:	edd7 7a06 	vldr	s15, [r7, #24]
 80038c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c6:	ee17 3a90 	vmov	r3, s15
 80038ca:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80038cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80038d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d8:	d502      	bpl.n	80038e0 <arm_cos_f32+0x44>
  {
    n--;
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	3b01      	subs	r3, #1
 80038de:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80038ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038f2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80038f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80038fa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80039a0 <arm_cos_f32+0x104>
 80038fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003902:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8003906:	edd7 7a07 	vldr	s15, [r7, #28]
 800390a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800390e:	ee17 3a90 	vmov	r3, s15
 8003912:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8003914:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391a:	d309      	bcc.n	8003930 <arm_cos_f32+0x94>
    index = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003920:	edd7 7a07 	vldr	s15, [r7, #28]
 8003924:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80039a0 <arm_cos_f32+0x104>
 8003928:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800392c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	ed97 7a07 	vldr	s14, [r7, #28]
 800393e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003942:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8003946:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <arm_cos_f32+0x108>)
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003954:	3301      	adds	r3, #1
 8003956:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <arm_cos_f32+0x108>)
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8003960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003964:	edd7 7a05 	vldr	s15, [r7, #20]
 8003968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800396c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003974:	edd7 6a05 	vldr	s13, [r7, #20]
 8003978:	edd7 7a03 	vldr	s15, [r7, #12]
 800397c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003984:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	ee07 3a90 	vmov	s15, r3
}
 800398e:	eeb0 0a67 	vmov.f32	s0, s15
 8003992:	372c      	adds	r7, #44	; 0x2c
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	3e22f983 	.word	0x3e22f983
 80039a0:	44000000 	.word	0x44000000
 80039a4:	080098f8 	.word	0x080098f8

080039a8 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b08b      	sub	sp, #44	; 0x2c
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80039b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003aa0 <arm_sin_f32+0xf8>
 80039ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039be:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80039c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80039c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039ca:	ee17 3a90 	vmov	r3, s15
 80039ce:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80039d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80039d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039dc:	d502      	bpl.n	80039e4 <arm_sin_f32+0x3c>
  {
    n--;
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80039f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80039fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80039fe:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003aa4 <arm_sin_f32+0xfc>
 8003a02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a06:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8003a0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a12:	ee17 3a90 	vmov	r3, s15
 8003a16:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8003a18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1e:	d309      	bcc.n	8003a34 <arm_sin_f32+0x8c>
    index = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003a24:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a28:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003aa4 <arm_sin_f32+0xfc>
 8003a2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a30:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003a34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a46:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8003a4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <arm_sin_f32+0x100>)
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <arm_sin_f32+0x100>)
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8003a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a68:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a70:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a78:	edd7 6a05 	vldr	s13, [r7, #20]
 8003a7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a88:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	ee07 3a90 	vmov	s15, r3
}
 8003a92:	eeb0 0a67 	vmov.f32	s0, s15
 8003a96:	372c      	adds	r7, #44	; 0x2c
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	3e22f983 	.word	0x3e22f983
 8003aa4:	44000000 	.word	0x44000000
 8003aa8:	080098f8 	.word	0x080098f8

08003aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <HAL_Init+0x40>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <HAL_Init+0x40>)
 8003ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_Init+0x40>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <HAL_Init+0x40>)
 8003ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ac8:	4b08      	ldr	r3, [pc, #32]	; (8003aec <HAL_Init+0x40>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a07      	ldr	r2, [pc, #28]	; (8003aec <HAL_Init+0x40>)
 8003ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ad4:	2003      	movs	r0, #3
 8003ad6:	f000 fd2d 	bl	8004534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ada:	2000      	movs	r0, #0
 8003adc:	f000 f808 	bl	8003af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae0:	f7ff fc04 	bl	80032ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023c00 	.word	0x40023c00

08003af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_InitTick+0x54>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_InitTick+0x58>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	4619      	mov	r1, r3
 8003b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fd45 	bl	800459e <HAL_SYSTICK_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e00e      	b.n	8003b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b0f      	cmp	r3, #15
 8003b22:	d80a      	bhi.n	8003b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b24:	2200      	movs	r2, #0
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2c:	f000 fd0d 	bl	800454a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b30:	4a06      	ldr	r2, [pc, #24]	; (8003b4c <HAL_InitTick+0x5c>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e000      	b.n	8003b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000264 	.word	0x20000264
 8003b48:	2000026c 	.word	0x2000026c
 8003b4c:	20000268 	.word	0x20000268

08003b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_IncTick+0x20>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_IncTick+0x24>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4413      	add	r3, r2
 8003b60:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <HAL_IncTick+0x24>)
 8003b62:	6013      	str	r3, [r2, #0]
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	2000026c 	.word	0x2000026c
 8003b74:	20000dec 	.word	0x20000dec

08003b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <HAL_GetTick+0x14>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000dec 	.word	0x20000dec

08003b90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e033      	b.n	8003c0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fbc4 	bl	800333c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d118      	bne.n	8003c00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bd6:	f023 0302 	bic.w	r3, r3, #2
 8003bda:	f043 0202 	orr.w	r2, r3, #2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fa58 	bl	8004098 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8003bfe:	e001      	b.n	8003c04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_ADC_Start_DMA+0x1e>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e0ce      	b.n	8003dd4 <HAL_ADC_Start_DMA+0x1bc>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d018      	beq.n	8003c7e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c5c:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <HAL_ADC_Start_DMA+0x1c4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a5f      	ldr	r2, [pc, #380]	; (8003de0 <HAL_ADC_Start_DMA+0x1c8>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	0c9a      	lsrs	r2, r3, #18
 8003c68:	4613      	mov	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c70:	e002      	b.n	8003c78 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f9      	bne.n	8003c72 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8c:	d107      	bne.n	8003c9e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	f040 8086 	bne.w	8003dba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cd8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cec:	d106      	bne.n	8003cfc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f023 0206 	bic.w	r2, r3, #6
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
 8003cfa:	e002      	b.n	8003d02 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d0a:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <HAL_ADC_Start_DMA+0x1cc>)
 8003d0c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	4a35      	ldr	r2, [pc, #212]	; (8003de8 <HAL_ADC_Start_DMA+0x1d0>)
 8003d14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	4a34      	ldr	r2, [pc, #208]	; (8003dec <HAL_ADC_Start_DMA+0x1d4>)
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	4a33      	ldr	r2, [pc, #204]	; (8003df0 <HAL_ADC_Start_DMA+0x1d8>)
 8003d24:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d3e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	334c      	adds	r3, #76	; 0x4c
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f000 fcd8 	bl	8004714 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10f      	bne.n	8003d90 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d129      	bne.n	8003dd2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d8c:	609a      	str	r2, [r3, #8]
 8003d8e:	e020      	b.n	8003dd2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <HAL_ADC_Start_DMA+0x1dc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d11b      	bne.n	8003dd2 <HAL_ADC_Start_DMA+0x1ba>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d114      	bne.n	8003dd2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	e00b      	b.n	8003dd2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f043 0210 	orr.w	r2, r3, #16
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20000264 	.word	0x20000264
 8003de0:	431bde83 	.word	0x431bde83
 8003de4:	40012300 	.word	0x40012300
 8003de8:	08004291 	.word	0x08004291
 8003dec:	0800434b 	.word	0x0800434b
 8003df0:	08004367 	.word	0x08004367
 8003df4:	40012000 	.word	0x40012000

08003df8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x1c>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e113      	b.n	8004078 <HAL_ADC_ConfigChannel+0x244>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b09      	cmp	r3, #9
 8003e5e:	d925      	bls.n	8003eac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68d9      	ldr	r1, [r3, #12]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	3b1e      	subs	r3, #30
 8003e76:	2207      	movs	r2, #7
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	400a      	ands	r2, r1
 8003e84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68d9      	ldr	r1, [r3, #12]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	4618      	mov	r0, r3
 8003e98:	4603      	mov	r3, r0
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4403      	add	r3, r0
 8003e9e:	3b1e      	subs	r3, #30
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	e022      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6919      	ldr	r1, [r3, #16]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4613      	mov	r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4413      	add	r3, r2
 8003ec0:	2207      	movs	r2, #7
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	400a      	ands	r2, r1
 8003ece:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6919      	ldr	r1, [r3, #16]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4403      	add	r3, r0
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d824      	bhi.n	8003f44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b05      	subs	r3, #5
 8003f0c:	221f      	movs	r2, #31
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43da      	mvns	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	400a      	ands	r2, r1
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	4618      	mov	r0, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3b05      	subs	r3, #5
 8003f36:	fa00 f203 	lsl.w	r2, r0, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34
 8003f42:	e04c      	b.n	8003fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	d824      	bhi.n	8003f96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3b23      	subs	r3, #35	; 0x23
 8003f5e:	221f      	movs	r2, #31
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43da      	mvns	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	3b23      	subs	r3, #35	; 0x23
 8003f88:	fa00 f203 	lsl.w	r2, r0, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
 8003f94:	e023      	b.n	8003fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3b41      	subs	r3, #65	; 0x41
 8003fa8:	221f      	movs	r2, #31
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	3b41      	subs	r3, #65	; 0x41
 8003fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <HAL_ADC_ConfigChannel+0x250>)
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a28      	ldr	r2, [pc, #160]	; (8004088 <HAL_ADC_ConfigChannel+0x254>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10f      	bne.n	800400c <HAL_ADC_ConfigChannel+0x1d8>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b12      	cmp	r3, #18
 8003ff2:	d10b      	bne.n	800400c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_ADC_ConfigChannel+0x254>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d12b      	bne.n	800406e <HAL_ADC_ConfigChannel+0x23a>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1c      	ldr	r2, [pc, #112]	; (800408c <HAL_ADC_ConfigChannel+0x258>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d003      	beq.n	8004028 <HAL_ADC_ConfigChannel+0x1f4>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b11      	cmp	r3, #17
 8004026:	d122      	bne.n	800406e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a11      	ldr	r2, [pc, #68]	; (800408c <HAL_ADC_ConfigChannel+0x258>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d111      	bne.n	800406e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800404a:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_ADC_ConfigChannel+0x25c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a11      	ldr	r2, [pc, #68]	; (8004094 <HAL_ADC_ConfigChannel+0x260>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	0c9a      	lsrs	r2, r3, #18
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004060:	e002      	b.n	8004068 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3b01      	subs	r3, #1
 8004066:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f9      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012300 	.word	0x40012300
 8004088:	40012000 	.word	0x40012000
 800408c:	10000012 	.word	0x10000012
 8004090:	20000264 	.word	0x20000264
 8004094:	431bde83 	.word	0x431bde83

08004098 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040a0:	4b79      	ldr	r3, [pc, #484]	; (8004288 <ADC_Init+0x1f0>)
 80040a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	021a      	lsls	r2, r3, #8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6899      	ldr	r1, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	4a58      	ldr	r2, [pc, #352]	; (800428c <ADC_Init+0x1f4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800413e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6899      	ldr	r1, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6899      	ldr	r1, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	e00f      	b.n	8004196 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004184:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004194:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0202 	bic.w	r2, r2, #2
 80041a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6899      	ldr	r1, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	7e1b      	ldrb	r3, [r3, #24]
 80041b0:	005a      	lsls	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01b      	beq.n	80041fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	3b01      	subs	r3, #1
 80041f0:	035a      	lsls	r2, r3, #13
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	e007      	b.n	800420c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800420a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	3b01      	subs	r3, #1
 8004228:	051a      	lsls	r2, r3, #20
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6899      	ldr	r1, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800424e:	025a      	lsls	r2, r3, #9
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6899      	ldr	r1, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	029a      	lsls	r2, r3, #10
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40012300 	.word	0x40012300
 800428c:	0f000001 	.word	0x0f000001

08004290 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d13c      	bne.n	8004324 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d12b      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d127      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d119      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0220 	bic.w	r2, r2, #32
 80042f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	f043 0201 	orr.w	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff fd6b 	bl	8003df8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004322:	e00e      	b.n	8004342 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fd75 	bl	8003e20 <HAL_ADC_ErrorCallback>
}
 8004336:	e004      	b.n	8004342 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff fd57 	bl	8003e0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2240      	movs	r2, #64	; 0x40
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f043 0204 	orr.w	r2, r3, #4
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff fd4a 	bl	8003e20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043b0:	4013      	ands	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043c6:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	60d3      	str	r3, [r2, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <__NVIC_GetPriorityGrouping+0x18>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 0307 	and.w	r3, r3, #7
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	2b00      	cmp	r3, #0
 8004408:	db0b      	blt.n	8004422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	f003 021f 	and.w	r2, r3, #31
 8004410:	4907      	ldr	r1, [pc, #28]	; (8004430 <__NVIC_EnableIRQ+0x38>)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2001      	movs	r0, #1
 800441a:	fa00 f202 	lsl.w	r2, r0, r2
 800441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e000e100 	.word	0xe000e100

08004434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	6039      	str	r1, [r7, #0]
 800443e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004444:	2b00      	cmp	r3, #0
 8004446:	db0a      	blt.n	800445e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	490c      	ldr	r1, [pc, #48]	; (8004480 <__NVIC_SetPriority+0x4c>)
 800444e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004452:	0112      	lsls	r2, r2, #4
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	440b      	add	r3, r1
 8004458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800445c:	e00a      	b.n	8004474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	4908      	ldr	r1, [pc, #32]	; (8004484 <__NVIC_SetPriority+0x50>)
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	3b04      	subs	r3, #4
 800446c:	0112      	lsls	r2, r2, #4
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	440b      	add	r3, r1
 8004472:	761a      	strb	r2, [r3, #24]
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000e100 	.word	0xe000e100
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f1c3 0307 	rsb	r3, r3, #7
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	bf28      	it	cs
 80044a6:	2304      	movcs	r3, #4
 80044a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3304      	adds	r3, #4
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d902      	bls.n	80044b8 <NVIC_EncodePriority+0x30>
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3b03      	subs	r3, #3
 80044b6:	e000      	b.n	80044ba <NVIC_EncodePriority+0x32>
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43da      	mvns	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	401a      	ands	r2, r3
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044d0:	f04f 31ff 	mov.w	r1, #4294967295
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	43d9      	mvns	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e0:	4313      	orrs	r3, r2
         );
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004500:	d301      	bcc.n	8004506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004502:	2301      	movs	r3, #1
 8004504:	e00f      	b.n	8004526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004506:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <SysTick_Config+0x40>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800450e:	210f      	movs	r1, #15
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	f7ff ff8e 	bl	8004434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <SysTick_Config+0x40>)
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <SysTick_Config+0x40>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010

08004534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff29 	bl	8004394 <__NVIC_SetPriorityGrouping>
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800454a:	b580      	push	{r7, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	af00      	add	r7, sp, #0
 8004550:	4603      	mov	r3, r0
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800455c:	f7ff ff3e 	bl	80043dc <__NVIC_GetPriorityGrouping>
 8004560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f7ff ff8e 	bl	8004488 <NVIC_EncodePriority>
 800456c:	4602      	mov	r2, r0
 800456e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff5d 	bl	8004434 <__NVIC_SetPriority>
}
 800457a:	bf00      	nop
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	4603      	mov	r3, r0
 800458a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800458c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff31 	bl	80043f8 <__NVIC_EnableIRQ>
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff ffa2 	bl	80044f0 <SysTick_Config>
 80045ac:	4603      	mov	r3, r0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff fad8 	bl	8003b78 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e099      	b.n	8004708 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045f4:	e00f      	b.n	8004616 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045f6:	f7ff fabf 	bl	8003b78 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b05      	cmp	r3, #5
 8004602:	d908      	bls.n	8004616 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2203      	movs	r2, #3
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e078      	b.n	8004708 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e8      	bne.n	80045f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4b38      	ldr	r3, [pc, #224]	; (8004710 <HAL_DMA_Init+0x158>)
 8004630:	4013      	ands	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004642:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800464e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800465a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	2b04      	cmp	r3, #4
 800466e:	d107      	bne.n	8004680 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	4313      	orrs	r3, r2
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 0307 	bic.w	r3, r3, #7
 8004696:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d117      	bne.n	80046da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fb0d 	bl	8004cdc <DMA_CheckFifoParam>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2240      	movs	r2, #64	; 0x40
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046d6:	2301      	movs	r3, #1
 80046d8:	e016      	b.n	8004708 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fac4 	bl	8004c70 <DMA_CalcBaseAndBitshift>
 80046e8:	4603      	mov	r3, r0
 80046ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	223f      	movs	r2, #63	; 0x3f
 80046f2:	409a      	lsls	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	f010803f 	.word	0xf010803f

08004714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_DMA_Start_IT+0x26>
 8004736:	2302      	movs	r3, #2
 8004738:	e040      	b.n	80047bc <HAL_DMA_Start_IT+0xa8>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d12f      	bne.n	80047ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2202      	movs	r2, #2
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fa56 	bl	8004c14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476c:	223f      	movs	r2, #63	; 0x3f
 800476e:	409a      	lsls	r2, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0216 	orr.w	r2, r2, #22
 8004782:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0208 	orr.w	r2, r2, #8
 800479a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e005      	b.n	80047ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
 80047b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047d2:	f7ff f9d1 	bl	8003b78 <HAL_GetTick>
 80047d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d008      	beq.n	80047f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e052      	b.n	800489c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0216 	bic.w	r2, r2, #22
 8004804:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695a      	ldr	r2, [r3, #20]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004814:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <HAL_DMA_Abort+0x62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0208 	bic.w	r2, r2, #8
 8004834:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004846:	e013      	b.n	8004870 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004848:	f7ff f996 	bl	8003b78 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b05      	cmp	r3, #5
 8004854:	d90c      	bls.n	8004870 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2203      	movs	r2, #3
 8004860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e015      	b.n	800489c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e4      	bne.n	8004848 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004882:	223f      	movs	r2, #63	; 0x3f
 8004884:	409a      	lsls	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d004      	beq.n	80048c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2280      	movs	r2, #128	; 0x80
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e00c      	b.n	80048dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2205      	movs	r2, #5
 80048c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048f4:	4b8e      	ldr	r3, [pc, #568]	; (8004b30 <HAL_DMA_IRQHandler+0x248>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a8e      	ldr	r2, [pc, #568]	; (8004b34 <HAL_DMA_IRQHandler+0x24c>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	0a9b      	lsrs	r3, r3, #10
 8004900:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004906:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004912:	2208      	movs	r2, #8
 8004914:	409a      	lsls	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01a      	beq.n	8004954 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d013      	beq.n	8004954 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0204 	bic.w	r2, r2, #4
 800493a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	2208      	movs	r2, #8
 8004942:	409a      	lsls	r2, r3
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	f043 0201 	orr.w	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004958:	2201      	movs	r2, #1
 800495a:	409a      	lsls	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d012      	beq.n	800498a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004976:	2201      	movs	r2, #1
 8004978:	409a      	lsls	r2, r3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	f043 0202 	orr.w	r2, r3, #2
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	2204      	movs	r2, #4
 8004990:	409a      	lsls	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4013      	ands	r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d012      	beq.n	80049c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00b      	beq.n	80049c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ac:	2204      	movs	r2, #4
 80049ae:	409a      	lsls	r2, r3
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	f043 0204 	orr.w	r2, r3, #4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c4:	2210      	movs	r2, #16
 80049c6:	409a      	lsls	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d043      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d03c      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	2210      	movs	r2, #16
 80049e4:	409a      	lsls	r2, r3
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d018      	beq.n	8004a2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d108      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d024      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
 8004a16:	e01f      	b.n	8004a58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01b      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
 8004a28:	e016      	b.n	8004a58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d107      	bne.n	8004a48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0208 	bic.w	r2, r2, #8
 8004a46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 808f 	beq.w	8004b88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8087 	beq.w	8004b88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7e:	2220      	movs	r2, #32
 8004a80:	409a      	lsls	r2, r3
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b05      	cmp	r3, #5
 8004a90:	d136      	bne.n	8004b00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0216 	bic.w	r2, r2, #22
 8004aa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ab0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <HAL_DMA_IRQHandler+0x1da>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0208 	bic.w	r2, r2, #8
 8004ad0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad6:	223f      	movs	r2, #63	; 0x3f
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d07e      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	4798      	blx	r3
        }
        return;
 8004afe:	e079      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01d      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10d      	bne.n	8004b38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d031      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
 8004b2c:	e02c      	b.n	8004b88 <HAL_DMA_IRQHandler+0x2a0>
 8004b2e:	bf00      	nop
 8004b30:	20000264 	.word	0x20000264
 8004b34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d023      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	4798      	blx	r3
 8004b48:	e01e      	b.n	8004b88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10f      	bne.n	8004b78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0210 	bic.w	r2, r2, #16
 8004b66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d032      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d022      	beq.n	8004be2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2205      	movs	r2, #5
 8004ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d307      	bcc.n	8004bd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f2      	bne.n	8004bb4 <HAL_DMA_IRQHandler+0x2cc>
 8004bce:	e000      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004bd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
 8004bf2:	e000      	b.n	8004bf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004bf4:	bf00      	nop
    }
  }
}
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d108      	bne.n	8004c54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c52:	e007      	b.n	8004c64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	60da      	str	r2, [r3, #12]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	3b10      	subs	r3, #16
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <DMA_CalcBaseAndBitshift+0x64>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d909      	bls.n	8004cb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	1d1a      	adds	r2, r3, #4
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	659a      	str	r2, [r3, #88]	; 0x58
 8004cb0:	e007      	b.n	8004cc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	aaaaaaab 	.word	0xaaaaaaab
 8004cd8:	0800a0fc 	.word	0x0800a0fc

08004cdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11f      	bne.n	8004d36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d856      	bhi.n	8004daa <DMA_CheckFifoParam+0xce>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <DMA_CheckFifoParam+0x28>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d27 	.word	0x08004d27
 8004d0c:	08004d15 	.word	0x08004d15
 8004d10:	08004dab 	.word	0x08004dab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d046      	beq.n	8004dae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d24:	e043      	b.n	8004dae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d2e:	d140      	bne.n	8004db2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d34:	e03d      	b.n	8004db2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3e:	d121      	bne.n	8004d84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d837      	bhi.n	8004db6 <DMA_CheckFifoParam+0xda>
 8004d46:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <DMA_CheckFifoParam+0x70>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d5d 	.word	0x08004d5d
 8004d50:	08004d63 	.word	0x08004d63
 8004d54:	08004d5d 	.word	0x08004d5d
 8004d58:	08004d75 	.word	0x08004d75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	e030      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d025      	beq.n	8004dba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d72:	e022      	b.n	8004dba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d7c:	d11f      	bne.n	8004dbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d82:	e01c      	b.n	8004dbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d903      	bls.n	8004d92 <DMA_CheckFifoParam+0xb6>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d003      	beq.n	8004d98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d90:	e018      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	73fb      	strb	r3, [r7, #15]
      break;
 8004d96:	e015      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00e      	beq.n	8004dc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      break;
 8004da8:	e00b      	b.n	8004dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8004daa:	bf00      	nop
 8004dac:	e00a      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dae:	bf00      	nop
 8004db0:	e008      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004db2:	bf00      	nop
 8004db4:	e006      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004db6:	bf00      	nop
 8004db8:	e004      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e002      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dbe:	bf00      	nop
 8004dc0:	e000      	b.n	8004dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004dc2:	bf00      	nop
    }
  } 
  
  return status; 
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop

08004dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b089      	sub	sp, #36	; 0x24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
 8004dee:	e159      	b.n	80050a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004df0:	2201      	movs	r2, #1
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4013      	ands	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	f040 8148 	bne.w	800509e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d005      	beq.n	8004e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d130      	bne.n	8004e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	2203      	movs	r2, #3
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 0201 	and.w	r2, r3, #1
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d017      	beq.n	8004ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	2203      	movs	r2, #3
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d123      	bne.n	8004f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	08da      	lsrs	r2, r3, #3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3208      	adds	r2, #8
 8004ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	220f      	movs	r2, #15
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	08da      	lsrs	r2, r3, #3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3208      	adds	r2, #8
 8004f12:	69b9      	ldr	r1, [r7, #24]
 8004f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	2203      	movs	r2, #3
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0203 	and.w	r2, r3, #3
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80a2 	beq.w	800509e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	4b57      	ldr	r3, [pc, #348]	; (80050bc <HAL_GPIO_Init+0x2e8>)
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	4a56      	ldr	r2, [pc, #344]	; (80050bc <HAL_GPIO_Init+0x2e8>)
 8004f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f68:	6453      	str	r3, [r2, #68]	; 0x44
 8004f6a:	4b54      	ldr	r3, [pc, #336]	; (80050bc <HAL_GPIO_Init+0x2e8>)
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f76:	4a52      	ldr	r2, [pc, #328]	; (80050c0 <HAL_GPIO_Init+0x2ec>)
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a49      	ldr	r2, [pc, #292]	; (80050c4 <HAL_GPIO_Init+0x2f0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d019      	beq.n	8004fd6 <HAL_GPIO_Init+0x202>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a48      	ldr	r2, [pc, #288]	; (80050c8 <HAL_GPIO_Init+0x2f4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_GPIO_Init+0x1fe>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a47      	ldr	r2, [pc, #284]	; (80050cc <HAL_GPIO_Init+0x2f8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00d      	beq.n	8004fce <HAL_GPIO_Init+0x1fa>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a46      	ldr	r2, [pc, #280]	; (80050d0 <HAL_GPIO_Init+0x2fc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <HAL_GPIO_Init+0x1f6>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a45      	ldr	r2, [pc, #276]	; (80050d4 <HAL_GPIO_Init+0x300>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_GPIO_Init+0x1f2>
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	e008      	b.n	8004fd8 <HAL_GPIO_Init+0x204>
 8004fc6:	2307      	movs	r3, #7
 8004fc8:	e006      	b.n	8004fd8 <HAL_GPIO_Init+0x204>
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e004      	b.n	8004fd8 <HAL_GPIO_Init+0x204>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e002      	b.n	8004fd8 <HAL_GPIO_Init+0x204>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_GPIO_Init+0x204>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	f002 0203 	and.w	r2, r2, #3
 8004fde:	0092      	lsls	r2, r2, #2
 8004fe0:	4093      	lsls	r3, r2
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fe8:	4935      	ldr	r1, [pc, #212]	; (80050c0 <HAL_GPIO_Init+0x2ec>)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	089b      	lsrs	r3, r3, #2
 8004fee:	3302      	adds	r3, #2
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ff6:	4b38      	ldr	r3, [pc, #224]	; (80050d8 <HAL_GPIO_Init+0x304>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800501a:	4a2f      	ldr	r2, [pc, #188]	; (80050d8 <HAL_GPIO_Init+0x304>)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005020:	4b2d      	ldr	r3, [pc, #180]	; (80050d8 <HAL_GPIO_Init+0x304>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005044:	4a24      	ldr	r2, [pc, #144]	; (80050d8 <HAL_GPIO_Init+0x304>)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800504a:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <HAL_GPIO_Init+0x304>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	43db      	mvns	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4013      	ands	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800506e:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <HAL_GPIO_Init+0x304>)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005074:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <HAL_GPIO_Init+0x304>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005098:	4a0f      	ldr	r2, [pc, #60]	; (80050d8 <HAL_GPIO_Init+0x304>)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	3301      	adds	r3, #1
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	f67f aea2 	bls.w	8004df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	3724      	adds	r7, #36	; 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800
 80050c0:	40013800 	.word	0x40013800
 80050c4:	40020000 	.word	0x40020000
 80050c8:	40020400 	.word	0x40020400
 80050cc:	40020800 	.word	0x40020800
 80050d0:	40020c00 	.word	0x40020c00
 80050d4:	40021000 	.word	0x40021000
 80050d8:	40013c00 	.word	0x40013c00

080050dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	887b      	ldrh	r3, [r7, #2]
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
 80050f8:	e001      	b.n	80050fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	807b      	strh	r3, [r7, #2]
 8005118:	4613      	mov	r3, r2
 800511a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800511c:	787b      	ldrb	r3, [r7, #1]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005122:	887a      	ldrh	r2, [r7, #2]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005128:	e003      	b.n	8005132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800512a:	887b      	ldrh	r3, [r7, #2]
 800512c:	041a      	lsls	r2, r3, #16
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	619a      	str	r2, [r3, #24]
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800514a:	4b08      	ldr	r3, [pc, #32]	; (800516c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d006      	beq.n	8005164 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005156:	4a05      	ldr	r2, [pc, #20]	; (800516c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe f85e 	bl	8003220 <HAL_GPIO_EXTI_Callback>
  }
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40013c00 	.word	0x40013c00

08005170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e267      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d075      	beq.n	800527a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800518e:	4b88      	ldr	r3, [pc, #544]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b04      	cmp	r3, #4
 8005198:	d00c      	beq.n	80051b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800519a:	4b85      	ldr	r3, [pc, #532]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d112      	bne.n	80051cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051a6:	4b82      	ldr	r3, [pc, #520]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b2:	d10b      	bne.n	80051cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b4:	4b7e      	ldr	r3, [pc, #504]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d05b      	beq.n	8005278 <HAL_RCC_OscConfig+0x108>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d157      	bne.n	8005278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e242      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d106      	bne.n	80051e4 <HAL_RCC_OscConfig+0x74>
 80051d6:	4b76      	ldr	r3, [pc, #472]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a75      	ldr	r2, [pc, #468]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80051dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e01d      	b.n	8005220 <HAL_RCC_OscConfig+0xb0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051ec:	d10c      	bne.n	8005208 <HAL_RCC_OscConfig+0x98>
 80051ee:	4b70      	ldr	r3, [pc, #448]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a6f      	ldr	r2, [pc, #444]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80051f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	4b6d      	ldr	r3, [pc, #436]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a6c      	ldr	r2, [pc, #432]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 8005200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e00b      	b.n	8005220 <HAL_RCC_OscConfig+0xb0>
 8005208:	4b69      	ldr	r3, [pc, #420]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a68      	ldr	r2, [pc, #416]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 800520e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	4b66      	ldr	r3, [pc, #408]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a65      	ldr	r2, [pc, #404]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 800521a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800521e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d013      	beq.n	8005250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005228:	f7fe fca6 	bl	8003b78 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005230:	f7fe fca2 	bl	8003b78 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b64      	cmp	r3, #100	; 0x64
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e207      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005242:	4b5b      	ldr	r3, [pc, #364]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0xc0>
 800524e:	e014      	b.n	800527a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7fe fc92 	bl	8003b78 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005258:	f7fe fc8e 	bl	8003b78 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b64      	cmp	r3, #100	; 0x64
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e1f3      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800526a:	4b51      	ldr	r3, [pc, #324]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0xe8>
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d063      	beq.n	800534e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005286:	4b4a      	ldr	r3, [pc, #296]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00b      	beq.n	80052aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005292:	4b47      	ldr	r3, [pc, #284]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800529a:	2b08      	cmp	r3, #8
 800529c:	d11c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800529e:	4b44      	ldr	r3, [pc, #272]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d116      	bne.n	80052d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052aa:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_RCC_OscConfig+0x152>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d001      	beq.n	80052c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e1c7      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c2:	4b3b      	ldr	r3, [pc, #236]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4937      	ldr	r1, [pc, #220]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d6:	e03a      	b.n	800534e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d020      	beq.n	8005322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052e0:	4b34      	ldr	r3, [pc, #208]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80052e2:	2201      	movs	r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e6:	f7fe fc47 	bl	8003b78 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ee:	f7fe fc43 	bl	8003b78 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e1a8      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005300:	4b2b      	ldr	r3, [pc, #172]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530c:	4b28      	ldr	r3, [pc, #160]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4925      	ldr	r1, [pc, #148]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 800531c:	4313      	orrs	r3, r2
 800531e:	600b      	str	r3, [r1, #0]
 8005320:	e015      	b.n	800534e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005322:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fe fc26 	bl	8003b78 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005330:	f7fe fc22 	bl	8003b78 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e187      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005342:	4b1b      	ldr	r3, [pc, #108]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d036      	beq.n	80053c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d016      	beq.n	8005390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005362:	4b15      	ldr	r3, [pc, #84]	; (80053b8 <HAL_RCC_OscConfig+0x248>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fe fc06 	bl	8003b78 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005370:	f7fe fc02 	bl	8003b78 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e167      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <HAL_RCC_OscConfig+0x240>)
 8005384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x200>
 800538e:	e01b      	b.n	80053c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005390:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <HAL_RCC_OscConfig+0x248>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005396:	f7fe fbef 	bl	8003b78 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800539c:	e00e      	b.n	80053bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800539e:	f7fe fbeb 	bl	8003b78 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d907      	bls.n	80053bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e150      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
 80053b0:	40023800 	.word	0x40023800
 80053b4:	42470000 	.word	0x42470000
 80053b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053bc:	4b88      	ldr	r3, [pc, #544]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 80053be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ea      	bne.n	800539e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8097 	beq.w	8005504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053d6:	2300      	movs	r3, #0
 80053d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053da:	4b81      	ldr	r3, [pc, #516]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10f      	bne.n	8005406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	4b7d      	ldr	r3, [pc, #500]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	4a7c      	ldr	r2, [pc, #496]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 80053f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f4:	6413      	str	r3, [r2, #64]	; 0x40
 80053f6:	4b7a      	ldr	r3, [pc, #488]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fe:	60bb      	str	r3, [r7, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005402:	2301      	movs	r3, #1
 8005404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005406:	4b77      	ldr	r3, [pc, #476]	; (80055e4 <HAL_RCC_OscConfig+0x474>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d118      	bne.n	8005444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005412:	4b74      	ldr	r3, [pc, #464]	; (80055e4 <HAL_RCC_OscConfig+0x474>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a73      	ldr	r2, [pc, #460]	; (80055e4 <HAL_RCC_OscConfig+0x474>)
 8005418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800541e:	f7fe fbab 	bl	8003b78 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005426:	f7fe fba7 	bl	8003b78 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e10c      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005438:	4b6a      	ldr	r3, [pc, #424]	; (80055e4 <HAL_RCC_OscConfig+0x474>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d106      	bne.n	800545a <HAL_RCC_OscConfig+0x2ea>
 800544c:	4b64      	ldr	r3, [pc, #400]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	4a63      	ldr	r2, [pc, #396]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	6713      	str	r3, [r2, #112]	; 0x70
 8005458:	e01c      	b.n	8005494 <HAL_RCC_OscConfig+0x324>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b05      	cmp	r3, #5
 8005460:	d10c      	bne.n	800547c <HAL_RCC_OscConfig+0x30c>
 8005462:	4b5f      	ldr	r3, [pc, #380]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	4a5e      	ldr	r2, [pc, #376]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 8005468:	f043 0304 	orr.w	r3, r3, #4
 800546c:	6713      	str	r3, [r2, #112]	; 0x70
 800546e:	4b5c      	ldr	r3, [pc, #368]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	4a5b      	ldr	r2, [pc, #364]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	6713      	str	r3, [r2, #112]	; 0x70
 800547a:	e00b      	b.n	8005494 <HAL_RCC_OscConfig+0x324>
 800547c:	4b58      	ldr	r3, [pc, #352]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 800547e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005480:	4a57      	ldr	r2, [pc, #348]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	6713      	str	r3, [r2, #112]	; 0x70
 8005488:	4b55      	ldr	r3, [pc, #340]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548c:	4a54      	ldr	r2, [pc, #336]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 800548e:	f023 0304 	bic.w	r3, r3, #4
 8005492:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d015      	beq.n	80054c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549c:	f7fe fb6c 	bl	8003b78 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a2:	e00a      	b.n	80054ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a4:	f7fe fb68 	bl	8003b78 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e0cb      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ba:	4b49      	ldr	r3, [pc, #292]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0ee      	beq.n	80054a4 <HAL_RCC_OscConfig+0x334>
 80054c6:	e014      	b.n	80054f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c8:	f7fe fb56 	bl	8003b78 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ce:	e00a      	b.n	80054e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d0:	f7fe fb52 	bl	8003b78 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e0b5      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e6:	4b3e      	ldr	r3, [pc, #248]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1ee      	bne.n	80054d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d105      	bne.n	8005504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f8:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	4a38      	ldr	r2, [pc, #224]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 80054fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005502:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 80a1 	beq.w	8005650 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800550e:	4b34      	ldr	r3, [pc, #208]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	2b08      	cmp	r3, #8
 8005518:	d05c      	beq.n	80055d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d141      	bne.n	80055a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005522:	4b31      	ldr	r3, [pc, #196]	; (80055e8 <HAL_RCC_OscConfig+0x478>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005528:	f7fe fb26 	bl	8003b78 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005530:	f7fe fb22 	bl	8003b78 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e087      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005542:	4b27      	ldr	r3, [pc, #156]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	019b      	lsls	r3, r3, #6
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	3b01      	subs	r3, #1
 8005568:	041b      	lsls	r3, r3, #16
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	061b      	lsls	r3, r3, #24
 8005572:	491b      	ldr	r1, [pc, #108]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 8005574:	4313      	orrs	r3, r2
 8005576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005578:	4b1b      	ldr	r3, [pc, #108]	; (80055e8 <HAL_RCC_OscConfig+0x478>)
 800557a:	2201      	movs	r2, #1
 800557c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557e:	f7fe fafb 	bl	8003b78 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005586:	f7fe faf7 	bl	8003b78 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e05c      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005598:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x416>
 80055a4:	e054      	b.n	8005650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a6:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <HAL_RCC_OscConfig+0x478>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fe fae4 	bl	8003b78 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fe fae0 	bl	8003b78 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e045      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c6:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <HAL_RCC_OscConfig+0x470>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f0      	bne.n	80055b4 <HAL_RCC_OscConfig+0x444>
 80055d2:	e03d      	b.n	8005650 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d107      	bne.n	80055ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e038      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
 80055e0:	40023800 	.word	0x40023800
 80055e4:	40007000 	.word	0x40007000
 80055e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055ec:	4b1b      	ldr	r3, [pc, #108]	; (800565c <HAL_RCC_OscConfig+0x4ec>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d028      	beq.n	800564c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005604:	429a      	cmp	r2, r3
 8005606:	d121      	bne.n	800564c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005612:	429a      	cmp	r2, r3
 8005614:	d11a      	bne.n	800564c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800561c:	4013      	ands	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005624:	4293      	cmp	r3, r2
 8005626:	d111      	bne.n	800564c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005632:	085b      	lsrs	r3, r3, #1
 8005634:	3b01      	subs	r3, #1
 8005636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005638:	429a      	cmp	r2, r3
 800563a:	d107      	bne.n	800564c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005648:	429a      	cmp	r2, r3
 800564a:	d001      	beq.n	8005650 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40023800 	.word	0x40023800

08005660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0cc      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005674:	4b68      	ldr	r3, [pc, #416]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d90c      	bls.n	800569c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b65      	ldr	r3, [pc, #404]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568a:	4b63      	ldr	r3, [pc, #396]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0b8      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d020      	beq.n	80056ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056b4:	4b59      	ldr	r3, [pc, #356]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	4a58      	ldr	r2, [pc, #352]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056cc:	4b53      	ldr	r3, [pc, #332]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4a52      	ldr	r2, [pc, #328]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d8:	4b50      	ldr	r3, [pc, #320]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	494d      	ldr	r1, [pc, #308]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d044      	beq.n	8005780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d107      	bne.n	800570e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fe:	4b47      	ldr	r3, [pc, #284]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d119      	bne.n	800573e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e07f      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d003      	beq.n	800571e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800571a:	2b03      	cmp	r3, #3
 800571c:	d107      	bne.n	800572e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800571e:	4b3f      	ldr	r3, [pc, #252]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e06f      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572e:	4b3b      	ldr	r3, [pc, #236]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e067      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f023 0203 	bic.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4934      	ldr	r1, [pc, #208]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	4313      	orrs	r3, r2
 800574e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005750:	f7fe fa12 	bl	8003b78 <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005756:	e00a      	b.n	800576e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005758:	f7fe fa0e 	bl	8003b78 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	; 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e04f      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576e:	4b2b      	ldr	r3, [pc, #172]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 020c 	and.w	r2, r3, #12
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	429a      	cmp	r2, r3
 800577e:	d1eb      	bne.n	8005758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005780:	4b25      	ldr	r3, [pc, #148]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d20c      	bcs.n	80057a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578e:	4b22      	ldr	r3, [pc, #136]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005796:	4b20      	ldr	r3, [pc, #128]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e032      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057b4:	4b19      	ldr	r3, [pc, #100]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4916      	ldr	r1, [pc, #88]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	490e      	ldr	r1, [pc, #56]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057e6:	f000 f821 	bl	800582c <HAL_RCC_GetSysClockFreq>
 80057ea:	4602      	mov	r2, r0
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	490a      	ldr	r1, [pc, #40]	; (8005820 <HAL_RCC_ClockConfig+0x1c0>)
 80057f8:	5ccb      	ldrb	r3, [r1, r3]
 80057fa:	fa22 f303 	lsr.w	r3, r2, r3
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <HAL_RCC_ClockConfig+0x1c4>)
 8005800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_RCC_ClockConfig+0x1c8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe f972 	bl	8003af0 <HAL_InitTick>

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40023c00 	.word	0x40023c00
 800581c:	40023800 	.word	0x40023800
 8005820:	080098e0 	.word	0x080098e0
 8005824:	20000264 	.word	0x20000264
 8005828:	20000268 	.word	0x20000268

0800582c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800582c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005830:	b094      	sub	sp, #80	; 0x50
 8005832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	647b      	str	r3, [r7, #68]	; 0x44
 8005838:	2300      	movs	r3, #0
 800583a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800583c:	2300      	movs	r3, #0
 800583e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005844:	4b79      	ldr	r3, [pc, #484]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 030c 	and.w	r3, r3, #12
 800584c:	2b08      	cmp	r3, #8
 800584e:	d00d      	beq.n	800586c <HAL_RCC_GetSysClockFreq+0x40>
 8005850:	2b08      	cmp	r3, #8
 8005852:	f200 80e1 	bhi.w	8005a18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_RCC_GetSysClockFreq+0x34>
 800585a:	2b04      	cmp	r3, #4
 800585c:	d003      	beq.n	8005866 <HAL_RCC_GetSysClockFreq+0x3a>
 800585e:	e0db      	b.n	8005a18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005860:	4b73      	ldr	r3, [pc, #460]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005862:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005864:	e0db      	b.n	8005a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005866:	4b73      	ldr	r3, [pc, #460]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x208>)
 8005868:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800586a:	e0d8      	b.n	8005a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800586c:	4b6f      	ldr	r3, [pc, #444]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x200>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005874:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005876:	4b6d      	ldr	r3, [pc, #436]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d063      	beq.n	800594a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005882:	4b6a      	ldr	r3, [pc, #424]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	099b      	lsrs	r3, r3, #6
 8005888:	2200      	movs	r2, #0
 800588a:	63bb      	str	r3, [r7, #56]	; 0x38
 800588c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
 8005896:	2300      	movs	r3, #0
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
 800589a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800589e:	4622      	mov	r2, r4
 80058a0:	462b      	mov	r3, r5
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f04f 0100 	mov.w	r1, #0
 80058aa:	0159      	lsls	r1, r3, #5
 80058ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058b0:	0150      	lsls	r0, r2, #5
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4621      	mov	r1, r4
 80058b8:	1a51      	subs	r1, r2, r1
 80058ba:	6139      	str	r1, [r7, #16]
 80058bc:	4629      	mov	r1, r5
 80058be:	eb63 0301 	sbc.w	r3, r3, r1
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058d0:	4659      	mov	r1, fp
 80058d2:	018b      	lsls	r3, r1, #6
 80058d4:	4651      	mov	r1, sl
 80058d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058da:	4651      	mov	r1, sl
 80058dc:	018a      	lsls	r2, r1, #6
 80058de:	4651      	mov	r1, sl
 80058e0:	ebb2 0801 	subs.w	r8, r2, r1
 80058e4:	4659      	mov	r1, fp
 80058e6:	eb63 0901 	sbc.w	r9, r3, r1
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058fe:	4690      	mov	r8, r2
 8005900:	4699      	mov	r9, r3
 8005902:	4623      	mov	r3, r4
 8005904:	eb18 0303 	adds.w	r3, r8, r3
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	462b      	mov	r3, r5
 800590c:	eb49 0303 	adc.w	r3, r9, r3
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	f04f 0200 	mov.w	r2, #0
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800591e:	4629      	mov	r1, r5
 8005920:	024b      	lsls	r3, r1, #9
 8005922:	4621      	mov	r1, r4
 8005924:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005928:	4621      	mov	r1, r4
 800592a:	024a      	lsls	r2, r1, #9
 800592c:	4610      	mov	r0, r2
 800592e:	4619      	mov	r1, r3
 8005930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005932:	2200      	movs	r2, #0
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
 8005936:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005938:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800593c:	f7fb fa36 	bl	8000dac <__aeabi_uldivmod>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4613      	mov	r3, r2
 8005946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005948:	e058      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800594a:	4b38      	ldr	r3, [pc, #224]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x200>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	099b      	lsrs	r3, r3, #6
 8005950:	2200      	movs	r2, #0
 8005952:	4618      	mov	r0, r3
 8005954:	4611      	mov	r1, r2
 8005956:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	2300      	movs	r3, #0
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
 8005960:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005964:	4642      	mov	r2, r8
 8005966:	464b      	mov	r3, r9
 8005968:	f04f 0000 	mov.w	r0, #0
 800596c:	f04f 0100 	mov.w	r1, #0
 8005970:	0159      	lsls	r1, r3, #5
 8005972:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005976:	0150      	lsls	r0, r2, #5
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4641      	mov	r1, r8
 800597e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005982:	4649      	mov	r1, r9
 8005984:	eb63 0b01 	sbc.w	fp, r3, r1
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005994:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005998:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800599c:	ebb2 040a 	subs.w	r4, r2, sl
 80059a0:	eb63 050b 	sbc.w	r5, r3, fp
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	00eb      	lsls	r3, r5, #3
 80059ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059b2:	00e2      	lsls	r2, r4, #3
 80059b4:	4614      	mov	r4, r2
 80059b6:	461d      	mov	r5, r3
 80059b8:	4643      	mov	r3, r8
 80059ba:	18e3      	adds	r3, r4, r3
 80059bc:	603b      	str	r3, [r7, #0]
 80059be:	464b      	mov	r3, r9
 80059c0:	eb45 0303 	adc.w	r3, r5, r3
 80059c4:	607b      	str	r3, [r7, #4]
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059d2:	4629      	mov	r1, r5
 80059d4:	028b      	lsls	r3, r1, #10
 80059d6:	4621      	mov	r1, r4
 80059d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059dc:	4621      	mov	r1, r4
 80059de:	028a      	lsls	r2, r1, #10
 80059e0:	4610      	mov	r0, r2
 80059e2:	4619      	mov	r1, r3
 80059e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e6:	2200      	movs	r2, #0
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	61fa      	str	r2, [r7, #28]
 80059ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059f0:	f7fb f9dc 	bl	8000dac <__aeabi_uldivmod>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4613      	mov	r3, r2
 80059fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x200>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	0c1b      	lsrs	r3, r3, #16
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	3301      	adds	r3, #1
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a16:	e002      	b.n	8005a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3750      	adds	r7, #80	; 0x50
 8005a24:	46bd      	mov	sp, r7
 8005a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	00f42400 	.word	0x00f42400
 8005a34:	007a1200 	.word	0x007a1200

08005a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000264 	.word	0x20000264

08005a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a54:	f7ff fff0 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	0a9b      	lsrs	r3, r3, #10
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	4903      	ldr	r1, [pc, #12]	; (8005a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a66:	5ccb      	ldrb	r3, [r1, r3]
 8005a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40023800 	.word	0x40023800
 8005a74:	080098f0 	.word	0x080098f0

08005a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a7c:	f7ff ffdc 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
 8005a80:	4602      	mov	r2, r0
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	0b5b      	lsrs	r3, r3, #13
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	4903      	ldr	r1, [pc, #12]	; (8005a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a8e:	5ccb      	ldrb	r3, [r1, r3]
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	080098f0 	.word	0x080098f0

08005aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e04c      	b.n	8005b4c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d111      	bne.n	8005ae2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 fba4 	bl	8007214 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <HAL_TIM_Base_Init+0xb4>)
 8005ad8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f001 f8c1 	bl	8006c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	0800342d 	.word	0x0800342d

08005b58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d001      	beq.n	8005b70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e03c      	b.n	8005bea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <HAL_TIM_Base_Start+0xa0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d018      	beq.n	8005bb4 <HAL_TIM_Base_Start+0x5c>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8a:	d013      	beq.n	8005bb4 <HAL_TIM_Base_Start+0x5c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1a      	ldr	r2, [pc, #104]	; (8005bfc <HAL_TIM_Base_Start+0xa4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00e      	beq.n	8005bb4 <HAL_TIM_Base_Start+0x5c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <HAL_TIM_Base_Start+0xa8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d009      	beq.n	8005bb4 <HAL_TIM_Base_Start+0x5c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <HAL_TIM_Base_Start+0xac>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_TIM_Base_Start+0x5c>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <HAL_TIM_Base_Start+0xb0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d111      	bne.n	8005bd8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b06      	cmp	r3, #6
 8005bc4:	d010      	beq.n	8005be8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd6:	e007      	b.n	8005be8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40010000 	.word	0x40010000
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40000800 	.word	0x40000800
 8005c04:	40000c00 	.word	0x40000c00
 8005c08:	40014000 	.word	0x40014000

08005c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d001      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e044      	b.n	8005cae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0201 	orr.w	r2, r2, #1
 8005c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1e      	ldr	r2, [pc, #120]	; (8005cbc <HAL_TIM_Base_Start_IT+0xb0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d018      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x6c>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4e:	d013      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x6c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1a      	ldr	r2, [pc, #104]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00e      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x6c>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a19      	ldr	r2, [pc, #100]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x6c>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a17      	ldr	r2, [pc, #92]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x6c>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a16      	ldr	r2, [pc, #88]	; (8005ccc <HAL_TIM_Base_Start_IT+0xc0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d111      	bne.n	8005c9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b06      	cmp	r3, #6
 8005c88:	d010      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0201 	orr.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9a:	e007      	b.n	8005cac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40000400 	.word	0x40000400
 8005cc4:	40000800 	.word	0x40000800
 8005cc8:	40000c00 	.word	0x40000c00
 8005ccc:	40014000 	.word	0x40014000

08005cd0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e04c      	b.n	8005d7c <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d111      	bne.n	8005d12 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 fa8c 	bl	8007214 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a1f      	ldr	r2, [pc, #124]	; (8005d84 <HAL_TIM_OC_Init+0xb4>)
 8005d08:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f000 ffa9 	bl	8006c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	08005d89 	.word	0x08005d89

08005d88 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e04c      	b.n	8005e48 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d111      	bne.n	8005dde <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f001 fa26 	bl	8007214 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d102      	bne.n	8005dd6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <HAL_TIM_PWM_Init+0xb4>)
 8005dd4:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f000 ff43 	bl	8006c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	08005e55 	.word	0x08005e55

08005e54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <HAL_TIM_PWM_Start+0x24>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bf14      	ite	ne
 8005e84:	2301      	movne	r3, #1
 8005e86:	2300      	moveq	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e022      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x6a>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d109      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0x3e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	bf14      	ite	ne
 8005e9e:	2301      	movne	r3, #1
 8005ea0:	2300      	moveq	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	e015      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x6a>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d109      	bne.n	8005ec0 <HAL_TIM_PWM_Start+0x58>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e008      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x6a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e068      	b.n	8005fac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0x82>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee8:	e013      	b.n	8005f12 <HAL_TIM_PWM_Start+0xaa>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0x92>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef8:	e00b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xaa>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0xa2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f08:	e003      	b.n	8005f12 <HAL_TIM_PWM_Start+0xaa>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 f954 	bl	80071c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a23      	ldr	r2, [pc, #140]	; (8005fb4 <HAL_TIM_PWM_Start+0x14c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d107      	bne.n	8005f3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <HAL_TIM_PWM_Start+0x14c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d018      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x10e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4c:	d013      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x10e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <HAL_TIM_PWM_Start+0x150>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00e      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x10e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <HAL_TIM_PWM_Start+0x154>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x10e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <HAL_TIM_PWM_Start+0x158>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x10e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a14      	ldr	r2, [pc, #80]	; (8005fc4 <HAL_TIM_PWM_Start+0x15c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d111      	bne.n	8005f9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b06      	cmp	r3, #6
 8005f86:	d010      	beq.n	8005faa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f98:	e007      	b.n	8005faa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40010000 	.word	0x40010000
 8005fb8:	40000400 	.word	0x40000400
 8005fbc:	40000800 	.word	0x40000800
 8005fc0:	40000c00 	.word	0x40000c00
 8005fc4:	40014000 	.word	0x40014000

08005fc8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fe0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fe8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ff0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d108      	bne.n	800600a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d105      	bne.n	800600a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ffe:	7b7b      	ldrb	r3, [r7, #13]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d102      	bne.n	800600a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006004:	7b3b      	ldrb	r3, [r7, #12]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d001      	beq.n	800600e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e03b      	b.n	8006086 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0202 	orr.w	r2, r2, #2
 800603c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0204 	orr.w	r2, r2, #4
 800604c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2201      	movs	r2, #1
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f001 f8b6 	bl	80071c8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2201      	movs	r2, #1
 8006062:	2104      	movs	r1, #4
 8006064:	4618      	mov	r0, r3
 8006066:	f001 f8af 	bl	80071c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a08      	ldr	r2, [pc, #32]	; (8006090 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d107      	bne.n	8006084 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006082:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40010000 	.word	0x40010000

08006094 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e0a2      	b.n	80061ee <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d111      	bne.n	80060d8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f8a9 	bl	8007214 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a4a      	ldr	r2, [pc, #296]	; (80061f8 <HAL_TIM_Encoder_Init+0x164>)
 80060ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ee:	f023 0307 	bic.w	r3, r3, #7
 80060f2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f000 fdbc 	bl	8006c7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	4313      	orrs	r3, r2
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800614a:	f023 030c 	bic.w	r3, r3, #12
 800614e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	4313      	orrs	r3, r2
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	011a      	lsls	r2, r3, #4
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	031b      	lsls	r3, r3, #12
 800617a:	4313      	orrs	r3, r2
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006188:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006190:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	4313      	orrs	r3, r2
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	080034f5 	.word	0x080034f5

080061fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006214:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800621c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006224:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d110      	bne.n	800624e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d102      	bne.n	8006238 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006232:	7b7b      	ldrb	r3, [r7, #13]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d001      	beq.n	800623c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e069      	b.n	8006310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800624c:	e031      	b.n	80062b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b04      	cmp	r3, #4
 8006252:	d110      	bne.n	8006276 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d102      	bne.n	8006260 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800625a:	7b3b      	ldrb	r3, [r7, #12]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d001      	beq.n	8006264 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e055      	b.n	8006310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006274:	e01d      	b.n	80062b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d108      	bne.n	800628e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006282:	7b7b      	ldrb	r3, [r7, #13]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d102      	bne.n	800628e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006288:	7b3b      	ldrb	r3, [r7, #12]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d001      	beq.n	8006292 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e03e      	b.n	8006310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_TIM_Encoder_Start+0xc4>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d008      	beq.n	80062d0 <HAL_TIM_Encoder_Start+0xd4>
 80062be:	e00f      	b.n	80062e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2201      	movs	r2, #1
 80062c6:	2100      	movs	r1, #0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 ff7d 	bl	80071c8 <TIM_CCxChannelCmd>
      break;
 80062ce:	e016      	b.n	80062fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2201      	movs	r2, #1
 80062d6:	2104      	movs	r1, #4
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 ff75 	bl	80071c8 <TIM_CCxChannelCmd>
      break;
 80062de:	e00e      	b.n	80062fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2201      	movs	r2, #1
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 ff6d 	bl	80071c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2201      	movs	r2, #1
 80062f4:	2104      	movs	r1, #4
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 ff66 	bl	80071c8 <TIM_CCxChannelCmd>
      break;
 80062fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b02      	cmp	r3, #2
 800632c:	d128      	bne.n	8006380 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d121      	bne.n	8006380 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0202 	mvn.w	r2, #2
 8006344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
 8006364:	e009      	b.n	800637a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b04      	cmp	r3, #4
 800638c:	d128      	bne.n	80063e0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d121      	bne.n	80063e0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0204 	mvn.w	r2, #4
 80063a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	4798      	blx	r3
 80063c4:	e009      	b.n	80063da <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d128      	bne.n	8006440 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d121      	bne.n	8006440 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f06f 0208 	mvn.w	r2, #8
 8006404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2204      	movs	r2, #4
 800640a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
 8006424:	e009      	b.n	800643a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b10      	cmp	r3, #16
 800644c:	d128      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b10      	cmp	r3, #16
 800645a:	d121      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0210 	mvn.w	r2, #16
 8006464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2208      	movs	r2, #8
 800646a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
 8006484:	e009      	b.n	800649a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d110      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d109      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0201 	mvn.w	r2, #1
 80064c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d110      	bne.n	8006500 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d109      	bne.n	8006500 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d110      	bne.n	8006530 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d109      	bne.n	8006530 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b20      	cmp	r3, #32
 800653c:	d110      	bne.n	8006560 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b20      	cmp	r3, #32
 800654a:	d109      	bne.n	8006560 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0220 	mvn.w	r2, #32
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006582:	2302      	movs	r3, #2
 8006584:	e048      	b.n	8006618 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b0c      	cmp	r3, #12
 8006592:	d839      	bhi.n	8006608 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006594:	a201      	add	r2, pc, #4	; (adr r2, 800659c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659a:	bf00      	nop
 800659c:	080065d1 	.word	0x080065d1
 80065a0:	08006609 	.word	0x08006609
 80065a4:	08006609 	.word	0x08006609
 80065a8:	08006609 	.word	0x08006609
 80065ac:	080065df 	.word	0x080065df
 80065b0:	08006609 	.word	0x08006609
 80065b4:	08006609 	.word	0x08006609
 80065b8:	08006609 	.word	0x08006609
 80065bc:	080065ed 	.word	0x080065ed
 80065c0:	08006609 	.word	0x08006609
 80065c4:	08006609 	.word	0x08006609
 80065c8:	08006609 	.word	0x08006609
 80065cc:	080065fb 	.word	0x080065fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fbd0 	bl	8006d7c <TIM_OC1_SetConfig>
      break;
 80065dc:	e017      	b.n	800660e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fc2f 	bl	8006e48 <TIM_OC2_SetConfig>
      break;
 80065ea:	e010      	b.n	800660e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fc94 	bl	8006f20 <TIM_OC3_SetConfig>
      break;
 80065f8:	e009      	b.n	800660e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fcf7 	bl	8006ff4 <TIM_OC4_SetConfig>
      break;
 8006606:	e002      	b.n	800660e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	75fb      	strb	r3, [r7, #23]
      break;
 800660c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006616:	7dfb      	ldrb	r3, [r7, #23]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800663a:	2302      	movs	r3, #2
 800663c:	e0ae      	b.n	800679c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b0c      	cmp	r3, #12
 800664a:	f200 809f 	bhi.w	800678c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006689 	.word	0x08006689
 8006658:	0800678d 	.word	0x0800678d
 800665c:	0800678d 	.word	0x0800678d
 8006660:	0800678d 	.word	0x0800678d
 8006664:	080066c9 	.word	0x080066c9
 8006668:	0800678d 	.word	0x0800678d
 800666c:	0800678d 	.word	0x0800678d
 8006670:	0800678d 	.word	0x0800678d
 8006674:	0800670b 	.word	0x0800670b
 8006678:	0800678d 	.word	0x0800678d
 800667c:	0800678d 	.word	0x0800678d
 8006680:	0800678d 	.word	0x0800678d
 8006684:	0800674b 	.word	0x0800674b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fb74 	bl	8006d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0208 	orr.w	r2, r2, #8
 80066a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0204 	bic.w	r2, r2, #4
 80066b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6999      	ldr	r1, [r3, #24]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	619a      	str	r2, [r3, #24]
      break;
 80066c6:	e064      	b.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fbba 	bl	8006e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6999      	ldr	r1, [r3, #24]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	021a      	lsls	r2, r3, #8
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	619a      	str	r2, [r3, #24]
      break;
 8006708:	e043      	b.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fc05 	bl	8006f20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0208 	orr.w	r2, r2, #8
 8006724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0204 	bic.w	r2, r2, #4
 8006734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69d9      	ldr	r1, [r3, #28]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	61da      	str	r2, [r3, #28]
      break;
 8006748:	e023      	b.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fc4f 	bl	8006ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69d9      	ldr	r1, [r3, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	021a      	lsls	r2, r3, #8
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	61da      	str	r2, [r3, #28]
      break;
 800678a:	e002      	b.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	75fb      	strb	r3, [r7, #23]
      break;
 8006790:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_TIM_ConfigClockSource+0x1c>
 80067bc:	2302      	movs	r3, #2
 80067be:	e0b4      	b.n	800692a <HAL_TIM_ConfigClockSource+0x186>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f8:	d03e      	beq.n	8006878 <HAL_TIM_ConfigClockSource+0xd4>
 80067fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fe:	f200 8087 	bhi.w	8006910 <HAL_TIM_ConfigClockSource+0x16c>
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006806:	f000 8086 	beq.w	8006916 <HAL_TIM_ConfigClockSource+0x172>
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680e:	d87f      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x16c>
 8006810:	2b70      	cmp	r3, #112	; 0x70
 8006812:	d01a      	beq.n	800684a <HAL_TIM_ConfigClockSource+0xa6>
 8006814:	2b70      	cmp	r3, #112	; 0x70
 8006816:	d87b      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x16c>
 8006818:	2b60      	cmp	r3, #96	; 0x60
 800681a:	d050      	beq.n	80068be <HAL_TIM_ConfigClockSource+0x11a>
 800681c:	2b60      	cmp	r3, #96	; 0x60
 800681e:	d877      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x16c>
 8006820:	2b50      	cmp	r3, #80	; 0x50
 8006822:	d03c      	beq.n	800689e <HAL_TIM_ConfigClockSource+0xfa>
 8006824:	2b50      	cmp	r3, #80	; 0x50
 8006826:	d873      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x16c>
 8006828:	2b40      	cmp	r3, #64	; 0x40
 800682a:	d058      	beq.n	80068de <HAL_TIM_ConfigClockSource+0x13a>
 800682c:	2b40      	cmp	r3, #64	; 0x40
 800682e:	d86f      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x16c>
 8006830:	2b30      	cmp	r3, #48	; 0x30
 8006832:	d064      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x15a>
 8006834:	2b30      	cmp	r3, #48	; 0x30
 8006836:	d86b      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x16c>
 8006838:	2b20      	cmp	r3, #32
 800683a:	d060      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x15a>
 800683c:	2b20      	cmp	r3, #32
 800683e:	d867      	bhi.n	8006910 <HAL_TIM_ConfigClockSource+0x16c>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d05c      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x15a>
 8006844:	2b10      	cmp	r3, #16
 8006846:	d05a      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x15a>
 8006848:	e062      	b.n	8006910 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	6899      	ldr	r1, [r3, #8]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f000 fc95 	bl	8007188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800686c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	609a      	str	r2, [r3, #8]
      break;
 8006876:	e04f      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	6899      	ldr	r1, [r3, #8]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f000 fc7e 	bl	8007188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800689a:	609a      	str	r2, [r3, #8]
      break;
 800689c:	e03c      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	6859      	ldr	r1, [r3, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	461a      	mov	r2, r3
 80068ac:	f000 fbf2 	bl	8007094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2150      	movs	r1, #80	; 0x50
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fc4b 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 80068bc:	e02c      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	6859      	ldr	r1, [r3, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	461a      	mov	r2, r3
 80068cc:	f000 fc11 	bl	80070f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2160      	movs	r1, #96	; 0x60
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fc3b 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 80068dc:	e01c      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	6859      	ldr	r1, [r3, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f000 fbd2 	bl	8007094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2140      	movs	r1, #64	; 0x40
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fc2b 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 80068fc:	e00c      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f000 fc22 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 800690e:	e003      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
      break;
 8006914:	e000      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	460b      	mov	r3, r1
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e135      	b.n	8006c70 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_TIM_RegisterCallback+0x2a>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e12e      	b.n	8006c70 <HAL_TIM_RegisterCallback+0x288>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	f040 80ba 	bne.w	8006b9c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006a28:	7afb      	ldrb	r3, [r7, #11]
 8006a2a:	2b1a      	cmp	r3, #26
 8006a2c:	f200 80b3 	bhi.w	8006b96 <HAL_TIM_RegisterCallback+0x1ae>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <HAL_TIM_RegisterCallback+0x50>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006aa5 	.word	0x08006aa5
 8006a3c:	08006aad 	.word	0x08006aad
 8006a40:	08006ab5 	.word	0x08006ab5
 8006a44:	08006abd 	.word	0x08006abd
 8006a48:	08006ac5 	.word	0x08006ac5
 8006a4c:	08006acd 	.word	0x08006acd
 8006a50:	08006ad5 	.word	0x08006ad5
 8006a54:	08006add 	.word	0x08006add
 8006a58:	08006ae5 	.word	0x08006ae5
 8006a5c:	08006aed 	.word	0x08006aed
 8006a60:	08006af5 	.word	0x08006af5
 8006a64:	08006afd 	.word	0x08006afd
 8006a68:	08006b05 	.word	0x08006b05
 8006a6c:	08006b0d 	.word	0x08006b0d
 8006a70:	08006b15 	.word	0x08006b15
 8006a74:	08006b1f 	.word	0x08006b1f
 8006a78:	08006b29 	.word	0x08006b29
 8006a7c:	08006b33 	.word	0x08006b33
 8006a80:	08006b3d 	.word	0x08006b3d
 8006a84:	08006b47 	.word	0x08006b47
 8006a88:	08006b51 	.word	0x08006b51
 8006a8c:	08006b5b 	.word	0x08006b5b
 8006a90:	08006b65 	.word	0x08006b65
 8006a94:	08006b6f 	.word	0x08006b6f
 8006a98:	08006b79 	.word	0x08006b79
 8006a9c:	08006b83 	.word	0x08006b83
 8006aa0:	08006b8d 	.word	0x08006b8d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006aaa:	e0dc      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006ab2:	e0d8      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006aba:	e0d4      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006ac2:	e0d0      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006aca:	e0cc      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006ad2:	e0c8      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006ada:	e0c4      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006ae2:	e0c0      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006aea:	e0bc      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006af2:	e0b8      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006afa:	e0b4      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006b02:	e0b0      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006b0a:	e0ac      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006b12:	e0a8      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006b1c:	e0a3      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006b26:	e09e      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8006b30:	e099      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006b3a:	e094      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006b44:	e08f      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8006b4e:	e08a      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006b58:	e085      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8006b62:	e080      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006b6c:	e07b      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006b76:	e076      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8006b80:	e071      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8006b8a:	e06c      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006b94:	e067      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	75fb      	strb	r3, [r7, #23]
        break;
 8006b9a:	e064      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d15c      	bne.n	8006c62 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	2b0d      	cmp	r3, #13
 8006bac:	d856      	bhi.n	8006c5c <HAL_TIM_RegisterCallback+0x274>
 8006bae:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <HAL_TIM_RegisterCallback+0x1cc>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006bed 	.word	0x08006bed
 8006bb8:	08006bf5 	.word	0x08006bf5
 8006bbc:	08006bfd 	.word	0x08006bfd
 8006bc0:	08006c05 	.word	0x08006c05
 8006bc4:	08006c0d 	.word	0x08006c0d
 8006bc8:	08006c15 	.word	0x08006c15
 8006bcc:	08006c1d 	.word	0x08006c1d
 8006bd0:	08006c25 	.word	0x08006c25
 8006bd4:	08006c2d 	.word	0x08006c2d
 8006bd8:	08006c35 	.word	0x08006c35
 8006bdc:	08006c3d 	.word	0x08006c3d
 8006be0:	08006c45 	.word	0x08006c45
 8006be4:	08006c4d 	.word	0x08006c4d
 8006be8:	08006c55 	.word	0x08006c55
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006bf2:	e038      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006bfa:	e034      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006c02:	e030      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006c0a:	e02c      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006c12:	e028      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006c1a:	e024      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006c22:	e020      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006c2a:	e01c      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006c32:	e018      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006c3a:	e014      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006c42:	e010      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006c4a:	e00c      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006c52:	e008      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006c5a:	e004      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
        break;
 8006c60:	e001      	b.n	8006c66 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a34      	ldr	r2, [pc, #208]	; (8006d60 <TIM_Base_SetConfig+0xe4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00f      	beq.n	8006cb4 <TIM_Base_SetConfig+0x38>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9a:	d00b      	beq.n	8006cb4 <TIM_Base_SetConfig+0x38>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a31      	ldr	r2, [pc, #196]	; (8006d64 <TIM_Base_SetConfig+0xe8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d007      	beq.n	8006cb4 <TIM_Base_SetConfig+0x38>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a30      	ldr	r2, [pc, #192]	; (8006d68 <TIM_Base_SetConfig+0xec>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_Base_SetConfig+0x38>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a2f      	ldr	r2, [pc, #188]	; (8006d6c <TIM_Base_SetConfig+0xf0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d108      	bne.n	8006cc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a25      	ldr	r2, [pc, #148]	; (8006d60 <TIM_Base_SetConfig+0xe4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01b      	beq.n	8006d06 <TIM_Base_SetConfig+0x8a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd4:	d017      	beq.n	8006d06 <TIM_Base_SetConfig+0x8a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a22      	ldr	r2, [pc, #136]	; (8006d64 <TIM_Base_SetConfig+0xe8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <TIM_Base_SetConfig+0x8a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a21      	ldr	r2, [pc, #132]	; (8006d68 <TIM_Base_SetConfig+0xec>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00f      	beq.n	8006d06 <TIM_Base_SetConfig+0x8a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a20      	ldr	r2, [pc, #128]	; (8006d6c <TIM_Base_SetConfig+0xf0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00b      	beq.n	8006d06 <TIM_Base_SetConfig+0x8a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a1f      	ldr	r2, [pc, #124]	; (8006d70 <TIM_Base_SetConfig+0xf4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d007      	beq.n	8006d06 <TIM_Base_SetConfig+0x8a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a1e      	ldr	r2, [pc, #120]	; (8006d74 <TIM_Base_SetConfig+0xf8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d003      	beq.n	8006d06 <TIM_Base_SetConfig+0x8a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a1d      	ldr	r2, [pc, #116]	; (8006d78 <TIM_Base_SetConfig+0xfc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d108      	bne.n	8006d18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a08      	ldr	r2, [pc, #32]	; (8006d60 <TIM_Base_SetConfig+0xe4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d103      	bne.n	8006d4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	615a      	str	r2, [r3, #20]
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800
 8006d6c:	40000c00 	.word	0x40000c00
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40014400 	.word	0x40014400
 8006d78:	40014800 	.word	0x40014800

08006d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f023 0201 	bic.w	r2, r3, #1
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0303 	bic.w	r3, r3, #3
 8006db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f023 0302 	bic.w	r3, r3, #2
 8006dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a1c      	ldr	r2, [pc, #112]	; (8006e44 <TIM_OC1_SetConfig+0xc8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d10c      	bne.n	8006df2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f023 0308 	bic.w	r3, r3, #8
 8006dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f023 0304 	bic.w	r3, r3, #4
 8006df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a13      	ldr	r2, [pc, #76]	; (8006e44 <TIM_OC1_SetConfig+0xc8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d111      	bne.n	8006e1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	621a      	str	r2, [r3, #32]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	40010000 	.word	0x40010000

08006e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f023 0210 	bic.w	r2, r3, #16
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f023 0320 	bic.w	r3, r3, #32
 8006e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a1e      	ldr	r2, [pc, #120]	; (8006f1c <TIM_OC2_SetConfig+0xd4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d10d      	bne.n	8006ec4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	011b      	lsls	r3, r3, #4
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <TIM_OC2_SetConfig+0xd4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d113      	bne.n	8006ef4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	40010000 	.word	0x40010000

08006f20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0303 	bic.w	r3, r3, #3
 8006f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a1d      	ldr	r2, [pc, #116]	; (8006ff0 <TIM_OC3_SetConfig+0xd0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d10d      	bne.n	8006f9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <TIM_OC3_SetConfig+0xd0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d113      	bne.n	8006fca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40010000 	.word	0x40010000

08006ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800703e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a10      	ldr	r2, [pc, #64]	; (8007090 <TIM_OC4_SetConfig+0x9c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d109      	bne.n	8007068 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800705a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	019b      	lsls	r3, r3, #6
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	621a      	str	r2, [r3, #32]
}
 8007082:	bf00      	nop
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40010000 	.word	0x40010000

08007094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	f023 0201 	bic.w	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f023 030a 	bic.w	r3, r3, #10
 80070d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	621a      	str	r2, [r3, #32]
}
 80070e6:	bf00      	nop
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b087      	sub	sp, #28
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f023 0210 	bic.w	r2, r3, #16
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800711c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	031b      	lsls	r3, r3, #12
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800712e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	621a      	str	r2, [r3, #32]
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	f043 0307 	orr.w	r3, r3, #7
 8007174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	609a      	str	r2, [r3, #8]
}
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	021a      	lsls	r2, r3, #8
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	431a      	orrs	r2, r3
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	609a      	str	r2, [r3, #8]
}
 80071bc:	bf00      	nop
 80071be:	371c      	adds	r7, #28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 031f 	and.w	r3, r3, #31
 80071da:	2201      	movs	r2, #1
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1a      	ldr	r2, [r3, #32]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	43db      	mvns	r3, r3
 80071ea:	401a      	ands	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007200:	431a      	orrs	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	621a      	str	r2, [r3, #32]
}
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a1c      	ldr	r2, [pc, #112]	; (8007290 <TIM_ResetCallback+0x7c>)
 8007220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a1b      	ldr	r2, [pc, #108]	; (8007294 <TIM_ResetCallback+0x80>)
 8007228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a1a      	ldr	r2, [pc, #104]	; (8007298 <TIM_ResetCallback+0x84>)
 8007230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a19      	ldr	r2, [pc, #100]	; (800729c <TIM_ResetCallback+0x88>)
 8007238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a18      	ldr	r2, [pc, #96]	; (80072a0 <TIM_ResetCallback+0x8c>)
 8007240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a17      	ldr	r2, [pc, #92]	; (80072a4 <TIM_ResetCallback+0x90>)
 8007248:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a16      	ldr	r2, [pc, #88]	; (80072a8 <TIM_ResetCallback+0x94>)
 8007250:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a15      	ldr	r2, [pc, #84]	; (80072ac <TIM_ResetCallback+0x98>)
 8007258:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a14      	ldr	r2, [pc, #80]	; (80072b0 <TIM_ResetCallback+0x9c>)
 8007260:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a13      	ldr	r2, [pc, #76]	; (80072b4 <TIM_ResetCallback+0xa0>)
 8007268:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a12      	ldr	r2, [pc, #72]	; (80072b8 <TIM_ResetCallback+0xa4>)
 8007270:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a11      	ldr	r2, [pc, #68]	; (80072bc <TIM_ResetCallback+0xa8>)
 8007278:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a10      	ldr	r2, [pc, #64]	; (80072c0 <TIM_ResetCallback+0xac>)
 8007280:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	08002f5d 	.word	0x08002f5d
 8007294:	08006933 	.word	0x08006933
 8007298:	080069ab 	.word	0x080069ab
 800729c:	080069bf 	.word	0x080069bf
 80072a0:	0800695b 	.word	0x0800695b
 80072a4:	0800696f 	.word	0x0800696f
 80072a8:	08006947 	.word	0x08006947
 80072ac:	08006983 	.word	0x08006983
 80072b0:	08006997 	.word	0x08006997
 80072b4:	080069d3 	.word	0x080069d3
 80072b8:	08007445 	.word	0x08007445
 80072bc:	08007459 	.word	0x08007459
 80072c0:	0800746d 	.word	0x0800746d

080072c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072d8:	2302      	movs	r3, #2
 80072da:	e050      	b.n	800737e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1c      	ldr	r2, [pc, #112]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d018      	beq.n	8007352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007328:	d013      	beq.n	8007352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a18      	ldr	r2, [pc, #96]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00e      	beq.n	8007352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a16      	ldr	r2, [pc, #88]	; (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d009      	beq.n	8007352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a15      	ldr	r2, [pc, #84]	; (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d004      	beq.n	8007352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a13      	ldr	r2, [pc, #76]	; (800739c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d10c      	bne.n	800736c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007358:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	4313      	orrs	r3, r2
 8007362:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40010000 	.word	0x40010000
 8007390:	40000400 	.word	0x40000400
 8007394:	40000800 	.word	0x40000800
 8007398:	40000c00 	.word	0x40000c00
 800739c:	40014000 	.word	0x40014000

080073a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e03d      	b.n	8007438 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e04a      	b.n	8007528 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d111      	bne.n	80074c2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fd2c 	bl	8007f04 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d102      	bne.n	80074ba <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <HAL_UART_Init+0xb0>)
 80074b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2224      	movs	r2, #36	; 0x24
 80074c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fff6 	bl	80084cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695a      	ldr	r2, [r3, #20]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800750e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	08003609 	.word	0x08003609

08007534 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	460b      	mov	r3, r1
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d107      	bne.n	800755c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	f043 0220 	orr.w	r2, r3, #32
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e08c      	b.n	8007676 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <HAL_UART_RegisterCallback+0x36>
 8007566:	2302      	movs	r3, #2
 8007568:	e085      	b.n	8007676 <HAL_UART_RegisterCallback+0x142>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b20      	cmp	r3, #32
 800757c:	d151      	bne.n	8007622 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	2b0c      	cmp	r3, #12
 8007582:	d845      	bhi.n	8007610 <HAL_UART_RegisterCallback+0xdc>
 8007584:	a201      	add	r2, pc, #4	; (adr r2, 800758c <HAL_UART_RegisterCallback+0x58>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	080075c1 	.word	0x080075c1
 8007590:	080075c9 	.word	0x080075c9
 8007594:	080075d1 	.word	0x080075d1
 8007598:	080075d9 	.word	0x080075d9
 800759c:	080075e1 	.word	0x080075e1
 80075a0:	080075e9 	.word	0x080075e9
 80075a4:	080075f1 	.word	0x080075f1
 80075a8:	080075f9 	.word	0x080075f9
 80075ac:	08007611 	.word	0x08007611
 80075b0:	08007611 	.word	0x08007611
 80075b4:	08007611 	.word	0x08007611
 80075b8:	08007601 	.word	0x08007601
 80075bc:	08007609 	.word	0x08007609
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80075c6:	e051      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80075ce:	e04d      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80075d6:	e049      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80075de:	e045      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80075e6:	e041      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80075ee:	e03d      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80075f6:	e039      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80075fe:	e035      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007606:	e031      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800760e:	e02d      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	75fb      	strb	r3, [r7, #23]
        break;
 8007620:	e024      	b.n	800766c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d116      	bne.n	800765c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800762e:	7afb      	ldrb	r3, [r7, #11]
 8007630:	2b0b      	cmp	r3, #11
 8007632:	d002      	beq.n	800763a <HAL_UART_RegisterCallback+0x106>
 8007634:	2b0c      	cmp	r3, #12
 8007636:	d004      	beq.n	8007642 <HAL_UART_RegisterCallback+0x10e>
 8007638:	e007      	b.n	800764a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007640:	e014      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007648:	e010      	b.n	800766c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f043 0220 	orr.w	r2, r3, #32
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	75fb      	strb	r3, [r7, #23]
        break;
 800765a:	e007      	b.n	800766c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	f043 0220 	orr.w	r2, r3, #32
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop

08007684 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4613      	mov	r3, r2
 8007690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b20      	cmp	r3, #32
 800769c:	d11d      	bne.n	80076da <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <HAL_UART_Receive_IT+0x26>
 80076a4:	88fb      	ldrh	r3, [r7, #6]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e016      	b.n	80076dc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_UART_Receive_IT+0x38>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e00f      	b.n	80076dc <HAL_UART_Receive_IT+0x58>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	461a      	mov	r2, r3
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 fcf7 	bl	80080c4 <UART_Start_Receive_IT>
 80076d6:	4603      	mov	r3, r0
 80076d8:	e000      	b.n	80076dc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80076da:	2302      	movs	r3, #2
  }
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08c      	sub	sp, #48	; 0x30
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	4613      	mov	r3, r2
 80076f0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d165      	bne.n	80077ca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_UART_Transmit_DMA+0x26>
 8007704:	88fb      	ldrh	r3, [r7, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e05e      	b.n	80077cc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007714:	2b01      	cmp	r3, #1
 8007716:	d101      	bne.n	800771c <HAL_UART_Transmit_DMA+0x38>
 8007718:	2302      	movs	r3, #2
 800771a:	e057      	b.n	80077cc <HAL_UART_Transmit_DMA+0xe8>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	88fa      	ldrh	r2, [r7, #6]
 800772e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	88fa      	ldrh	r2, [r7, #6]
 8007734:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2221      	movs	r2, #33	; 0x21
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007748:	4a22      	ldr	r2, [pc, #136]	; (80077d4 <HAL_UART_Transmit_DMA+0xf0>)
 800774a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	4a21      	ldr	r2, [pc, #132]	; (80077d8 <HAL_UART_Transmit_DMA+0xf4>)
 8007752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007758:	4a20      	ldr	r2, [pc, #128]	; (80077dc <HAL_UART_Transmit_DMA+0xf8>)
 800775a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007760:	2200      	movs	r2, #0
 8007762:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007764:	f107 0308 	add.w	r3, r7, #8
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	6819      	ldr	r1, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3304      	adds	r3, #4
 8007778:	461a      	mov	r2, r3
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	f7fc ffca 	bl	8004714 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007788:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3314      	adds	r3, #20
 8007798:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	617b      	str	r3, [r7, #20]
   return(result);
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3314      	adds	r3, #20
 80077b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b2:	627a      	str	r2, [r7, #36]	; 0x24
 80077b4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6a39      	ldr	r1, [r7, #32]
 80077b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	61fb      	str	r3, [r7, #28]
   return(result);
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e5      	bne.n	8007792 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e000      	b.n	80077cc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80077ca:	2302      	movs	r3, #2
  }
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3730      	adds	r7, #48	; 0x30
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	08007f75 	.word	0x08007f75
 80077d8:	08008011 	.word	0x08008011
 80077dc:	0800802f 	.word	0x0800802f

080077e0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b09a      	sub	sp, #104	; 0x68
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80077f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077fe:	667b      	str	r3, [r7, #100]	; 0x64
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007808:	657a      	str	r2, [r7, #84]	; 0x54
 800780a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800780e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007810:	e841 2300 	strex	r3, r2, [r1]
 8007814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e5      	bne.n	80077e8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3314      	adds	r3, #20
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	f023 0301 	bic.w	r3, r3, #1
 8007832:	663b      	str	r3, [r7, #96]	; 0x60
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3314      	adds	r3, #20
 800783a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800783c:	643a      	str	r2, [r7, #64]	; 0x40
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e5      	bne.n	800781c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	2b01      	cmp	r3, #1
 8007856:	d119      	bne.n	800788c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	61fb      	str	r3, [r7, #28]
   return(result);
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f023 0310 	bic.w	r3, r3, #16
 800786e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	330c      	adds	r3, #12
 8007876:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800787a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800787e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e5      	bne.n	8007858 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d136      	bne.n	8007908 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3314      	adds	r3, #20
 80078a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3314      	adds	r3, #20
 80078b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ba:	61ba      	str	r2, [r7, #24]
 80078bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6979      	ldr	r1, [r7, #20]
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	613b      	str	r3, [r7, #16]
   return(result);
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e5      	bne.n	800789a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d018      	beq.n	8007908 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	2200      	movs	r2, #0
 80078dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fc ff6e 	bl	80047c4 <HAL_DMA_Abort>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00c      	beq.n	8007908 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fd f982 	bl	8004bfc <HAL_DMA_GetError>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d104      	bne.n	8007908 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2210      	movs	r2, #16
 8007902:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e00a      	b.n	800791e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3768      	adds	r7, #104	; 0x68
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b0ba      	sub	sp, #232	; 0xe8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800794e:	2300      	movs	r3, #0
 8007950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007954:	2300      	movs	r3, #0
 8007956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800795a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10f      	bne.n	800798e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800796e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007972:	f003 0320 	and.w	r3, r3, #32
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <HAL_UART_IRQHandler+0x66>
 800797a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fce3 	bl	8008352 <UART_Receive_IT>
      return;
 800798c:	e25b      	b.n	8007e46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800798e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 80e1 	beq.w	8007b5a <HAL_UART_IRQHandler+0x232>
 8007998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80d4 	beq.w	8007b5a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00b      	beq.n	80079d6 <HAL_UART_IRQHandler+0xae>
 80079be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d005      	beq.n	80079d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	f043 0201 	orr.w	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <HAL_UART_IRQHandler+0xd2>
 80079e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d005      	beq.n	80079fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	f043 0202 	orr.w	r2, r3, #2
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00b      	beq.n	8007a1e <HAL_UART_IRQHandler+0xf6>
 8007a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	f043 0204 	orr.w	r2, r3, #4
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d011      	beq.n	8007a4e <HAL_UART_IRQHandler+0x126>
 8007a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d105      	bne.n	8007a42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	f043 0208 	orr.w	r2, r3, #8
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 81f2 	beq.w	8007e3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5c:	f003 0320 	and.w	r3, r3, #32
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d008      	beq.n	8007a76 <HAL_UART_IRQHandler+0x14e>
 8007a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fc6e 	bl	8008352 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	bf0c      	ite	eq
 8007a84:	2301      	moveq	r3, #1
 8007a86:	2300      	movne	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x17a>
 8007a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d051      	beq.n	8007b46 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fb74 	bl	8008190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b40      	cmp	r3, #64	; 0x40
 8007ab4:	d142      	bne.n	8007b3c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3314      	adds	r3, #20
 8007abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3314      	adds	r3, #20
 8007ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1d9      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d013      	beq.n	8007b32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	4a7f      	ldr	r2, [pc, #508]	; (8007d0c <HAL_UART_IRQHandler+0x3e4>)
 8007b10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fc fec4 	bl	80048a4 <HAL_DMA_Abort_IT>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d019      	beq.n	8007b56 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b30:	e011      	b.n	8007b56 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3a:	e00c      	b.n	8007b56 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b44:	e007      	b.n	8007b56 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b54:	e172      	b.n	8007e3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b56:	bf00      	nop
    return;
 8007b58:	e170      	b.n	8007e3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	f040 814c 	bne.w	8007dfc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8145 	beq.w	8007dfc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b76:	f003 0310 	and.w	r3, r3, #16
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 813e 	beq.w	8007dfc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b80:	2300      	movs	r3, #0
 8007b82:	60bb      	str	r3, [r7, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60bb      	str	r3, [r7, #8]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	60bb      	str	r3, [r7, #8]
 8007b94:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba0:	2b40      	cmp	r3, #64	; 0x40
 8007ba2:	f040 80b5 	bne.w	8007d10 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 8142 	beq.w	8007e40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	f080 813b 	bcs.w	8007e40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bd0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bdc:	f000 8088 	beq.w	8007cf0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	330c      	adds	r3, #12
 8007be6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	330c      	adds	r3, #12
 8007c08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c0c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c1c:	e841 2300 	strex	r3, r2, [r1]
 8007c20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1d9      	bne.n	8007be0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3314      	adds	r3, #20
 8007c32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c3e:	f023 0301 	bic.w	r3, r3, #1
 8007c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3314      	adds	r3, #20
 8007c4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e1      	bne.n	8007c2c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3314      	adds	r3, #20
 8007c6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3314      	adds	r3, #20
 8007c88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e3      	bne.n	8007c68 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	330c      	adds	r3, #12
 8007cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc0:	f023 0310 	bic.w	r3, r3, #16
 8007cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007cd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cd4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e3      	bne.n	8007cae <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fc fd6a 	bl	80047c4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007cfc:	b292      	uxth	r2, r2
 8007cfe:	1a8a      	subs	r2, r1, r2
 8007d00:	b292      	uxth	r2, r2
 8007d02:	4611      	mov	r1, r2
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d08:	e09a      	b.n	8007e40 <HAL_UART_IRQHandler+0x518>
 8007d0a:	bf00      	nop
 8007d0c:	08008257 	.word	0x08008257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 808c 	beq.w	8007e44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 8087 	beq.w	8007e44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	330c      	adds	r3, #12
 8007d56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d5a:	647a      	str	r2, [r7, #68]	; 0x44
 8007d5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e3      	bne.n	8007d36 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3314      	adds	r3, #20
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3314      	adds	r3, #20
 8007d8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d92:	633a      	str	r2, [r7, #48]	; 0x30
 8007d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e3      	bne.n	8007d6e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	330c      	adds	r3, #12
 8007dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	e853 3f00 	ldrex	r3, [r3]
 8007dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0310 	bic.w	r3, r3, #16
 8007dca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	330c      	adds	r3, #12
 8007dd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007dd8:	61fa      	str	r2, [r7, #28]
 8007dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	69b9      	ldr	r1, [r7, #24]
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	617b      	str	r3, [r7, #20]
   return(result);
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e3      	bne.n	8007db4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8007df4:	4611      	mov	r1, r2
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dfa:	e023      	b.n	8007e44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d009      	beq.n	8007e1c <HAL_UART_IRQHandler+0x4f4>
 8007e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fa33 	bl	8008280 <UART_Transmit_IT>
    return;
 8007e1a:	e014      	b.n	8007e46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00e      	beq.n	8007e46 <HAL_UART_IRQHandler+0x51e>
 8007e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d008      	beq.n	8007e46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fa73 	bl	8008320 <UART_EndTransmit_IT>
    return;
 8007e3a:	e004      	b.n	8007e46 <HAL_UART_IRQHandler+0x51e>
    return;
 8007e3c:	bf00      	nop
 8007e3e:	e002      	b.n	8007e46 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e40:	bf00      	nop
 8007e42:	e000      	b.n	8007e46 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e44:	bf00      	nop
  }
}
 8007e46:	37e8      	adds	r7, #232	; 0xe8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a10      	ldr	r2, [pc, #64]	; (8007f50 <UART_InitCallbacksToDefault+0x4c>)
 8007f10:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a0f      	ldr	r2, [pc, #60]	; (8007f54 <UART_InitCallbacksToDefault+0x50>)
 8007f16:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a0f      	ldr	r2, [pc, #60]	; (8007f58 <UART_InitCallbacksToDefault+0x54>)
 8007f1c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a0e      	ldr	r2, [pc, #56]	; (8007f5c <UART_InitCallbacksToDefault+0x58>)
 8007f22:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a0e      	ldr	r2, [pc, #56]	; (8007f60 <UART_InitCallbacksToDefault+0x5c>)
 8007f28:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a0d      	ldr	r2, [pc, #52]	; (8007f64 <UART_InitCallbacksToDefault+0x60>)
 8007f2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a0d      	ldr	r2, [pc, #52]	; (8007f68 <UART_InitCallbacksToDefault+0x64>)
 8007f34:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a0c      	ldr	r2, [pc, #48]	; (8007f6c <UART_InitCallbacksToDefault+0x68>)
 8007f3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a0c      	ldr	r2, [pc, #48]	; (8007f70 <UART_InitCallbacksToDefault+0x6c>)
 8007f40:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	08007e61 	.word	0x08007e61
 8007f54:	08007e4d 	.word	0x08007e4d
 8007f58:	08007e89 	.word	0x08007e89
 8007f5c:	08007e75 	.word	0x08007e75
 8007f60:	08007e9d 	.word	0x08007e9d
 8007f64:	08007eb1 	.word	0x08007eb1
 8007f68:	08007ec5 	.word	0x08007ec5
 8007f6c:	08007ed9 	.word	0x08007ed9
 8007f70:	08007eed 	.word	0x08007eed

08007f74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b090      	sub	sp, #64	; 0x40
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d137      	bne.n	8008000 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f92:	2200      	movs	r2, #0
 8007f94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3314      	adds	r3, #20
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fac:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3314      	adds	r3, #20
 8007fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fb6:	633a      	str	r2, [r7, #48]	; 0x30
 8007fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e5      	bne.n	8007f96 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	330c      	adds	r3, #12
 8007fd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	330c      	adds	r3, #12
 8007fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fea:	61fa      	str	r2, [r7, #28]
 8007fec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	69b9      	ldr	r1, [r7, #24]
 8007ff0:	69fa      	ldr	r2, [r7, #28]
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e5      	bne.n	8007fca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ffe:	e003      	b.n	8008008 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8008000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008004:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008006:	4798      	blx	r3
}
 8008008:	bf00      	nop
 800800a:	3740      	adds	r7, #64	; 0x40
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800804a:	2b80      	cmp	r3, #128	; 0x80
 800804c:	bf0c      	ite	eq
 800804e:	2301      	moveq	r3, #1
 8008050:	2300      	movne	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b21      	cmp	r3, #33	; 0x21
 8008060:	d108      	bne.n	8008074 <UART_DMAError+0x46>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d005      	beq.n	8008074 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2200      	movs	r2, #0
 800806c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800806e:	68b8      	ldr	r0, [r7, #8]
 8008070:	f000 f866 	bl	8008140 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	bf0c      	ite	eq
 8008082:	2301      	moveq	r3, #1
 8008084:	2300      	movne	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b22      	cmp	r3, #34	; 0x22
 8008094:	d108      	bne.n	80080a8 <UART_DMAError+0x7a>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2200      	movs	r2, #0
 80080a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80080a2:	68b8      	ldr	r0, [r7, #8]
 80080a4:	f000 f874 	bl	8008190 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ac:	f043 0210 	orr.w	r2, r3, #16
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b8:	68b8      	ldr	r0, [r7, #8]
 80080ba:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080bc:	bf00      	nop
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	88fa      	ldrh	r2, [r7, #6]
 80080dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	88fa      	ldrh	r2, [r7, #6]
 80080e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2222      	movs	r2, #34	; 0x22
 80080ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008110:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	695a      	ldr	r2, [r3, #20]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0201 	orr.w	r2, r2, #1
 8008120:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0220 	orr.w	r2, r2, #32
 8008130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008140:	b480      	push	{r7}
 8008142:	b089      	sub	sp, #36	; 0x24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	330c      	adds	r3, #12
 800814e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	60bb      	str	r3, [r7, #8]
   return(result);
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800815e:	61fb      	str	r3, [r7, #28]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	330c      	adds	r3, #12
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	61ba      	str	r2, [r7, #24]
 800816a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816c:	6979      	ldr	r1, [r7, #20]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	e841 2300 	strex	r3, r2, [r1]
 8008174:	613b      	str	r3, [r7, #16]
   return(result);
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e5      	bne.n	8008148 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008184:	bf00      	nop
 8008186:	3724      	adds	r7, #36	; 0x24
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b095      	sub	sp, #84	; 0x54
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	330c      	adds	r3, #12
 800819e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a2:	e853 3f00 	ldrex	r3, [r3]
 80081a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	330c      	adds	r3, #12
 80081b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081b8:	643a      	str	r2, [r7, #64]	; 0x40
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081c0:	e841 2300 	strex	r3, r2, [r1]
 80081c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e5      	bne.n	8008198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3314      	adds	r3, #20
 80081d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	61fb      	str	r3, [r7, #28]
   return(result);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f023 0301 	bic.w	r3, r3, #1
 80081e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3314      	adds	r3, #20
 80081ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e5      	bne.n	80081cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008204:	2b01      	cmp	r3, #1
 8008206:	d119      	bne.n	800823c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	330c      	adds	r3, #12
 800820e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	e853 3f00 	ldrex	r3, [r3]
 8008216:	60bb      	str	r3, [r7, #8]
   return(result);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f023 0310 	bic.w	r3, r3, #16
 800821e:	647b      	str	r3, [r7, #68]	; 0x44
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	330c      	adds	r3, #12
 8008226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008228:	61ba      	str	r2, [r7, #24]
 800822a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6979      	ldr	r1, [r7, #20]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	e841 2300 	strex	r3, r2, [r1]
 8008234:	613b      	str	r3, [r7, #16]
   return(result);
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e5      	bne.n	8008208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	631a      	str	r2, [r3, #48]	; 0x30
}
 800824a:	bf00      	nop
 800824c:	3754      	adds	r7, #84	; 0x54
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008278:	bf00      	nop
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b21      	cmp	r3, #33	; 0x21
 8008292:	d13e      	bne.n	8008312 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829c:	d114      	bne.n	80082c8 <UART_Transmit_IT+0x48>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d110      	bne.n	80082c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	1c9a      	adds	r2, r3, #2
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	621a      	str	r2, [r3, #32]
 80082c6:	e008      	b.n	80082da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	1c59      	adds	r1, r3, #1
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6211      	str	r1, [r2, #32]
 80082d2:	781a      	ldrb	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	4619      	mov	r1, r3
 80082e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10f      	bne.n	800830e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68da      	ldr	r2, [r3, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800830c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	e000      	b.n	8008314 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008312:	2302      	movs	r3, #2
  }
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008336:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2220      	movs	r2, #32
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b08c      	sub	sp, #48	; 0x30
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b22      	cmp	r3, #34	; 0x22
 8008364:	f040 80ad 	bne.w	80084c2 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008370:	d117      	bne.n	80083a2 <UART_Receive_IT+0x50>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d113      	bne.n	80083a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	b29b      	uxth	r3, r3
 800838c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008390:	b29a      	uxth	r2, r3
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839a:	1c9a      	adds	r2, r3, #2
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	629a      	str	r2, [r3, #40]	; 0x28
 80083a0:	e026      	b.n	80083f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b4:	d007      	beq.n	80083c6 <UART_Receive_IT+0x74>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10a      	bne.n	80083d4 <UART_Receive_IT+0x82>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	e008      	b.n	80083e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	4619      	mov	r1, r3
 80083fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008400:	2b00      	cmp	r3, #0
 8008402:	d15c      	bne.n	80084be <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0220 	bic.w	r2, r2, #32
 8008412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	695a      	ldr	r2, [r3, #20]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0201 	bic.w	r2, r2, #1
 8008432:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008440:	2b01      	cmp	r3, #1
 8008442:	d136      	bne.n	80084b2 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	330c      	adds	r3, #12
 8008450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	613b      	str	r3, [r7, #16]
   return(result);
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f023 0310 	bic.w	r3, r3, #16
 8008460:	627b      	str	r3, [r7, #36]	; 0x24
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	330c      	adds	r3, #12
 8008468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846a:	623a      	str	r2, [r7, #32]
 800846c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	69f9      	ldr	r1, [r7, #28]
 8008470:	6a3a      	ldr	r2, [r7, #32]
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	61bb      	str	r3, [r7, #24]
   return(result);
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e5      	bne.n	800844a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b10      	cmp	r3, #16
 800848a:	d10a      	bne.n	80084a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80084aa:	4611      	mov	r1, r2
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	4798      	blx	r3
 80084b0:	e003      	b.n	80084ba <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	e002      	b.n	80084c4 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	e000      	b.n	80084c4 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80084c2:	2302      	movs	r3, #2
  }
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3730      	adds	r7, #48	; 0x30
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084d0:	b0c0      	sub	sp, #256	; 0x100
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e8:	68d9      	ldr	r1, [r3, #12]
 80084ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	ea40 0301 	orr.w	r3, r0, r1
 80084f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	431a      	orrs	r2, r3
 8008504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	431a      	orrs	r2, r3
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	4313      	orrs	r3, r2
 8008514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008524:	f021 010c 	bic.w	r1, r1, #12
 8008528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008532:	430b      	orrs	r3, r1
 8008534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008546:	6999      	ldr	r1, [r3, #24]
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	ea40 0301 	orr.w	r3, r0, r1
 8008552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4b8f      	ldr	r3, [pc, #572]	; (8008798 <UART_SetConfig+0x2cc>)
 800855c:	429a      	cmp	r2, r3
 800855e:	d005      	beq.n	800856c <UART_SetConfig+0xa0>
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4b8d      	ldr	r3, [pc, #564]	; (800879c <UART_SetConfig+0x2d0>)
 8008568:	429a      	cmp	r2, r3
 800856a:	d104      	bne.n	8008576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800856c:	f7fd fa84 	bl	8005a78 <HAL_RCC_GetPCLK2Freq>
 8008570:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008574:	e003      	b.n	800857e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008576:	f7fd fa6b 	bl	8005a50 <HAL_RCC_GetPCLK1Freq>
 800857a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008588:	f040 810c 	bne.w	80087a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800858c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008590:	2200      	movs	r2, #0
 8008592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800859a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800859e:	4622      	mov	r2, r4
 80085a0:	462b      	mov	r3, r5
 80085a2:	1891      	adds	r1, r2, r2
 80085a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80085a6:	415b      	adcs	r3, r3
 80085a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80085ae:	4621      	mov	r1, r4
 80085b0:	eb12 0801 	adds.w	r8, r2, r1
 80085b4:	4629      	mov	r1, r5
 80085b6:	eb43 0901 	adc.w	r9, r3, r1
 80085ba:	f04f 0200 	mov.w	r2, #0
 80085be:	f04f 0300 	mov.w	r3, #0
 80085c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085ce:	4690      	mov	r8, r2
 80085d0:	4699      	mov	r9, r3
 80085d2:	4623      	mov	r3, r4
 80085d4:	eb18 0303 	adds.w	r3, r8, r3
 80085d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085dc:	462b      	mov	r3, r5
 80085de:	eb49 0303 	adc.w	r3, r9, r3
 80085e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085fa:	460b      	mov	r3, r1
 80085fc:	18db      	adds	r3, r3, r3
 80085fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008600:	4613      	mov	r3, r2
 8008602:	eb42 0303 	adc.w	r3, r2, r3
 8008606:	657b      	str	r3, [r7, #84]	; 0x54
 8008608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800860c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008610:	f7f8 fbcc 	bl	8000dac <__aeabi_uldivmod>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4b61      	ldr	r3, [pc, #388]	; (80087a0 <UART_SetConfig+0x2d4>)
 800861a:	fba3 2302 	umull	r2, r3, r3, r2
 800861e:	095b      	lsrs	r3, r3, #5
 8008620:	011c      	lsls	r4, r3, #4
 8008622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008626:	2200      	movs	r2, #0
 8008628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800862c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008634:	4642      	mov	r2, r8
 8008636:	464b      	mov	r3, r9
 8008638:	1891      	adds	r1, r2, r2
 800863a:	64b9      	str	r1, [r7, #72]	; 0x48
 800863c:	415b      	adcs	r3, r3
 800863e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008644:	4641      	mov	r1, r8
 8008646:	eb12 0a01 	adds.w	sl, r2, r1
 800864a:	4649      	mov	r1, r9
 800864c:	eb43 0b01 	adc.w	fp, r3, r1
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800865c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008664:	4692      	mov	sl, r2
 8008666:	469b      	mov	fp, r3
 8008668:	4643      	mov	r3, r8
 800866a:	eb1a 0303 	adds.w	r3, sl, r3
 800866e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008672:	464b      	mov	r3, r9
 8008674:	eb4b 0303 	adc.w	r3, fp, r3
 8008678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800867c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008688:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800868c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008690:	460b      	mov	r3, r1
 8008692:	18db      	adds	r3, r3, r3
 8008694:	643b      	str	r3, [r7, #64]	; 0x40
 8008696:	4613      	mov	r3, r2
 8008698:	eb42 0303 	adc.w	r3, r2, r3
 800869c:	647b      	str	r3, [r7, #68]	; 0x44
 800869e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80086a6:	f7f8 fb81 	bl	8000dac <__aeabi_uldivmod>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4611      	mov	r1, r2
 80086b0:	4b3b      	ldr	r3, [pc, #236]	; (80087a0 <UART_SetConfig+0x2d4>)
 80086b2:	fba3 2301 	umull	r2, r3, r3, r1
 80086b6:	095b      	lsrs	r3, r3, #5
 80086b8:	2264      	movs	r2, #100	; 0x64
 80086ba:	fb02 f303 	mul.w	r3, r2, r3
 80086be:	1acb      	subs	r3, r1, r3
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80086c6:	4b36      	ldr	r3, [pc, #216]	; (80087a0 <UART_SetConfig+0x2d4>)
 80086c8:	fba3 2302 	umull	r2, r3, r3, r2
 80086cc:	095b      	lsrs	r3, r3, #5
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086d4:	441c      	add	r4, r3
 80086d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80086e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80086e8:	4642      	mov	r2, r8
 80086ea:	464b      	mov	r3, r9
 80086ec:	1891      	adds	r1, r2, r2
 80086ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80086f0:	415b      	adcs	r3, r3
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086f8:	4641      	mov	r1, r8
 80086fa:	1851      	adds	r1, r2, r1
 80086fc:	6339      	str	r1, [r7, #48]	; 0x30
 80086fe:	4649      	mov	r1, r9
 8008700:	414b      	adcs	r3, r1
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008710:	4659      	mov	r1, fp
 8008712:	00cb      	lsls	r3, r1, #3
 8008714:	4651      	mov	r1, sl
 8008716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800871a:	4651      	mov	r1, sl
 800871c:	00ca      	lsls	r2, r1, #3
 800871e:	4610      	mov	r0, r2
 8008720:	4619      	mov	r1, r3
 8008722:	4603      	mov	r3, r0
 8008724:	4642      	mov	r2, r8
 8008726:	189b      	adds	r3, r3, r2
 8008728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800872c:	464b      	mov	r3, r9
 800872e:	460a      	mov	r2, r1
 8008730:	eb42 0303 	adc.w	r3, r2, r3
 8008734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008744:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800874c:	460b      	mov	r3, r1
 800874e:	18db      	adds	r3, r3, r3
 8008750:	62bb      	str	r3, [r7, #40]	; 0x28
 8008752:	4613      	mov	r3, r2
 8008754:	eb42 0303 	adc.w	r3, r2, r3
 8008758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800875a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800875e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008762:	f7f8 fb23 	bl	8000dac <__aeabi_uldivmod>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <UART_SetConfig+0x2d4>)
 800876c:	fba3 1302 	umull	r1, r3, r3, r2
 8008770:	095b      	lsrs	r3, r3, #5
 8008772:	2164      	movs	r1, #100	; 0x64
 8008774:	fb01 f303 	mul.w	r3, r1, r3
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	3332      	adds	r3, #50	; 0x32
 800877e:	4a08      	ldr	r2, [pc, #32]	; (80087a0 <UART_SetConfig+0x2d4>)
 8008780:	fba2 2303 	umull	r2, r3, r2, r3
 8008784:	095b      	lsrs	r3, r3, #5
 8008786:	f003 0207 	and.w	r2, r3, #7
 800878a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4422      	add	r2, r4
 8008792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008794:	e105      	b.n	80089a2 <UART_SetConfig+0x4d6>
 8008796:	bf00      	nop
 8008798:	40011000 	.word	0x40011000
 800879c:	40011400 	.word	0x40011400
 80087a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80087b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80087b6:	4642      	mov	r2, r8
 80087b8:	464b      	mov	r3, r9
 80087ba:	1891      	adds	r1, r2, r2
 80087bc:	6239      	str	r1, [r7, #32]
 80087be:	415b      	adcs	r3, r3
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
 80087c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087c6:	4641      	mov	r1, r8
 80087c8:	1854      	adds	r4, r2, r1
 80087ca:	4649      	mov	r1, r9
 80087cc:	eb43 0501 	adc.w	r5, r3, r1
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	00eb      	lsls	r3, r5, #3
 80087da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087de:	00e2      	lsls	r2, r4, #3
 80087e0:	4614      	mov	r4, r2
 80087e2:	461d      	mov	r5, r3
 80087e4:	4643      	mov	r3, r8
 80087e6:	18e3      	adds	r3, r4, r3
 80087e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087ec:	464b      	mov	r3, r9
 80087ee:	eb45 0303 	adc.w	r3, r5, r3
 80087f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008806:	f04f 0200 	mov.w	r2, #0
 800880a:	f04f 0300 	mov.w	r3, #0
 800880e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008812:	4629      	mov	r1, r5
 8008814:	008b      	lsls	r3, r1, #2
 8008816:	4621      	mov	r1, r4
 8008818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800881c:	4621      	mov	r1, r4
 800881e:	008a      	lsls	r2, r1, #2
 8008820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008824:	f7f8 fac2 	bl	8000dac <__aeabi_uldivmod>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4b60      	ldr	r3, [pc, #384]	; (80089b0 <UART_SetConfig+0x4e4>)
 800882e:	fba3 2302 	umull	r2, r3, r3, r2
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	011c      	lsls	r4, r3, #4
 8008836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800883a:	2200      	movs	r2, #0
 800883c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008848:	4642      	mov	r2, r8
 800884a:	464b      	mov	r3, r9
 800884c:	1891      	adds	r1, r2, r2
 800884e:	61b9      	str	r1, [r7, #24]
 8008850:	415b      	adcs	r3, r3
 8008852:	61fb      	str	r3, [r7, #28]
 8008854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008858:	4641      	mov	r1, r8
 800885a:	1851      	adds	r1, r2, r1
 800885c:	6139      	str	r1, [r7, #16]
 800885e:	4649      	mov	r1, r9
 8008860:	414b      	adcs	r3, r1
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008870:	4659      	mov	r1, fp
 8008872:	00cb      	lsls	r3, r1, #3
 8008874:	4651      	mov	r1, sl
 8008876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800887a:	4651      	mov	r1, sl
 800887c:	00ca      	lsls	r2, r1, #3
 800887e:	4610      	mov	r0, r2
 8008880:	4619      	mov	r1, r3
 8008882:	4603      	mov	r3, r0
 8008884:	4642      	mov	r2, r8
 8008886:	189b      	adds	r3, r3, r2
 8008888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800888c:	464b      	mov	r3, r9
 800888e:	460a      	mov	r2, r1
 8008890:	eb42 0303 	adc.w	r3, r2, r3
 8008894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80088a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80088a4:	f04f 0200 	mov.w	r2, #0
 80088a8:	f04f 0300 	mov.w	r3, #0
 80088ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80088b0:	4649      	mov	r1, r9
 80088b2:	008b      	lsls	r3, r1, #2
 80088b4:	4641      	mov	r1, r8
 80088b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088ba:	4641      	mov	r1, r8
 80088bc:	008a      	lsls	r2, r1, #2
 80088be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80088c2:	f7f8 fa73 	bl	8000dac <__aeabi_uldivmod>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4b39      	ldr	r3, [pc, #228]	; (80089b0 <UART_SetConfig+0x4e4>)
 80088cc:	fba3 1302 	umull	r1, r3, r3, r2
 80088d0:	095b      	lsrs	r3, r3, #5
 80088d2:	2164      	movs	r1, #100	; 0x64
 80088d4:	fb01 f303 	mul.w	r3, r1, r3
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	011b      	lsls	r3, r3, #4
 80088dc:	3332      	adds	r3, #50	; 0x32
 80088de:	4a34      	ldr	r2, [pc, #208]	; (80089b0 <UART_SetConfig+0x4e4>)
 80088e0:	fba2 2303 	umull	r2, r3, r2, r3
 80088e4:	095b      	lsrs	r3, r3, #5
 80088e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088ea:	441c      	add	r4, r3
 80088ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088f0:	2200      	movs	r2, #0
 80088f2:	673b      	str	r3, [r7, #112]	; 0x70
 80088f4:	677a      	str	r2, [r7, #116]	; 0x74
 80088f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088fa:	4642      	mov	r2, r8
 80088fc:	464b      	mov	r3, r9
 80088fe:	1891      	adds	r1, r2, r2
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	415b      	adcs	r3, r3
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800890a:	4641      	mov	r1, r8
 800890c:	1851      	adds	r1, r2, r1
 800890e:	6039      	str	r1, [r7, #0]
 8008910:	4649      	mov	r1, r9
 8008912:	414b      	adcs	r3, r1
 8008914:	607b      	str	r3, [r7, #4]
 8008916:	f04f 0200 	mov.w	r2, #0
 800891a:	f04f 0300 	mov.w	r3, #0
 800891e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008922:	4659      	mov	r1, fp
 8008924:	00cb      	lsls	r3, r1, #3
 8008926:	4651      	mov	r1, sl
 8008928:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800892c:	4651      	mov	r1, sl
 800892e:	00ca      	lsls	r2, r1, #3
 8008930:	4610      	mov	r0, r2
 8008932:	4619      	mov	r1, r3
 8008934:	4603      	mov	r3, r0
 8008936:	4642      	mov	r2, r8
 8008938:	189b      	adds	r3, r3, r2
 800893a:	66bb      	str	r3, [r7, #104]	; 0x68
 800893c:	464b      	mov	r3, r9
 800893e:	460a      	mov	r2, r1
 8008940:	eb42 0303 	adc.w	r3, r2, r3
 8008944:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	663b      	str	r3, [r7, #96]	; 0x60
 8008950:	667a      	str	r2, [r7, #100]	; 0x64
 8008952:	f04f 0200 	mov.w	r2, #0
 8008956:	f04f 0300 	mov.w	r3, #0
 800895a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800895e:	4649      	mov	r1, r9
 8008960:	008b      	lsls	r3, r1, #2
 8008962:	4641      	mov	r1, r8
 8008964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008968:	4641      	mov	r1, r8
 800896a:	008a      	lsls	r2, r1, #2
 800896c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008970:	f7f8 fa1c 	bl	8000dac <__aeabi_uldivmod>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <UART_SetConfig+0x4e4>)
 800897a:	fba3 1302 	umull	r1, r3, r3, r2
 800897e:	095b      	lsrs	r3, r3, #5
 8008980:	2164      	movs	r1, #100	; 0x64
 8008982:	fb01 f303 	mul.w	r3, r1, r3
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	011b      	lsls	r3, r3, #4
 800898a:	3332      	adds	r3, #50	; 0x32
 800898c:	4a08      	ldr	r2, [pc, #32]	; (80089b0 <UART_SetConfig+0x4e4>)
 800898e:	fba2 2303 	umull	r2, r3, r2, r3
 8008992:	095b      	lsrs	r3, r3, #5
 8008994:	f003 020f 	and.w	r2, r3, #15
 8008998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4422      	add	r2, r4
 80089a0:	609a      	str	r2, [r3, #8]
}
 80089a2:	bf00      	nop
 80089a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80089a8:	46bd      	mov	sp, r7
 80089aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089ae:	bf00      	nop
 80089b0:	51eb851f 	.word	0x51eb851f

080089b4 <__errno>:
 80089b4:	4b01      	ldr	r3, [pc, #4]	; (80089bc <__errno+0x8>)
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	20000270 	.word	0x20000270

080089c0 <__libc_init_array>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	4d0d      	ldr	r5, [pc, #52]	; (80089f8 <__libc_init_array+0x38>)
 80089c4:	4c0d      	ldr	r4, [pc, #52]	; (80089fc <__libc_init_array+0x3c>)
 80089c6:	1b64      	subs	r4, r4, r5
 80089c8:	10a4      	asrs	r4, r4, #2
 80089ca:	2600      	movs	r6, #0
 80089cc:	42a6      	cmp	r6, r4
 80089ce:	d109      	bne.n	80089e4 <__libc_init_array+0x24>
 80089d0:	4d0b      	ldr	r5, [pc, #44]	; (8008a00 <__libc_init_array+0x40>)
 80089d2:	4c0c      	ldr	r4, [pc, #48]	; (8008a04 <__libc_init_array+0x44>)
 80089d4:	f000 ff76 	bl	80098c4 <_init>
 80089d8:	1b64      	subs	r4, r4, r5
 80089da:	10a4      	asrs	r4, r4, #2
 80089dc:	2600      	movs	r6, #0
 80089de:	42a6      	cmp	r6, r4
 80089e0:	d105      	bne.n	80089ee <__libc_init_array+0x2e>
 80089e2:	bd70      	pop	{r4, r5, r6, pc}
 80089e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e8:	4798      	blx	r3
 80089ea:	3601      	adds	r6, #1
 80089ec:	e7ee      	b.n	80089cc <__libc_init_array+0xc>
 80089ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f2:	4798      	blx	r3
 80089f4:	3601      	adds	r6, #1
 80089f6:	e7f2      	b.n	80089de <__libc_init_array+0x1e>
 80089f8:	0800a140 	.word	0x0800a140
 80089fc:	0800a140 	.word	0x0800a140
 8008a00:	0800a140 	.word	0x0800a140
 8008a04:	0800a144 	.word	0x0800a144

08008a08 <memcpy>:
 8008a08:	440a      	add	r2, r1
 8008a0a:	4291      	cmp	r1, r2
 8008a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a10:	d100      	bne.n	8008a14 <memcpy+0xc>
 8008a12:	4770      	bx	lr
 8008a14:	b510      	push	{r4, lr}
 8008a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a1e:	4291      	cmp	r1, r2
 8008a20:	d1f9      	bne.n	8008a16 <memcpy+0xe>
 8008a22:	bd10      	pop	{r4, pc}

08008a24 <memset>:
 8008a24:	4402      	add	r2, r0
 8008a26:	4603      	mov	r3, r0
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d100      	bne.n	8008a2e <memset+0xa>
 8008a2c:	4770      	bx	lr
 8008a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a32:	e7f9      	b.n	8008a28 <memset+0x4>

08008a34 <pow>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	ed2d 8b02 	vpush	{d8}
 8008a3a:	eeb0 8a40 	vmov.f32	s16, s0
 8008a3e:	eef0 8a60 	vmov.f32	s17, s1
 8008a42:	ec55 4b11 	vmov	r4, r5, d1
 8008a46:	f000 f893 	bl	8008b70 <__ieee754_pow>
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	4620      	mov	r0, r4
 8008a50:	4629      	mov	r1, r5
 8008a52:	ec57 6b10 	vmov	r6, r7, d0
 8008a56:	f7f8 f815 	bl	8000a84 <__aeabi_dcmpun>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d13b      	bne.n	8008ad6 <pow+0xa2>
 8008a5e:	ec51 0b18 	vmov	r0, r1, d8
 8008a62:	2200      	movs	r2, #0
 8008a64:	2300      	movs	r3, #0
 8008a66:	f7f7 ffdb 	bl	8000a20 <__aeabi_dcmpeq>
 8008a6a:	b1b8      	cbz	r0, 8008a9c <pow+0x68>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4620      	mov	r0, r4
 8008a72:	4629      	mov	r1, r5
 8008a74:	f7f7 ffd4 	bl	8000a20 <__aeabi_dcmpeq>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d146      	bne.n	8008b0a <pow+0xd6>
 8008a7c:	ec45 4b10 	vmov	d0, r4, r5
 8008a80:	f000 fe8f 	bl	80097a2 <finite>
 8008a84:	b338      	cbz	r0, 8008ad6 <pow+0xa2>
 8008a86:	2200      	movs	r2, #0
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	f7f7 ffd1 	bl	8000a34 <__aeabi_dcmplt>
 8008a92:	b300      	cbz	r0, 8008ad6 <pow+0xa2>
 8008a94:	f7ff ff8e 	bl	80089b4 <__errno>
 8008a98:	2322      	movs	r3, #34	; 0x22
 8008a9a:	e01b      	b.n	8008ad4 <pow+0xa0>
 8008a9c:	ec47 6b10 	vmov	d0, r6, r7
 8008aa0:	f000 fe7f 	bl	80097a2 <finite>
 8008aa4:	b9e0      	cbnz	r0, 8008ae0 <pow+0xac>
 8008aa6:	eeb0 0a48 	vmov.f32	s0, s16
 8008aaa:	eef0 0a68 	vmov.f32	s1, s17
 8008aae:	f000 fe78 	bl	80097a2 <finite>
 8008ab2:	b1a8      	cbz	r0, 8008ae0 <pow+0xac>
 8008ab4:	ec45 4b10 	vmov	d0, r4, r5
 8008ab8:	f000 fe73 	bl	80097a2 <finite>
 8008abc:	b180      	cbz	r0, 8008ae0 <pow+0xac>
 8008abe:	4632      	mov	r2, r6
 8008ac0:	463b      	mov	r3, r7
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	f7f7 ffdd 	bl	8000a84 <__aeabi_dcmpun>
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d0e2      	beq.n	8008a94 <pow+0x60>
 8008ace:	f7ff ff71 	bl	80089b4 <__errno>
 8008ad2:	2321      	movs	r3, #33	; 0x21
 8008ad4:	6003      	str	r3, [r0, #0]
 8008ad6:	ecbd 8b02 	vpop	{d8}
 8008ada:	ec47 6b10 	vmov	d0, r6, r7
 8008ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	f7f7 ff9a 	bl	8000a20 <__aeabi_dcmpeq>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d0f2      	beq.n	8008ad6 <pow+0xa2>
 8008af0:	eeb0 0a48 	vmov.f32	s0, s16
 8008af4:	eef0 0a68 	vmov.f32	s1, s17
 8008af8:	f000 fe53 	bl	80097a2 <finite>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d0ea      	beq.n	8008ad6 <pow+0xa2>
 8008b00:	ec45 4b10 	vmov	d0, r4, r5
 8008b04:	f000 fe4d 	bl	80097a2 <finite>
 8008b08:	e7c3      	b.n	8008a92 <pow+0x5e>
 8008b0a:	4f01      	ldr	r7, [pc, #4]	; (8008b10 <pow+0xdc>)
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	e7e2      	b.n	8008ad6 <pow+0xa2>
 8008b10:	3ff00000 	.word	0x3ff00000

08008b14 <sqrt>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	ed2d 8b02 	vpush	{d8}
 8008b1a:	ec55 4b10 	vmov	r4, r5, d0
 8008b1e:	f000 fd55 	bl	80095cc <__ieee754_sqrt>
 8008b22:	4622      	mov	r2, r4
 8008b24:	462b      	mov	r3, r5
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	eeb0 8a40 	vmov.f32	s16, s0
 8008b2e:	eef0 8a60 	vmov.f32	s17, s1
 8008b32:	f7f7 ffa7 	bl	8000a84 <__aeabi_dcmpun>
 8008b36:	b990      	cbnz	r0, 8008b5e <sqrt+0x4a>
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 ff78 	bl	8000a34 <__aeabi_dcmplt>
 8008b44:	b158      	cbz	r0, 8008b5e <sqrt+0x4a>
 8008b46:	f7ff ff35 	bl	80089b4 <__errno>
 8008b4a:	2321      	movs	r3, #33	; 0x21
 8008b4c:	6003      	str	r3, [r0, #0]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2300      	movs	r3, #0
 8008b52:	4610      	mov	r0, r2
 8008b54:	4619      	mov	r1, r3
 8008b56:	f7f7 fe25 	bl	80007a4 <__aeabi_ddiv>
 8008b5a:	ec41 0b18 	vmov	d8, r0, r1
 8008b5e:	eeb0 0a48 	vmov.f32	s0, s16
 8008b62:	eef0 0a68 	vmov.f32	s1, s17
 8008b66:	ecbd 8b02 	vpop	{d8}
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	0000      	movs	r0, r0
	...

08008b70 <__ieee754_pow>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	ed2d 8b06 	vpush	{d8-d10}
 8008b78:	b089      	sub	sp, #36	; 0x24
 8008b7a:	ed8d 1b00 	vstr	d1, [sp]
 8008b7e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008b82:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008b86:	ea58 0102 	orrs.w	r1, r8, r2
 8008b8a:	ec57 6b10 	vmov	r6, r7, d0
 8008b8e:	d115      	bne.n	8008bbc <__ieee754_pow+0x4c>
 8008b90:	19b3      	adds	r3, r6, r6
 8008b92:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008b96:	4152      	adcs	r2, r2
 8008b98:	4299      	cmp	r1, r3
 8008b9a:	4b89      	ldr	r3, [pc, #548]	; (8008dc0 <__ieee754_pow+0x250>)
 8008b9c:	4193      	sbcs	r3, r2
 8008b9e:	f080 84d2 	bcs.w	8009546 <__ieee754_pow+0x9d6>
 8008ba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	4639      	mov	r1, r7
 8008baa:	f7f7 fb1b 	bl	80001e4 <__adddf3>
 8008bae:	ec41 0b10 	vmov	d0, r0, r1
 8008bb2:	b009      	add	sp, #36	; 0x24
 8008bb4:	ecbd 8b06 	vpop	{d8-d10}
 8008bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbc:	4b81      	ldr	r3, [pc, #516]	; (8008dc4 <__ieee754_pow+0x254>)
 8008bbe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008bc2:	429c      	cmp	r4, r3
 8008bc4:	ee10 aa10 	vmov	sl, s0
 8008bc8:	463d      	mov	r5, r7
 8008bca:	dc06      	bgt.n	8008bda <__ieee754_pow+0x6a>
 8008bcc:	d101      	bne.n	8008bd2 <__ieee754_pow+0x62>
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	d1e7      	bne.n	8008ba2 <__ieee754_pow+0x32>
 8008bd2:	4598      	cmp	r8, r3
 8008bd4:	dc01      	bgt.n	8008bda <__ieee754_pow+0x6a>
 8008bd6:	d10f      	bne.n	8008bf8 <__ieee754_pow+0x88>
 8008bd8:	b172      	cbz	r2, 8008bf8 <__ieee754_pow+0x88>
 8008bda:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008bde:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008be2:	ea55 050a 	orrs.w	r5, r5, sl
 8008be6:	d1dc      	bne.n	8008ba2 <__ieee754_pow+0x32>
 8008be8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008bec:	18db      	adds	r3, r3, r3
 8008bee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008bf2:	4152      	adcs	r2, r2
 8008bf4:	429d      	cmp	r5, r3
 8008bf6:	e7d0      	b.n	8008b9a <__ieee754_pow+0x2a>
 8008bf8:	2d00      	cmp	r5, #0
 8008bfa:	da3b      	bge.n	8008c74 <__ieee754_pow+0x104>
 8008bfc:	4b72      	ldr	r3, [pc, #456]	; (8008dc8 <__ieee754_pow+0x258>)
 8008bfe:	4598      	cmp	r8, r3
 8008c00:	dc51      	bgt.n	8008ca6 <__ieee754_pow+0x136>
 8008c02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008c06:	4598      	cmp	r8, r3
 8008c08:	f340 84ac 	ble.w	8009564 <__ieee754_pow+0x9f4>
 8008c0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c14:	2b14      	cmp	r3, #20
 8008c16:	dd0f      	ble.n	8008c38 <__ieee754_pow+0xc8>
 8008c18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c1c:	fa22 f103 	lsr.w	r1, r2, r3
 8008c20:	fa01 f303 	lsl.w	r3, r1, r3
 8008c24:	4293      	cmp	r3, r2
 8008c26:	f040 849d 	bne.w	8009564 <__ieee754_pow+0x9f4>
 8008c2a:	f001 0101 	and.w	r1, r1, #1
 8008c2e:	f1c1 0302 	rsb	r3, r1, #2
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	b182      	cbz	r2, 8008c58 <__ieee754_pow+0xe8>
 8008c36:	e05f      	b.n	8008cf8 <__ieee754_pow+0x188>
 8008c38:	2a00      	cmp	r2, #0
 8008c3a:	d15b      	bne.n	8008cf4 <__ieee754_pow+0x184>
 8008c3c:	f1c3 0314 	rsb	r3, r3, #20
 8008c40:	fa48 f103 	asr.w	r1, r8, r3
 8008c44:	fa01 f303 	lsl.w	r3, r1, r3
 8008c48:	4543      	cmp	r3, r8
 8008c4a:	f040 8488 	bne.w	800955e <__ieee754_pow+0x9ee>
 8008c4e:	f001 0101 	and.w	r1, r1, #1
 8008c52:	f1c1 0302 	rsb	r3, r1, #2
 8008c56:	9304      	str	r3, [sp, #16]
 8008c58:	4b5c      	ldr	r3, [pc, #368]	; (8008dcc <__ieee754_pow+0x25c>)
 8008c5a:	4598      	cmp	r8, r3
 8008c5c:	d132      	bne.n	8008cc4 <__ieee754_pow+0x154>
 8008c5e:	f1b9 0f00 	cmp.w	r9, #0
 8008c62:	f280 8478 	bge.w	8009556 <__ieee754_pow+0x9e6>
 8008c66:	4959      	ldr	r1, [pc, #356]	; (8008dcc <__ieee754_pow+0x25c>)
 8008c68:	4632      	mov	r2, r6
 8008c6a:	463b      	mov	r3, r7
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	f7f7 fd99 	bl	80007a4 <__aeabi_ddiv>
 8008c72:	e79c      	b.n	8008bae <__ieee754_pow+0x3e>
 8008c74:	2300      	movs	r3, #0
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	2a00      	cmp	r2, #0
 8008c7a:	d13d      	bne.n	8008cf8 <__ieee754_pow+0x188>
 8008c7c:	4b51      	ldr	r3, [pc, #324]	; (8008dc4 <__ieee754_pow+0x254>)
 8008c7e:	4598      	cmp	r8, r3
 8008c80:	d1ea      	bne.n	8008c58 <__ieee754_pow+0xe8>
 8008c82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008c86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008c8a:	ea53 030a 	orrs.w	r3, r3, sl
 8008c8e:	f000 845a 	beq.w	8009546 <__ieee754_pow+0x9d6>
 8008c92:	4b4f      	ldr	r3, [pc, #316]	; (8008dd0 <__ieee754_pow+0x260>)
 8008c94:	429c      	cmp	r4, r3
 8008c96:	dd08      	ble.n	8008caa <__ieee754_pow+0x13a>
 8008c98:	f1b9 0f00 	cmp.w	r9, #0
 8008c9c:	f2c0 8457 	blt.w	800954e <__ieee754_pow+0x9de>
 8008ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ca4:	e783      	b.n	8008bae <__ieee754_pow+0x3e>
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	e7e5      	b.n	8008c76 <__ieee754_pow+0x106>
 8008caa:	f1b9 0f00 	cmp.w	r9, #0
 8008cae:	f04f 0000 	mov.w	r0, #0
 8008cb2:	f04f 0100 	mov.w	r1, #0
 8008cb6:	f6bf af7a 	bge.w	8008bae <__ieee754_pow+0x3e>
 8008cba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008cbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008cc2:	e774      	b.n	8008bae <__ieee754_pow+0x3e>
 8008cc4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008cc8:	d106      	bne.n	8008cd8 <__ieee754_pow+0x168>
 8008cca:	4632      	mov	r2, r6
 8008ccc:	463b      	mov	r3, r7
 8008cce:	4630      	mov	r0, r6
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f7 fc3d 	bl	8000550 <__aeabi_dmul>
 8008cd6:	e76a      	b.n	8008bae <__ieee754_pow+0x3e>
 8008cd8:	4b3e      	ldr	r3, [pc, #248]	; (8008dd4 <__ieee754_pow+0x264>)
 8008cda:	4599      	cmp	r9, r3
 8008cdc:	d10c      	bne.n	8008cf8 <__ieee754_pow+0x188>
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	db0a      	blt.n	8008cf8 <__ieee754_pow+0x188>
 8008ce2:	ec47 6b10 	vmov	d0, r6, r7
 8008ce6:	b009      	add	sp, #36	; 0x24
 8008ce8:	ecbd 8b06 	vpop	{d8-d10}
 8008cec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	f000 bc6c 	b.w	80095cc <__ieee754_sqrt>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9304      	str	r3, [sp, #16]
 8008cf8:	ec47 6b10 	vmov	d0, r6, r7
 8008cfc:	f000 fd48 	bl	8009790 <fabs>
 8008d00:	ec51 0b10 	vmov	r0, r1, d0
 8008d04:	f1ba 0f00 	cmp.w	sl, #0
 8008d08:	d129      	bne.n	8008d5e <__ieee754_pow+0x1ee>
 8008d0a:	b124      	cbz	r4, 8008d16 <__ieee754_pow+0x1a6>
 8008d0c:	4b2f      	ldr	r3, [pc, #188]	; (8008dcc <__ieee754_pow+0x25c>)
 8008d0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d123      	bne.n	8008d5e <__ieee754_pow+0x1ee>
 8008d16:	f1b9 0f00 	cmp.w	r9, #0
 8008d1a:	da05      	bge.n	8008d28 <__ieee754_pow+0x1b8>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	2000      	movs	r0, #0
 8008d22:	492a      	ldr	r1, [pc, #168]	; (8008dcc <__ieee754_pow+0x25c>)
 8008d24:	f7f7 fd3e 	bl	80007a4 <__aeabi_ddiv>
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	f6bf af40 	bge.w	8008bae <__ieee754_pow+0x3e>
 8008d2e:	9b04      	ldr	r3, [sp, #16]
 8008d30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d38:	4323      	orrs	r3, r4
 8008d3a:	d108      	bne.n	8008d4e <__ieee754_pow+0x1de>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4610      	mov	r0, r2
 8008d42:	4619      	mov	r1, r3
 8008d44:	f7f7 fa4c 	bl	80001e0 <__aeabi_dsub>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	e78f      	b.n	8008c6e <__ieee754_pow+0xfe>
 8008d4e:	9b04      	ldr	r3, [sp, #16]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	f47f af2c 	bne.w	8008bae <__ieee754_pow+0x3e>
 8008d56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	e727      	b.n	8008bae <__ieee754_pow+0x3e>
 8008d5e:	0feb      	lsrs	r3, r5, #31
 8008d60:	3b01      	subs	r3, #1
 8008d62:	9306      	str	r3, [sp, #24]
 8008d64:	9a06      	ldr	r2, [sp, #24]
 8008d66:	9b04      	ldr	r3, [sp, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d102      	bne.n	8008d72 <__ieee754_pow+0x202>
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	463b      	mov	r3, r7
 8008d70:	e7e6      	b.n	8008d40 <__ieee754_pow+0x1d0>
 8008d72:	4b19      	ldr	r3, [pc, #100]	; (8008dd8 <__ieee754_pow+0x268>)
 8008d74:	4598      	cmp	r8, r3
 8008d76:	f340 80fb 	ble.w	8008f70 <__ieee754_pow+0x400>
 8008d7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008d7e:	4598      	cmp	r8, r3
 8008d80:	4b13      	ldr	r3, [pc, #76]	; (8008dd0 <__ieee754_pow+0x260>)
 8008d82:	dd0c      	ble.n	8008d9e <__ieee754_pow+0x22e>
 8008d84:	429c      	cmp	r4, r3
 8008d86:	dc0f      	bgt.n	8008da8 <__ieee754_pow+0x238>
 8008d88:	f1b9 0f00 	cmp.w	r9, #0
 8008d8c:	da0f      	bge.n	8008dae <__ieee754_pow+0x23e>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	b009      	add	sp, #36	; 0x24
 8008d92:	ecbd 8b06 	vpop	{d8-d10}
 8008d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9a:	f000 bcf0 	b.w	800977e <__math_oflow>
 8008d9e:	429c      	cmp	r4, r3
 8008da0:	dbf2      	blt.n	8008d88 <__ieee754_pow+0x218>
 8008da2:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <__ieee754_pow+0x25c>)
 8008da4:	429c      	cmp	r4, r3
 8008da6:	dd19      	ble.n	8008ddc <__ieee754_pow+0x26c>
 8008da8:	f1b9 0f00 	cmp.w	r9, #0
 8008dac:	dcef      	bgt.n	8008d8e <__ieee754_pow+0x21e>
 8008dae:	2000      	movs	r0, #0
 8008db0:	b009      	add	sp, #36	; 0x24
 8008db2:	ecbd 8b06 	vpop	{d8-d10}
 8008db6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dba:	f000 bcd7 	b.w	800976c <__math_uflow>
 8008dbe:	bf00      	nop
 8008dc0:	fff00000 	.word	0xfff00000
 8008dc4:	7ff00000 	.word	0x7ff00000
 8008dc8:	433fffff 	.word	0x433fffff
 8008dcc:	3ff00000 	.word	0x3ff00000
 8008dd0:	3fefffff 	.word	0x3fefffff
 8008dd4:	3fe00000 	.word	0x3fe00000
 8008dd8:	41e00000 	.word	0x41e00000
 8008ddc:	4b60      	ldr	r3, [pc, #384]	; (8008f60 <__ieee754_pow+0x3f0>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	f7f7 f9fe 	bl	80001e0 <__aeabi_dsub>
 8008de4:	a354      	add	r3, pc, #336	; (adr r3, 8008f38 <__ieee754_pow+0x3c8>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	4604      	mov	r4, r0
 8008dec:	460d      	mov	r5, r1
 8008dee:	f7f7 fbaf 	bl	8000550 <__aeabi_dmul>
 8008df2:	a353      	add	r3, pc, #332	; (adr r3, 8008f40 <__ieee754_pow+0x3d0>)
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	4606      	mov	r6, r0
 8008dfa:	460f      	mov	r7, r1
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	4629      	mov	r1, r5
 8008e00:	f7f7 fba6 	bl	8000550 <__aeabi_dmul>
 8008e04:	4b57      	ldr	r3, [pc, #348]	; (8008f64 <__ieee754_pow+0x3f4>)
 8008e06:	4682      	mov	sl, r0
 8008e08:	468b      	mov	fp, r1
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	4629      	mov	r1, r5
 8008e10:	f7f7 fb9e 	bl	8000550 <__aeabi_dmul>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	a14b      	add	r1, pc, #300	; (adr r1, 8008f48 <__ieee754_pow+0x3d8>)
 8008e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e1e:	f7f7 f9df 	bl	80001e0 <__aeabi_dsub>
 8008e22:	4622      	mov	r2, r4
 8008e24:	462b      	mov	r3, r5
 8008e26:	f7f7 fb93 	bl	8000550 <__aeabi_dmul>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	2000      	movs	r0, #0
 8008e30:	494d      	ldr	r1, [pc, #308]	; (8008f68 <__ieee754_pow+0x3f8>)
 8008e32:	f7f7 f9d5 	bl	80001e0 <__aeabi_dsub>
 8008e36:	4622      	mov	r2, r4
 8008e38:	4680      	mov	r8, r0
 8008e3a:	4689      	mov	r9, r1
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	4620      	mov	r0, r4
 8008e40:	4629      	mov	r1, r5
 8008e42:	f7f7 fb85 	bl	8000550 <__aeabi_dmul>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	f7f7 fb7f 	bl	8000550 <__aeabi_dmul>
 8008e52:	a33f      	add	r3, pc, #252	; (adr r3, 8008f50 <__ieee754_pow+0x3e0>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fb7a 	bl	8000550 <__aeabi_dmul>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4650      	mov	r0, sl
 8008e62:	4659      	mov	r1, fp
 8008e64:	f7f7 f9bc 	bl	80001e0 <__aeabi_dsub>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4680      	mov	r8, r0
 8008e6e:	4689      	mov	r9, r1
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 f9b6 	bl	80001e4 <__adddf3>
 8008e78:	2000      	movs	r0, #0
 8008e7a:	4632      	mov	r2, r6
 8008e7c:	463b      	mov	r3, r7
 8008e7e:	4604      	mov	r4, r0
 8008e80:	460d      	mov	r5, r1
 8008e82:	f7f7 f9ad 	bl	80001e0 <__aeabi_dsub>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	f7f7 f9a7 	bl	80001e0 <__aeabi_dsub>
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	9a06      	ldr	r2, [sp, #24]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	4682      	mov	sl, r0
 8008e9c:	468b      	mov	fp, r1
 8008e9e:	f040 81e7 	bne.w	8009270 <__ieee754_pow+0x700>
 8008ea2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008f58 <__ieee754_pow+0x3e8>
 8008ea6:	eeb0 8a47 	vmov.f32	s16, s14
 8008eaa:	eef0 8a67 	vmov.f32	s17, s15
 8008eae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008eb2:	2600      	movs	r6, #0
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ebc:	f7f7 f990 	bl	80001e0 <__aeabi_dsub>
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	462b      	mov	r3, r5
 8008ec4:	f7f7 fb44 	bl	8000550 <__aeabi_dmul>
 8008ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ecc:	4680      	mov	r8, r0
 8008ece:	4689      	mov	r9, r1
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	4659      	mov	r1, fp
 8008ed4:	f7f7 fb3c 	bl	8000550 <__aeabi_dmul>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4640      	mov	r0, r8
 8008ede:	4649      	mov	r1, r9
 8008ee0:	f7f7 f980 	bl	80001e4 <__adddf3>
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	4680      	mov	r8, r0
 8008eea:	4689      	mov	r9, r1
 8008eec:	4620      	mov	r0, r4
 8008eee:	4629      	mov	r1, r5
 8008ef0:	f7f7 fb2e 	bl	8000550 <__aeabi_dmul>
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	460d      	mov	r5, r1
 8008efa:	4602      	mov	r2, r0
 8008efc:	4649      	mov	r1, r9
 8008efe:	4640      	mov	r0, r8
 8008f00:	f7f7 f970 	bl	80001e4 <__adddf3>
 8008f04:	4b19      	ldr	r3, [pc, #100]	; (8008f6c <__ieee754_pow+0x3fc>)
 8008f06:	4299      	cmp	r1, r3
 8008f08:	ec45 4b19 	vmov	d9, r4, r5
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	460f      	mov	r7, r1
 8008f10:	468b      	mov	fp, r1
 8008f12:	f340 82f1 	ble.w	80094f8 <__ieee754_pow+0x988>
 8008f16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008f1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008f1e:	4303      	orrs	r3, r0
 8008f20:	f000 81e4 	beq.w	80092ec <__ieee754_pow+0x77c>
 8008f24:	ec51 0b18 	vmov	r0, r1, d8
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f7f7 fd82 	bl	8000a34 <__aeabi_dcmplt>
 8008f30:	3800      	subs	r0, #0
 8008f32:	bf18      	it	ne
 8008f34:	2001      	movne	r0, #1
 8008f36:	e72b      	b.n	8008d90 <__ieee754_pow+0x220>
 8008f38:	60000000 	.word	0x60000000
 8008f3c:	3ff71547 	.word	0x3ff71547
 8008f40:	f85ddf44 	.word	0xf85ddf44
 8008f44:	3e54ae0b 	.word	0x3e54ae0b
 8008f48:	55555555 	.word	0x55555555
 8008f4c:	3fd55555 	.word	0x3fd55555
 8008f50:	652b82fe 	.word	0x652b82fe
 8008f54:	3ff71547 	.word	0x3ff71547
 8008f58:	00000000 	.word	0x00000000
 8008f5c:	bff00000 	.word	0xbff00000
 8008f60:	3ff00000 	.word	0x3ff00000
 8008f64:	3fd00000 	.word	0x3fd00000
 8008f68:	3fe00000 	.word	0x3fe00000
 8008f6c:	408fffff 	.word	0x408fffff
 8008f70:	4bd5      	ldr	r3, [pc, #852]	; (80092c8 <__ieee754_pow+0x758>)
 8008f72:	402b      	ands	r3, r5
 8008f74:	2200      	movs	r2, #0
 8008f76:	b92b      	cbnz	r3, 8008f84 <__ieee754_pow+0x414>
 8008f78:	4bd4      	ldr	r3, [pc, #848]	; (80092cc <__ieee754_pow+0x75c>)
 8008f7a:	f7f7 fae9 	bl	8000550 <__aeabi_dmul>
 8008f7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008f82:	460c      	mov	r4, r1
 8008f84:	1523      	asrs	r3, r4, #20
 8008f86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f8a:	4413      	add	r3, r2
 8008f8c:	9305      	str	r3, [sp, #20]
 8008f8e:	4bd0      	ldr	r3, [pc, #832]	; (80092d0 <__ieee754_pow+0x760>)
 8008f90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008f98:	429c      	cmp	r4, r3
 8008f9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f9e:	dd08      	ble.n	8008fb2 <__ieee754_pow+0x442>
 8008fa0:	4bcc      	ldr	r3, [pc, #816]	; (80092d4 <__ieee754_pow+0x764>)
 8008fa2:	429c      	cmp	r4, r3
 8008fa4:	f340 8162 	ble.w	800926c <__ieee754_pow+0x6fc>
 8008fa8:	9b05      	ldr	r3, [sp, #20]
 8008faa:	3301      	adds	r3, #1
 8008fac:	9305      	str	r3, [sp, #20]
 8008fae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008fb2:	2400      	movs	r4, #0
 8008fb4:	00e3      	lsls	r3, r4, #3
 8008fb6:	9307      	str	r3, [sp, #28]
 8008fb8:	4bc7      	ldr	r3, [pc, #796]	; (80092d8 <__ieee754_pow+0x768>)
 8008fba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fbe:	ed93 7b00 	vldr	d7, [r3]
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	ec53 2b17 	vmov	r2, r3, d7
 8008fc8:	eeb0 9a47 	vmov.f32	s18, s14
 8008fcc:	eef0 9a67 	vmov.f32	s19, s15
 8008fd0:	4682      	mov	sl, r0
 8008fd2:	f7f7 f905 	bl	80001e0 <__aeabi_dsub>
 8008fd6:	4652      	mov	r2, sl
 8008fd8:	4606      	mov	r6, r0
 8008fda:	460f      	mov	r7, r1
 8008fdc:	462b      	mov	r3, r5
 8008fde:	ec51 0b19 	vmov	r0, r1, d9
 8008fe2:	f7f7 f8ff 	bl	80001e4 <__adddf3>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	2000      	movs	r0, #0
 8008fec:	49bb      	ldr	r1, [pc, #748]	; (80092dc <__ieee754_pow+0x76c>)
 8008fee:	f7f7 fbd9 	bl	80007a4 <__aeabi_ddiv>
 8008ff2:	ec41 0b1a 	vmov	d10, r0, r1
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	4639      	mov	r1, r7
 8008ffe:	f7f7 faa7 	bl	8000550 <__aeabi_dmul>
 8009002:	2300      	movs	r3, #0
 8009004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009008:	9302      	str	r3, [sp, #8]
 800900a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800900e:	46ab      	mov	fp, r5
 8009010:	106d      	asrs	r5, r5, #1
 8009012:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009016:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800901a:	ec41 0b18 	vmov	d8, r0, r1
 800901e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009022:	2200      	movs	r2, #0
 8009024:	4640      	mov	r0, r8
 8009026:	4649      	mov	r1, r9
 8009028:	4614      	mov	r4, r2
 800902a:	461d      	mov	r5, r3
 800902c:	f7f7 fa90 	bl	8000550 <__aeabi_dmul>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	f7f7 f8d2 	bl	80001e0 <__aeabi_dsub>
 800903c:	ec53 2b19 	vmov	r2, r3, d9
 8009040:	4606      	mov	r6, r0
 8009042:	460f      	mov	r7, r1
 8009044:	4620      	mov	r0, r4
 8009046:	4629      	mov	r1, r5
 8009048:	f7f7 f8ca 	bl	80001e0 <__aeabi_dsub>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4650      	mov	r0, sl
 8009052:	4659      	mov	r1, fp
 8009054:	f7f7 f8c4 	bl	80001e0 <__aeabi_dsub>
 8009058:	4642      	mov	r2, r8
 800905a:	464b      	mov	r3, r9
 800905c:	f7f7 fa78 	bl	8000550 <__aeabi_dmul>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4630      	mov	r0, r6
 8009066:	4639      	mov	r1, r7
 8009068:	f7f7 f8ba 	bl	80001e0 <__aeabi_dsub>
 800906c:	ec53 2b1a 	vmov	r2, r3, d10
 8009070:	f7f7 fa6e 	bl	8000550 <__aeabi_dmul>
 8009074:	ec53 2b18 	vmov	r2, r3, d8
 8009078:	ec41 0b19 	vmov	d9, r0, r1
 800907c:	ec51 0b18 	vmov	r0, r1, d8
 8009080:	f7f7 fa66 	bl	8000550 <__aeabi_dmul>
 8009084:	a37c      	add	r3, pc, #496	; (adr r3, 8009278 <__ieee754_pow+0x708>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	4604      	mov	r4, r0
 800908c:	460d      	mov	r5, r1
 800908e:	f7f7 fa5f 	bl	8000550 <__aeabi_dmul>
 8009092:	a37b      	add	r3, pc, #492	; (adr r3, 8009280 <__ieee754_pow+0x710>)
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f7f7 f8a4 	bl	80001e4 <__adddf3>
 800909c:	4622      	mov	r2, r4
 800909e:	462b      	mov	r3, r5
 80090a0:	f7f7 fa56 	bl	8000550 <__aeabi_dmul>
 80090a4:	a378      	add	r3, pc, #480	; (adr r3, 8009288 <__ieee754_pow+0x718>)
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	f7f7 f89b 	bl	80001e4 <__adddf3>
 80090ae:	4622      	mov	r2, r4
 80090b0:	462b      	mov	r3, r5
 80090b2:	f7f7 fa4d 	bl	8000550 <__aeabi_dmul>
 80090b6:	a376      	add	r3, pc, #472	; (adr r3, 8009290 <__ieee754_pow+0x720>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	f7f7 f892 	bl	80001e4 <__adddf3>
 80090c0:	4622      	mov	r2, r4
 80090c2:	462b      	mov	r3, r5
 80090c4:	f7f7 fa44 	bl	8000550 <__aeabi_dmul>
 80090c8:	a373      	add	r3, pc, #460	; (adr r3, 8009298 <__ieee754_pow+0x728>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 f889 	bl	80001e4 <__adddf3>
 80090d2:	4622      	mov	r2, r4
 80090d4:	462b      	mov	r3, r5
 80090d6:	f7f7 fa3b 	bl	8000550 <__aeabi_dmul>
 80090da:	a371      	add	r3, pc, #452	; (adr r3, 80092a0 <__ieee754_pow+0x730>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	f7f7 f880 	bl	80001e4 <__adddf3>
 80090e4:	4622      	mov	r2, r4
 80090e6:	4606      	mov	r6, r0
 80090e8:	460f      	mov	r7, r1
 80090ea:	462b      	mov	r3, r5
 80090ec:	4620      	mov	r0, r4
 80090ee:	4629      	mov	r1, r5
 80090f0:	f7f7 fa2e 	bl	8000550 <__aeabi_dmul>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4630      	mov	r0, r6
 80090fa:	4639      	mov	r1, r7
 80090fc:	f7f7 fa28 	bl	8000550 <__aeabi_dmul>
 8009100:	4642      	mov	r2, r8
 8009102:	4604      	mov	r4, r0
 8009104:	460d      	mov	r5, r1
 8009106:	464b      	mov	r3, r9
 8009108:	ec51 0b18 	vmov	r0, r1, d8
 800910c:	f7f7 f86a 	bl	80001e4 <__adddf3>
 8009110:	ec53 2b19 	vmov	r2, r3, d9
 8009114:	f7f7 fa1c 	bl	8000550 <__aeabi_dmul>
 8009118:	4622      	mov	r2, r4
 800911a:	462b      	mov	r3, r5
 800911c:	f7f7 f862 	bl	80001e4 <__adddf3>
 8009120:	4642      	mov	r2, r8
 8009122:	4682      	mov	sl, r0
 8009124:	468b      	mov	fp, r1
 8009126:	464b      	mov	r3, r9
 8009128:	4640      	mov	r0, r8
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 fa10 	bl	8000550 <__aeabi_dmul>
 8009130:	4b6b      	ldr	r3, [pc, #428]	; (80092e0 <__ieee754_pow+0x770>)
 8009132:	2200      	movs	r2, #0
 8009134:	4606      	mov	r6, r0
 8009136:	460f      	mov	r7, r1
 8009138:	f7f7 f854 	bl	80001e4 <__adddf3>
 800913c:	4652      	mov	r2, sl
 800913e:	465b      	mov	r3, fp
 8009140:	f7f7 f850 	bl	80001e4 <__adddf3>
 8009144:	2000      	movs	r0, #0
 8009146:	4604      	mov	r4, r0
 8009148:	460d      	mov	r5, r1
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4640      	mov	r0, r8
 8009150:	4649      	mov	r1, r9
 8009152:	f7f7 f9fd 	bl	8000550 <__aeabi_dmul>
 8009156:	4b62      	ldr	r3, [pc, #392]	; (80092e0 <__ieee754_pow+0x770>)
 8009158:	4680      	mov	r8, r0
 800915a:	4689      	mov	r9, r1
 800915c:	2200      	movs	r2, #0
 800915e:	4620      	mov	r0, r4
 8009160:	4629      	mov	r1, r5
 8009162:	f7f7 f83d 	bl	80001e0 <__aeabi_dsub>
 8009166:	4632      	mov	r2, r6
 8009168:	463b      	mov	r3, r7
 800916a:	f7f7 f839 	bl	80001e0 <__aeabi_dsub>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4650      	mov	r0, sl
 8009174:	4659      	mov	r1, fp
 8009176:	f7f7 f833 	bl	80001e0 <__aeabi_dsub>
 800917a:	ec53 2b18 	vmov	r2, r3, d8
 800917e:	f7f7 f9e7 	bl	8000550 <__aeabi_dmul>
 8009182:	4622      	mov	r2, r4
 8009184:	4606      	mov	r6, r0
 8009186:	460f      	mov	r7, r1
 8009188:	462b      	mov	r3, r5
 800918a:	ec51 0b19 	vmov	r0, r1, d9
 800918e:	f7f7 f9df 	bl	8000550 <__aeabi_dmul>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	4630      	mov	r0, r6
 8009198:	4639      	mov	r1, r7
 800919a:	f7f7 f823 	bl	80001e4 <__adddf3>
 800919e:	4606      	mov	r6, r0
 80091a0:	460f      	mov	r7, r1
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	4640      	mov	r0, r8
 80091a8:	4649      	mov	r1, r9
 80091aa:	f7f7 f81b 	bl	80001e4 <__adddf3>
 80091ae:	a33e      	add	r3, pc, #248	; (adr r3, 80092a8 <__ieee754_pow+0x738>)
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	2000      	movs	r0, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	460d      	mov	r5, r1
 80091ba:	f7f7 f9c9 	bl	8000550 <__aeabi_dmul>
 80091be:	4642      	mov	r2, r8
 80091c0:	ec41 0b18 	vmov	d8, r0, r1
 80091c4:	464b      	mov	r3, r9
 80091c6:	4620      	mov	r0, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7f7 f809 	bl	80001e0 <__aeabi_dsub>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4630      	mov	r0, r6
 80091d4:	4639      	mov	r1, r7
 80091d6:	f7f7 f803 	bl	80001e0 <__aeabi_dsub>
 80091da:	a335      	add	r3, pc, #212	; (adr r3, 80092b0 <__ieee754_pow+0x740>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f7f7 f9b6 	bl	8000550 <__aeabi_dmul>
 80091e4:	a334      	add	r3, pc, #208	; (adr r3, 80092b8 <__ieee754_pow+0x748>)
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	4606      	mov	r6, r0
 80091ec:	460f      	mov	r7, r1
 80091ee:	4620      	mov	r0, r4
 80091f0:	4629      	mov	r1, r5
 80091f2:	f7f7 f9ad 	bl	8000550 <__aeabi_dmul>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4630      	mov	r0, r6
 80091fc:	4639      	mov	r1, r7
 80091fe:	f7f6 fff1 	bl	80001e4 <__adddf3>
 8009202:	9a07      	ldr	r2, [sp, #28]
 8009204:	4b37      	ldr	r3, [pc, #220]	; (80092e4 <__ieee754_pow+0x774>)
 8009206:	4413      	add	r3, r2
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	f7f6 ffea 	bl	80001e4 <__adddf3>
 8009210:	4682      	mov	sl, r0
 8009212:	9805      	ldr	r0, [sp, #20]
 8009214:	468b      	mov	fp, r1
 8009216:	f7f7 f931 	bl	800047c <__aeabi_i2d>
 800921a:	9a07      	ldr	r2, [sp, #28]
 800921c:	4b32      	ldr	r3, [pc, #200]	; (80092e8 <__ieee754_pow+0x778>)
 800921e:	4413      	add	r3, r2
 8009220:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009224:	4606      	mov	r6, r0
 8009226:	460f      	mov	r7, r1
 8009228:	4652      	mov	r2, sl
 800922a:	465b      	mov	r3, fp
 800922c:	ec51 0b18 	vmov	r0, r1, d8
 8009230:	f7f6 ffd8 	bl	80001e4 <__adddf3>
 8009234:	4642      	mov	r2, r8
 8009236:	464b      	mov	r3, r9
 8009238:	f7f6 ffd4 	bl	80001e4 <__adddf3>
 800923c:	4632      	mov	r2, r6
 800923e:	463b      	mov	r3, r7
 8009240:	f7f6 ffd0 	bl	80001e4 <__adddf3>
 8009244:	2000      	movs	r0, #0
 8009246:	4632      	mov	r2, r6
 8009248:	463b      	mov	r3, r7
 800924a:	4604      	mov	r4, r0
 800924c:	460d      	mov	r5, r1
 800924e:	f7f6 ffc7 	bl	80001e0 <__aeabi_dsub>
 8009252:	4642      	mov	r2, r8
 8009254:	464b      	mov	r3, r9
 8009256:	f7f6 ffc3 	bl	80001e0 <__aeabi_dsub>
 800925a:	ec53 2b18 	vmov	r2, r3, d8
 800925e:	f7f6 ffbf 	bl	80001e0 <__aeabi_dsub>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	4650      	mov	r0, sl
 8009268:	4659      	mov	r1, fp
 800926a:	e610      	b.n	8008e8e <__ieee754_pow+0x31e>
 800926c:	2401      	movs	r4, #1
 800926e:	e6a1      	b.n	8008fb4 <__ieee754_pow+0x444>
 8009270:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80092c0 <__ieee754_pow+0x750>
 8009274:	e617      	b.n	8008ea6 <__ieee754_pow+0x336>
 8009276:	bf00      	nop
 8009278:	4a454eef 	.word	0x4a454eef
 800927c:	3fca7e28 	.word	0x3fca7e28
 8009280:	93c9db65 	.word	0x93c9db65
 8009284:	3fcd864a 	.word	0x3fcd864a
 8009288:	a91d4101 	.word	0xa91d4101
 800928c:	3fd17460 	.word	0x3fd17460
 8009290:	518f264d 	.word	0x518f264d
 8009294:	3fd55555 	.word	0x3fd55555
 8009298:	db6fabff 	.word	0xdb6fabff
 800929c:	3fdb6db6 	.word	0x3fdb6db6
 80092a0:	33333303 	.word	0x33333303
 80092a4:	3fe33333 	.word	0x3fe33333
 80092a8:	e0000000 	.word	0xe0000000
 80092ac:	3feec709 	.word	0x3feec709
 80092b0:	dc3a03fd 	.word	0xdc3a03fd
 80092b4:	3feec709 	.word	0x3feec709
 80092b8:	145b01f5 	.word	0x145b01f5
 80092bc:	be3e2fe0 	.word	0xbe3e2fe0
 80092c0:	00000000 	.word	0x00000000
 80092c4:	3ff00000 	.word	0x3ff00000
 80092c8:	7ff00000 	.word	0x7ff00000
 80092cc:	43400000 	.word	0x43400000
 80092d0:	0003988e 	.word	0x0003988e
 80092d4:	000bb679 	.word	0x000bb679
 80092d8:	0800a108 	.word	0x0800a108
 80092dc:	3ff00000 	.word	0x3ff00000
 80092e0:	40080000 	.word	0x40080000
 80092e4:	0800a128 	.word	0x0800a128
 80092e8:	0800a118 	.word	0x0800a118
 80092ec:	a3b5      	add	r3, pc, #724	; (adr r3, 80095c4 <__ieee754_pow+0xa54>)
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f6 ff75 	bl	80001e4 <__adddf3>
 80092fa:	4622      	mov	r2, r4
 80092fc:	ec41 0b1a 	vmov	d10, r0, r1
 8009300:	462b      	mov	r3, r5
 8009302:	4630      	mov	r0, r6
 8009304:	4639      	mov	r1, r7
 8009306:	f7f6 ff6b 	bl	80001e0 <__aeabi_dsub>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	ec51 0b1a 	vmov	r0, r1, d10
 8009312:	f7f7 fbad 	bl	8000a70 <__aeabi_dcmpgt>
 8009316:	2800      	cmp	r0, #0
 8009318:	f47f ae04 	bne.w	8008f24 <__ieee754_pow+0x3b4>
 800931c:	4aa4      	ldr	r2, [pc, #656]	; (80095b0 <__ieee754_pow+0xa40>)
 800931e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009322:	4293      	cmp	r3, r2
 8009324:	f340 8108 	ble.w	8009538 <__ieee754_pow+0x9c8>
 8009328:	151b      	asrs	r3, r3, #20
 800932a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800932e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009332:	fa4a f303 	asr.w	r3, sl, r3
 8009336:	445b      	add	r3, fp
 8009338:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800933c:	4e9d      	ldr	r6, [pc, #628]	; (80095b4 <__ieee754_pow+0xa44>)
 800933e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009342:	4116      	asrs	r6, r2
 8009344:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009348:	2000      	movs	r0, #0
 800934a:	ea23 0106 	bic.w	r1, r3, r6
 800934e:	f1c2 0214 	rsb	r2, r2, #20
 8009352:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009356:	fa4a fa02 	asr.w	sl, sl, r2
 800935a:	f1bb 0f00 	cmp.w	fp, #0
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4620      	mov	r0, r4
 8009364:	4629      	mov	r1, r5
 8009366:	bfb8      	it	lt
 8009368:	f1ca 0a00 	rsblt	sl, sl, #0
 800936c:	f7f6 ff38 	bl	80001e0 <__aeabi_dsub>
 8009370:	ec41 0b19 	vmov	d9, r0, r1
 8009374:	4642      	mov	r2, r8
 8009376:	464b      	mov	r3, r9
 8009378:	ec51 0b19 	vmov	r0, r1, d9
 800937c:	f7f6 ff32 	bl	80001e4 <__adddf3>
 8009380:	a37b      	add	r3, pc, #492	; (adr r3, 8009570 <__ieee754_pow+0xa00>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	2000      	movs	r0, #0
 8009388:	4604      	mov	r4, r0
 800938a:	460d      	mov	r5, r1
 800938c:	f7f7 f8e0 	bl	8000550 <__aeabi_dmul>
 8009390:	ec53 2b19 	vmov	r2, r3, d9
 8009394:	4606      	mov	r6, r0
 8009396:	460f      	mov	r7, r1
 8009398:	4620      	mov	r0, r4
 800939a:	4629      	mov	r1, r5
 800939c:	f7f6 ff20 	bl	80001e0 <__aeabi_dsub>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4640      	mov	r0, r8
 80093a6:	4649      	mov	r1, r9
 80093a8:	f7f6 ff1a 	bl	80001e0 <__aeabi_dsub>
 80093ac:	a372      	add	r3, pc, #456	; (adr r3, 8009578 <__ieee754_pow+0xa08>)
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	f7f7 f8cd 	bl	8000550 <__aeabi_dmul>
 80093b6:	a372      	add	r3, pc, #456	; (adr r3, 8009580 <__ieee754_pow+0xa10>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	4680      	mov	r8, r0
 80093be:	4689      	mov	r9, r1
 80093c0:	4620      	mov	r0, r4
 80093c2:	4629      	mov	r1, r5
 80093c4:	f7f7 f8c4 	bl	8000550 <__aeabi_dmul>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4640      	mov	r0, r8
 80093ce:	4649      	mov	r1, r9
 80093d0:	f7f6 ff08 	bl	80001e4 <__adddf3>
 80093d4:	4604      	mov	r4, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4630      	mov	r0, r6
 80093de:	4639      	mov	r1, r7
 80093e0:	f7f6 ff00 	bl	80001e4 <__adddf3>
 80093e4:	4632      	mov	r2, r6
 80093e6:	463b      	mov	r3, r7
 80093e8:	4680      	mov	r8, r0
 80093ea:	4689      	mov	r9, r1
 80093ec:	f7f6 fef8 	bl	80001e0 <__aeabi_dsub>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4620      	mov	r0, r4
 80093f6:	4629      	mov	r1, r5
 80093f8:	f7f6 fef2 	bl	80001e0 <__aeabi_dsub>
 80093fc:	4642      	mov	r2, r8
 80093fe:	4606      	mov	r6, r0
 8009400:	460f      	mov	r7, r1
 8009402:	464b      	mov	r3, r9
 8009404:	4640      	mov	r0, r8
 8009406:	4649      	mov	r1, r9
 8009408:	f7f7 f8a2 	bl	8000550 <__aeabi_dmul>
 800940c:	a35e      	add	r3, pc, #376	; (adr r3, 8009588 <__ieee754_pow+0xa18>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	4604      	mov	r4, r0
 8009414:	460d      	mov	r5, r1
 8009416:	f7f7 f89b 	bl	8000550 <__aeabi_dmul>
 800941a:	a35d      	add	r3, pc, #372	; (adr r3, 8009590 <__ieee754_pow+0xa20>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f6 fede 	bl	80001e0 <__aeabi_dsub>
 8009424:	4622      	mov	r2, r4
 8009426:	462b      	mov	r3, r5
 8009428:	f7f7 f892 	bl	8000550 <__aeabi_dmul>
 800942c:	a35a      	add	r3, pc, #360	; (adr r3, 8009598 <__ieee754_pow+0xa28>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f7f6 fed7 	bl	80001e4 <__adddf3>
 8009436:	4622      	mov	r2, r4
 8009438:	462b      	mov	r3, r5
 800943a:	f7f7 f889 	bl	8000550 <__aeabi_dmul>
 800943e:	a358      	add	r3, pc, #352	; (adr r3, 80095a0 <__ieee754_pow+0xa30>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	f7f6 fecc 	bl	80001e0 <__aeabi_dsub>
 8009448:	4622      	mov	r2, r4
 800944a:	462b      	mov	r3, r5
 800944c:	f7f7 f880 	bl	8000550 <__aeabi_dmul>
 8009450:	a355      	add	r3, pc, #340	; (adr r3, 80095a8 <__ieee754_pow+0xa38>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	f7f6 fec5 	bl	80001e4 <__adddf3>
 800945a:	4622      	mov	r2, r4
 800945c:	462b      	mov	r3, r5
 800945e:	f7f7 f877 	bl	8000550 <__aeabi_dmul>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4640      	mov	r0, r8
 8009468:	4649      	mov	r1, r9
 800946a:	f7f6 feb9 	bl	80001e0 <__aeabi_dsub>
 800946e:	4604      	mov	r4, r0
 8009470:	460d      	mov	r5, r1
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	4640      	mov	r0, r8
 8009478:	4649      	mov	r1, r9
 800947a:	f7f7 f869 	bl	8000550 <__aeabi_dmul>
 800947e:	2200      	movs	r2, #0
 8009480:	ec41 0b19 	vmov	d9, r0, r1
 8009484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009488:	4620      	mov	r0, r4
 800948a:	4629      	mov	r1, r5
 800948c:	f7f6 fea8 	bl	80001e0 <__aeabi_dsub>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	ec51 0b19 	vmov	r0, r1, d9
 8009498:	f7f7 f984 	bl	80007a4 <__aeabi_ddiv>
 800949c:	4632      	mov	r2, r6
 800949e:	4604      	mov	r4, r0
 80094a0:	460d      	mov	r5, r1
 80094a2:	463b      	mov	r3, r7
 80094a4:	4640      	mov	r0, r8
 80094a6:	4649      	mov	r1, r9
 80094a8:	f7f7 f852 	bl	8000550 <__aeabi_dmul>
 80094ac:	4632      	mov	r2, r6
 80094ae:	463b      	mov	r3, r7
 80094b0:	f7f6 fe98 	bl	80001e4 <__adddf3>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4620      	mov	r0, r4
 80094ba:	4629      	mov	r1, r5
 80094bc:	f7f6 fe90 	bl	80001e0 <__aeabi_dsub>
 80094c0:	4642      	mov	r2, r8
 80094c2:	464b      	mov	r3, r9
 80094c4:	f7f6 fe8c 	bl	80001e0 <__aeabi_dsub>
 80094c8:	460b      	mov	r3, r1
 80094ca:	4602      	mov	r2, r0
 80094cc:	493a      	ldr	r1, [pc, #232]	; (80095b8 <__ieee754_pow+0xa48>)
 80094ce:	2000      	movs	r0, #0
 80094d0:	f7f6 fe86 	bl	80001e0 <__aeabi_dsub>
 80094d4:	ec41 0b10 	vmov	d0, r0, r1
 80094d8:	ee10 3a90 	vmov	r3, s1
 80094dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80094e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094e4:	da2b      	bge.n	800953e <__ieee754_pow+0x9ce>
 80094e6:	4650      	mov	r0, sl
 80094e8:	f000 f966 	bl	80097b8 <scalbn>
 80094ec:	ec51 0b10 	vmov	r0, r1, d0
 80094f0:	ec53 2b18 	vmov	r2, r3, d8
 80094f4:	f7ff bbed 	b.w	8008cd2 <__ieee754_pow+0x162>
 80094f8:	4b30      	ldr	r3, [pc, #192]	; (80095bc <__ieee754_pow+0xa4c>)
 80094fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80094fe:	429e      	cmp	r6, r3
 8009500:	f77f af0c 	ble.w	800931c <__ieee754_pow+0x7ac>
 8009504:	4b2e      	ldr	r3, [pc, #184]	; (80095c0 <__ieee754_pow+0xa50>)
 8009506:	440b      	add	r3, r1
 8009508:	4303      	orrs	r3, r0
 800950a:	d009      	beq.n	8009520 <__ieee754_pow+0x9b0>
 800950c:	ec51 0b18 	vmov	r0, r1, d8
 8009510:	2200      	movs	r2, #0
 8009512:	2300      	movs	r3, #0
 8009514:	f7f7 fa8e 	bl	8000a34 <__aeabi_dcmplt>
 8009518:	3800      	subs	r0, #0
 800951a:	bf18      	it	ne
 800951c:	2001      	movne	r0, #1
 800951e:	e447      	b.n	8008db0 <__ieee754_pow+0x240>
 8009520:	4622      	mov	r2, r4
 8009522:	462b      	mov	r3, r5
 8009524:	f7f6 fe5c 	bl	80001e0 <__aeabi_dsub>
 8009528:	4642      	mov	r2, r8
 800952a:	464b      	mov	r3, r9
 800952c:	f7f7 fa96 	bl	8000a5c <__aeabi_dcmpge>
 8009530:	2800      	cmp	r0, #0
 8009532:	f43f aef3 	beq.w	800931c <__ieee754_pow+0x7ac>
 8009536:	e7e9      	b.n	800950c <__ieee754_pow+0x99c>
 8009538:	f04f 0a00 	mov.w	sl, #0
 800953c:	e71a      	b.n	8009374 <__ieee754_pow+0x804>
 800953e:	ec51 0b10 	vmov	r0, r1, d0
 8009542:	4619      	mov	r1, r3
 8009544:	e7d4      	b.n	80094f0 <__ieee754_pow+0x980>
 8009546:	491c      	ldr	r1, [pc, #112]	; (80095b8 <__ieee754_pow+0xa48>)
 8009548:	2000      	movs	r0, #0
 800954a:	f7ff bb30 	b.w	8008bae <__ieee754_pow+0x3e>
 800954e:	2000      	movs	r0, #0
 8009550:	2100      	movs	r1, #0
 8009552:	f7ff bb2c 	b.w	8008bae <__ieee754_pow+0x3e>
 8009556:	4630      	mov	r0, r6
 8009558:	4639      	mov	r1, r7
 800955a:	f7ff bb28 	b.w	8008bae <__ieee754_pow+0x3e>
 800955e:	9204      	str	r2, [sp, #16]
 8009560:	f7ff bb7a 	b.w	8008c58 <__ieee754_pow+0xe8>
 8009564:	2300      	movs	r3, #0
 8009566:	f7ff bb64 	b.w	8008c32 <__ieee754_pow+0xc2>
 800956a:	bf00      	nop
 800956c:	f3af 8000 	nop.w
 8009570:	00000000 	.word	0x00000000
 8009574:	3fe62e43 	.word	0x3fe62e43
 8009578:	fefa39ef 	.word	0xfefa39ef
 800957c:	3fe62e42 	.word	0x3fe62e42
 8009580:	0ca86c39 	.word	0x0ca86c39
 8009584:	be205c61 	.word	0xbe205c61
 8009588:	72bea4d0 	.word	0x72bea4d0
 800958c:	3e663769 	.word	0x3e663769
 8009590:	c5d26bf1 	.word	0xc5d26bf1
 8009594:	3ebbbd41 	.word	0x3ebbbd41
 8009598:	af25de2c 	.word	0xaf25de2c
 800959c:	3f11566a 	.word	0x3f11566a
 80095a0:	16bebd93 	.word	0x16bebd93
 80095a4:	3f66c16c 	.word	0x3f66c16c
 80095a8:	5555553e 	.word	0x5555553e
 80095ac:	3fc55555 	.word	0x3fc55555
 80095b0:	3fe00000 	.word	0x3fe00000
 80095b4:	000fffff 	.word	0x000fffff
 80095b8:	3ff00000 	.word	0x3ff00000
 80095bc:	4090cbff 	.word	0x4090cbff
 80095c0:	3f6f3400 	.word	0x3f6f3400
 80095c4:	652b82fe 	.word	0x652b82fe
 80095c8:	3c971547 	.word	0x3c971547

080095cc <__ieee754_sqrt>:
 80095cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d0:	ec55 4b10 	vmov	r4, r5, d0
 80095d4:	4e55      	ldr	r6, [pc, #340]	; (800972c <__ieee754_sqrt+0x160>)
 80095d6:	43ae      	bics	r6, r5
 80095d8:	ee10 0a10 	vmov	r0, s0
 80095dc:	ee10 3a10 	vmov	r3, s0
 80095e0:	462a      	mov	r2, r5
 80095e2:	4629      	mov	r1, r5
 80095e4:	d110      	bne.n	8009608 <__ieee754_sqrt+0x3c>
 80095e6:	ee10 2a10 	vmov	r2, s0
 80095ea:	462b      	mov	r3, r5
 80095ec:	f7f6 ffb0 	bl	8000550 <__aeabi_dmul>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f6 fdf4 	bl	80001e4 <__adddf3>
 80095fc:	4604      	mov	r4, r0
 80095fe:	460d      	mov	r5, r1
 8009600:	ec45 4b10 	vmov	d0, r4, r5
 8009604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009608:	2d00      	cmp	r5, #0
 800960a:	dc10      	bgt.n	800962e <__ieee754_sqrt+0x62>
 800960c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009610:	4330      	orrs	r0, r6
 8009612:	d0f5      	beq.n	8009600 <__ieee754_sqrt+0x34>
 8009614:	b15d      	cbz	r5, 800962e <__ieee754_sqrt+0x62>
 8009616:	ee10 2a10 	vmov	r2, s0
 800961a:	462b      	mov	r3, r5
 800961c:	ee10 0a10 	vmov	r0, s0
 8009620:	f7f6 fdde 	bl	80001e0 <__aeabi_dsub>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	f7f7 f8bc 	bl	80007a4 <__aeabi_ddiv>
 800962c:	e7e6      	b.n	80095fc <__ieee754_sqrt+0x30>
 800962e:	1512      	asrs	r2, r2, #20
 8009630:	d074      	beq.n	800971c <__ieee754_sqrt+0x150>
 8009632:	07d4      	lsls	r4, r2, #31
 8009634:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009638:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800963c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009640:	bf5e      	ittt	pl
 8009642:	0fda      	lsrpl	r2, r3, #31
 8009644:	005b      	lslpl	r3, r3, #1
 8009646:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800964a:	2400      	movs	r4, #0
 800964c:	0fda      	lsrs	r2, r3, #31
 800964e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009652:	107f      	asrs	r7, r7, #1
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	2516      	movs	r5, #22
 8009658:	4620      	mov	r0, r4
 800965a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800965e:	1886      	adds	r6, r0, r2
 8009660:	428e      	cmp	r6, r1
 8009662:	bfde      	ittt	le
 8009664:	1b89      	suble	r1, r1, r6
 8009666:	18b0      	addle	r0, r6, r2
 8009668:	18a4      	addle	r4, r4, r2
 800966a:	0049      	lsls	r1, r1, #1
 800966c:	3d01      	subs	r5, #1
 800966e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009672:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009676:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800967a:	d1f0      	bne.n	800965e <__ieee754_sqrt+0x92>
 800967c:	462a      	mov	r2, r5
 800967e:	f04f 0e20 	mov.w	lr, #32
 8009682:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009686:	4281      	cmp	r1, r0
 8009688:	eb06 0c05 	add.w	ip, r6, r5
 800968c:	dc02      	bgt.n	8009694 <__ieee754_sqrt+0xc8>
 800968e:	d113      	bne.n	80096b8 <__ieee754_sqrt+0xec>
 8009690:	459c      	cmp	ip, r3
 8009692:	d811      	bhi.n	80096b8 <__ieee754_sqrt+0xec>
 8009694:	f1bc 0f00 	cmp.w	ip, #0
 8009698:	eb0c 0506 	add.w	r5, ip, r6
 800969c:	da43      	bge.n	8009726 <__ieee754_sqrt+0x15a>
 800969e:	2d00      	cmp	r5, #0
 80096a0:	db41      	blt.n	8009726 <__ieee754_sqrt+0x15a>
 80096a2:	f100 0801 	add.w	r8, r0, #1
 80096a6:	1a09      	subs	r1, r1, r0
 80096a8:	459c      	cmp	ip, r3
 80096aa:	bf88      	it	hi
 80096ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80096b0:	eba3 030c 	sub.w	r3, r3, ip
 80096b4:	4432      	add	r2, r6
 80096b6:	4640      	mov	r0, r8
 80096b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80096bc:	f1be 0e01 	subs.w	lr, lr, #1
 80096c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80096c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096cc:	d1db      	bne.n	8009686 <__ieee754_sqrt+0xba>
 80096ce:	430b      	orrs	r3, r1
 80096d0:	d006      	beq.n	80096e0 <__ieee754_sqrt+0x114>
 80096d2:	1c50      	adds	r0, r2, #1
 80096d4:	bf13      	iteet	ne
 80096d6:	3201      	addne	r2, #1
 80096d8:	3401      	addeq	r4, #1
 80096da:	4672      	moveq	r2, lr
 80096dc:	f022 0201 	bicne.w	r2, r2, #1
 80096e0:	1063      	asrs	r3, r4, #1
 80096e2:	0852      	lsrs	r2, r2, #1
 80096e4:	07e1      	lsls	r1, r4, #31
 80096e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80096ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80096ee:	bf48      	it	mi
 80096f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80096f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80096f8:	4614      	mov	r4, r2
 80096fa:	e781      	b.n	8009600 <__ieee754_sqrt+0x34>
 80096fc:	0ad9      	lsrs	r1, r3, #11
 80096fe:	3815      	subs	r0, #21
 8009700:	055b      	lsls	r3, r3, #21
 8009702:	2900      	cmp	r1, #0
 8009704:	d0fa      	beq.n	80096fc <__ieee754_sqrt+0x130>
 8009706:	02cd      	lsls	r5, r1, #11
 8009708:	d50a      	bpl.n	8009720 <__ieee754_sqrt+0x154>
 800970a:	f1c2 0420 	rsb	r4, r2, #32
 800970e:	fa23 f404 	lsr.w	r4, r3, r4
 8009712:	1e55      	subs	r5, r2, #1
 8009714:	4093      	lsls	r3, r2
 8009716:	4321      	orrs	r1, r4
 8009718:	1b42      	subs	r2, r0, r5
 800971a:	e78a      	b.n	8009632 <__ieee754_sqrt+0x66>
 800971c:	4610      	mov	r0, r2
 800971e:	e7f0      	b.n	8009702 <__ieee754_sqrt+0x136>
 8009720:	0049      	lsls	r1, r1, #1
 8009722:	3201      	adds	r2, #1
 8009724:	e7ef      	b.n	8009706 <__ieee754_sqrt+0x13a>
 8009726:	4680      	mov	r8, r0
 8009728:	e7bd      	b.n	80096a6 <__ieee754_sqrt+0xda>
 800972a:	bf00      	nop
 800972c:	7ff00000 	.word	0x7ff00000

08009730 <with_errno>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	4604      	mov	r4, r0
 8009734:	460d      	mov	r5, r1
 8009736:	4616      	mov	r6, r2
 8009738:	f7ff f93c 	bl	80089b4 <__errno>
 800973c:	4629      	mov	r1, r5
 800973e:	6006      	str	r6, [r0, #0]
 8009740:	4620      	mov	r0, r4
 8009742:	bd70      	pop	{r4, r5, r6, pc}

08009744 <xflow>:
 8009744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009746:	4614      	mov	r4, r2
 8009748:	461d      	mov	r5, r3
 800974a:	b108      	cbz	r0, 8009750 <xflow+0xc>
 800974c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009750:	e9cd 2300 	strd	r2, r3, [sp]
 8009754:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009758:	4620      	mov	r0, r4
 800975a:	4629      	mov	r1, r5
 800975c:	f7f6 fef8 	bl	8000550 <__aeabi_dmul>
 8009760:	2222      	movs	r2, #34	; 0x22
 8009762:	b003      	add	sp, #12
 8009764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009768:	f7ff bfe2 	b.w	8009730 <with_errno>

0800976c <__math_uflow>:
 800976c:	b508      	push	{r3, lr}
 800976e:	2200      	movs	r2, #0
 8009770:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009774:	f7ff ffe6 	bl	8009744 <xflow>
 8009778:	ec41 0b10 	vmov	d0, r0, r1
 800977c:	bd08      	pop	{r3, pc}

0800977e <__math_oflow>:
 800977e:	b508      	push	{r3, lr}
 8009780:	2200      	movs	r2, #0
 8009782:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009786:	f7ff ffdd 	bl	8009744 <xflow>
 800978a:	ec41 0b10 	vmov	d0, r0, r1
 800978e:	bd08      	pop	{r3, pc}

08009790 <fabs>:
 8009790:	ec51 0b10 	vmov	r0, r1, d0
 8009794:	ee10 2a10 	vmov	r2, s0
 8009798:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800979c:	ec43 2b10 	vmov	d0, r2, r3
 80097a0:	4770      	bx	lr

080097a2 <finite>:
 80097a2:	b082      	sub	sp, #8
 80097a4:	ed8d 0b00 	vstr	d0, [sp]
 80097a8:	9801      	ldr	r0, [sp, #4]
 80097aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80097ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80097b2:	0fc0      	lsrs	r0, r0, #31
 80097b4:	b002      	add	sp, #8
 80097b6:	4770      	bx	lr

080097b8 <scalbn>:
 80097b8:	b570      	push	{r4, r5, r6, lr}
 80097ba:	ec55 4b10 	vmov	r4, r5, d0
 80097be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80097c2:	4606      	mov	r6, r0
 80097c4:	462b      	mov	r3, r5
 80097c6:	b99a      	cbnz	r2, 80097f0 <scalbn+0x38>
 80097c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80097cc:	4323      	orrs	r3, r4
 80097ce:	d036      	beq.n	800983e <scalbn+0x86>
 80097d0:	4b39      	ldr	r3, [pc, #228]	; (80098b8 <scalbn+0x100>)
 80097d2:	4629      	mov	r1, r5
 80097d4:	ee10 0a10 	vmov	r0, s0
 80097d8:	2200      	movs	r2, #0
 80097da:	f7f6 feb9 	bl	8000550 <__aeabi_dmul>
 80097de:	4b37      	ldr	r3, [pc, #220]	; (80098bc <scalbn+0x104>)
 80097e0:	429e      	cmp	r6, r3
 80097e2:	4604      	mov	r4, r0
 80097e4:	460d      	mov	r5, r1
 80097e6:	da10      	bge.n	800980a <scalbn+0x52>
 80097e8:	a32b      	add	r3, pc, #172	; (adr r3, 8009898 <scalbn+0xe0>)
 80097ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ee:	e03a      	b.n	8009866 <scalbn+0xae>
 80097f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80097f4:	428a      	cmp	r2, r1
 80097f6:	d10c      	bne.n	8009812 <scalbn+0x5a>
 80097f8:	ee10 2a10 	vmov	r2, s0
 80097fc:	4620      	mov	r0, r4
 80097fe:	4629      	mov	r1, r5
 8009800:	f7f6 fcf0 	bl	80001e4 <__adddf3>
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	e019      	b.n	800983e <scalbn+0x86>
 800980a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800980e:	460b      	mov	r3, r1
 8009810:	3a36      	subs	r2, #54	; 0x36
 8009812:	4432      	add	r2, r6
 8009814:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009818:	428a      	cmp	r2, r1
 800981a:	dd08      	ble.n	800982e <scalbn+0x76>
 800981c:	2d00      	cmp	r5, #0
 800981e:	a120      	add	r1, pc, #128	; (adr r1, 80098a0 <scalbn+0xe8>)
 8009820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009824:	da1c      	bge.n	8009860 <scalbn+0xa8>
 8009826:	a120      	add	r1, pc, #128	; (adr r1, 80098a8 <scalbn+0xf0>)
 8009828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800982c:	e018      	b.n	8009860 <scalbn+0xa8>
 800982e:	2a00      	cmp	r2, #0
 8009830:	dd08      	ble.n	8009844 <scalbn+0x8c>
 8009832:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009836:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800983a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800983e:	ec45 4b10 	vmov	d0, r4, r5
 8009842:	bd70      	pop	{r4, r5, r6, pc}
 8009844:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009848:	da19      	bge.n	800987e <scalbn+0xc6>
 800984a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800984e:	429e      	cmp	r6, r3
 8009850:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009854:	dd0a      	ble.n	800986c <scalbn+0xb4>
 8009856:	a112      	add	r1, pc, #72	; (adr r1, 80098a0 <scalbn+0xe8>)
 8009858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e2      	bne.n	8009826 <scalbn+0x6e>
 8009860:	a30f      	add	r3, pc, #60	; (adr r3, 80098a0 <scalbn+0xe8>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f6 fe73 	bl	8000550 <__aeabi_dmul>
 800986a:	e7cb      	b.n	8009804 <scalbn+0x4c>
 800986c:	a10a      	add	r1, pc, #40	; (adr r1, 8009898 <scalbn+0xe0>)
 800986e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d0b8      	beq.n	80097e8 <scalbn+0x30>
 8009876:	a10e      	add	r1, pc, #56	; (adr r1, 80098b0 <scalbn+0xf8>)
 8009878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800987c:	e7b4      	b.n	80097e8 <scalbn+0x30>
 800987e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009882:	3236      	adds	r2, #54	; 0x36
 8009884:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009888:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800988c:	4620      	mov	r0, r4
 800988e:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <scalbn+0x108>)
 8009890:	2200      	movs	r2, #0
 8009892:	e7e8      	b.n	8009866 <scalbn+0xae>
 8009894:	f3af 8000 	nop.w
 8009898:	c2f8f359 	.word	0xc2f8f359
 800989c:	01a56e1f 	.word	0x01a56e1f
 80098a0:	8800759c 	.word	0x8800759c
 80098a4:	7e37e43c 	.word	0x7e37e43c
 80098a8:	8800759c 	.word	0x8800759c
 80098ac:	fe37e43c 	.word	0xfe37e43c
 80098b0:	c2f8f359 	.word	0xc2f8f359
 80098b4:	81a56e1f 	.word	0x81a56e1f
 80098b8:	43500000 	.word	0x43500000
 80098bc:	ffff3cb0 	.word	0xffff3cb0
 80098c0:	3c900000 	.word	0x3c900000

080098c4 <_init>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	bf00      	nop
 80098c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ca:	bc08      	pop	{r3}
 80098cc:	469e      	mov	lr, r3
 80098ce:	4770      	bx	lr

080098d0 <_fini>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	bf00      	nop
 80098d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d6:	bc08      	pop	{r3}
 80098d8:	469e      	mov	lr, r3
 80098da:	4770      	bx	lr
